// -*- coding: utf-8 -*-
/**
\~

\mainpage Open Robotics Automation Virtual Environment

Version: \openraveversion

\~english

This document covers the core %OpenRAVE concepts, the C++ API, C++ examples, and C++ usage of the plugins offered in the base
installation.

Visit the \homepage{<b>official documentation page</b>} for information on all other %OpenRAVE features.

\~japanese

このドキュメントは%OpenRAVEの主要な概念，C++のAPI，使用例，インストール時に提供されたプラグインの使い方について記載しています．%OpenRAVEを用いたロボットシステム，%OpenRAVEの公式リリース，ビデオ／チュートリアルなどの最新情報は\homepage{<b>公式HP</b>}をご参照ください．


\~english  \section main_started Getting Started
\~japanese \section main_started はじめに
\~
- \subpage installation
- \subpage p_basic_usage
- \envvars{Environment Variables}

\~english  \section main_architecture Architecture
\~japanese \section main_architecture アーキテクチャー
\~
- \subpage architecture_concepts
- \subpage interface_concepts
- \subpage writing_plugins
- \ref arch_controller_writing
- \ref arch_cloning

\~english \section main_reference Reference
\~japanese \section main_reference 参考資料
\~
- \subpage interfaces
- \subpage executables
- \subpage geometric_primitives
- \subpage affine_math
- \subpage cpp_examples

 */

/** 
\~english  \page p_basic_usage Basic Usage and Loading Environments

To check out the plugins loaded type
\verbatim
openrave --listplugins
\endverbatim

To load a simple robot into the scene type:
\verbatim
openrave robots/puma.robot.xml
\endverbatim

If a plugin declares a Module named \b MyModule, then to launch the module at startup type
\verbatim
openrave robots/puma.robot.xml -module MyModule 'myarguments'
\endverbatim

The \openrave_py{openrave.py} program is similar to \c openrave, but supports much more
functionality. In fact, \c openrave potentially calls into \openrave_py{openrave.py} for commands it
cannot support.

\~japanese \page p_basic_usage 基本的な使い方

提供されているプラグインのリストを表示するには次のコマンドを実行して下さい．
\verbatim
openrave --listplugins
\endverbatim

xmlファイルで定義されたロボットをOpenRAVE環境に読み出すには次のコマンドを実行して下さい．
\verbatim
openrave robots/puma.robot.xml
\endverbatim

プラグインが<b>MyModule</b>という問題例を定義している場合，次のコマンドで起動することができます．
\verbatim
openrave robots/puma.robot.xml -module MyModule 'myarguments'
\endverbatim

openraveと似たコマンドに\openrave_py{openrave.py}というコマンドがあります．こちらはPythonで書かれているためOpenRAVEで提供されているすべてのモジュールにアクセスすることが可能で非常に機能的です．一方，openraveコマンドは既にC++でコンパイルされているため，Pythonがインストールされている開発環境でなくても実行することが可能です．

*/

/** 
\page writing_plugins Writing Plugins and Interfaces

\section writing_plugins_contents Contents
- \ref writing_plugins_example
- \ref writing_plugins_build
- \ref writing_plugins_usage
- \ref writing_plugins_doc
- \ref writing_plugins_loading

Every plugin needs to export several functions as defined in \ref plugin_exports to notify %OpenRAVE
what interfaces it has. When a plugin is first loaded, it is validated by the environment and its
\ref OpenRAVEGetPluginAttributes function will be called in order so the %OpenRAVE core can register
the names of its provided interfaces. Plugins themselves can query functionality offer by other
plugins through the environment's \ref env_plugin_functionality "interface querying functions".

\section writing_plugins_example Making a Simple Interface

Example \ref plugincpp.cpp "plugincpp.cpp" creates a \ref OpenRAVE::ModuleBase interface named \b MyModule and have it offer two commands: \b numbodies and \b load.

\dontinclude plugincpp.cpp

The first \#include the compiler sees has to be \ref openrave/openrave.h. Then for the main C++ file, we include \ref openrave/plugin.h for several helper functions.

\until {
\until {

Now register the two commands of the module. \c boost::bind is necessary for specifying member functions as callbacks.

\skipline MyModule(
\until }

Provide the implementations for the member functions:
\skipline bool
\until };

It is recommend to plugin authors to include \ref openrave/plugin.h in their main C++
file, this will provide implementations for the export functions and ask the user to provide a new
set of functions \ref CreateInterfaceValidated and \ref GetPluginAttributesValidated.

Providing \b MyModule would look like:

\skipline InterfaceBasePtr
\until }

In order to tell %OpenRAVE what is provided, have to define:

\skipline GetPluginAttributesValidated
\until }

\section writing_plugins_build Building the Plugin

\subsection writing_plugins_cmake Using CMake (Linux and Windows)

The main build system of %OpenRAVE is cmake, and \ref FindOpenRAVE.cmake "FindOpenRAVE.cmake" can be used to find the %OpenRAVE installation. An example of the \c CMakeLists.txt file for compiling a plugin using \ref FindOpenRAVE.cmake "FindOpenRAVE.cmake" is:

\verbatim
cmake_minimum_required (VERSION 2.6)
project (plugincpp)
find_package(OpenRAVE REQUIRED)
include_directories(${OpenRAVE_INCLUDE_DIRS})
link_directories(${OpenRAVE_LIBRARY_DIRS})
add_library(plugincpp SHARED plugincpp.cpp)
set_target_properties(plugincpp PROPERTIES COMPILE_FLAGS "${OpenRAVE_CXX_FLAGS}" LINK_FLAGS "${OpenRAVE_LINK_FLAGS}")
target_link_libraries(plugincpp ${OpenRAVE_LIBRARIES})
\endverbatim

\subsection writing_plugins_linux Other Build Systems

If not using CMake, then here's how the development files are organized:

<b>Linux Users</b>

Depending on where openrave was installed, a \ref openrave_config should have been created in the \c $OPENRAVE_INSTALL/bin
directory. It is possible to call <tt>openrave-config --cflags</tt> to get the correct paths and
flags to include in gcc to link with \c libopenrave.so.

\section writing_plugins_usage Using the Plugin

There are several ways to load the generated plugin.

- The most simplest method is to add its installation directory to \envvars{OPENRAVE_PLUGINS}. %OpenRAVE will automatically load it up at start up. You can confirm this is the case using:
\verbatim
openrave --listplugins
\endverbatim

- A more explicit way is to load it from the command line using any one of the following methods:
\verbatim
openrave --loadplugin $SOMEPATH/libplugincpp
openrave --loadplugin $SOMEPATH/libplugincpp.so
openrave --loadplugin ./libplugincpp.so
\endverbatim
 where \c $SOMEPATH is the absolute/relative path of the shared object. 

- Another way is to load it from the C++/Python/APIs:<br/>
\b C++
\code
RaveLoadPlugin(env,"plugincpp");
\endcode
\b Python
\verbatim
RaveLoadPlugin('plugincpp')
\endverbatim
\b Octave
\verbatim
orEnvLoadPlugin('plugincpp');
\endverbatim

Once the plugin is loaded, we can create the interface and call its commands to load an environment and return the number of bodies:

\b C++
\code
ModuleBasePtr prob = RaveCreateModule(env,"MyModule");
env->AddModule(prob,"");
stringstream sinput, sout;
// input the load command
sinput << "load data/lab1.env.xml";
if( !prob->SendCommand(sout,sinput) ) {
    RAVELOG_WARN("command failed!\n");
}
else {
    sinput.str(""); // have to reset the stream from the previous command
    sinput << "numbodies"; // input the numbodies command
    prob->SendCommand(sout,sinput);
    int numbodies;
    sout >> numbodies;
    RAVELOG_INFO("number of bodies are: %d\n",numbodies);
}
\endcode

\b Python
\verbatim
prob = RaveCreateModule(env,'MyModule')
env.AddModule(prob,args='')
cmdout = prob.SendCommand('load data/lab1.env.xml')
if cmdout is None:
    raveLogWarn('command failed!')
else:
    cmdout = prob.SendCommand('numbodies')
    print 'number of bodies are: ',cmdout
\endverbatim

\b Octave (only simple commands possible)
\verbatim
prob = orEnvCreateProblem('MyModule');
orProblemSendCommand('load data/lab1.env.xml',prob);
numbodies = orProblemSendCommand('numbodies',prob);
disp(['number of bodies are: ' num2str(numbodies)])
\endverbatim

\section writing_plugins_doc Documenting Interfaces

The format of all interface documentation is the widely adopted standard <a
href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>. The description of an
interface and all information about its usage should be provided by two places:

- OpenRAVE::InterfaceBase::GetDescription() - Returns the full documentation of the interface
  description. If opening new sections, do not to use '-'.

- OpenRAVE::InterfaceBase::RegisterCommand() - Help string in every command registered. If opening new sections,
do not to use '-', '=', and '~'.

These descriptions are automatically parsed using Sphinx and put on the web.

The reason why doxygen and other commenting tools are not adopted for plugin documentation is
because the \ref interfaces are the only binding between plugins. Even if the header file or
provided functions of a particular plugin were provided, other plugins would not be able to use them
if not offered through the %OpenRAVE's channels.

\section writing_plugins_loading Loading Plugins

Many mechanisms have been put in place to prevent mismatching/old plugins to be loaded by the
core. Using interfaces from stale plugins can lead to unexpected crashes that are very difficult to
debug. It is possible to automatically come up with a unique hash of the interface functions and
members by running each interface through a C++ lexer and then creating a 128bit unique md5 hash.
In order to protect plugins compiled with a different version, %OpenRAVE creates a md5 hash from
each interface class definition using \ref cpp-gen-md5 and stores them in \ref openrave/interfacehashes.h.

The interface hash can be retrieved using \ref OpenRAVE::RaveGetInterfaceHash. For an interface to
be loaded successfully, the plugin has to check that the hash the core is using matches the hash
compiled with the plugin. These types of checks ensure that stale plugins will never be loaded;
helper functions are offered in \ref openrave/plugin.h, which all plugin authors should use.

*/

/**
\examples

\page cpp_examples C++ Examples

\section cpp_examples_build Building

All C++ examples are stored in \c $OPENRAVE_SHARE_DIR/cppexamples. Use the \c CMakeLists.txt file to build the examples by:
\verbatim
mkdir cppexamplesbuild
cd cppexamplesbuild
cmake `openrave-config --share-dir`/cppexamples
make
\endverbatim

\subsection Detecting OpenRAVE Installations

- \ref FindOpenRAVE.cmake - include this in cmake projects for automatic detection of OpenRAVE.

\section cpp_examples_plugins Examples Plugins

- \ref customreader.cpp
- \ref plugincpp.cpp

\section cpp_examples_programs Examples loading the OpenRAVE core:

- \ref ikfastloader.cpp
- \ref orcollision.cpp
- \ref orconveyormovement.cpp
- \ref orikfilter.cpp
- \ref orloadviewer.cpp
- \ref ormulticontrol.cpp
- \ref ormultithreadedplanning.cpp
- \ref orplanning_door.cpp
- \ref orplanning_ik.cpp
- \ref orplanning_module.cpp
- \ref orplanning_multirobot.cpp
- \ref orplanning_planner.cpp
- \ref orpr2turnlever.cpp
- \ref orpythonbinding.cpp
- \ref orshowsensors.cpp
- \ref ortrajectory.cpp

\section cpp_examples_otherlib Linking with Other Libraries

- \ref opencvsaving.cpp

*/

/** \defgroup plugin_exports Plugin Export Functions

    Every plugin needs to export these functions
*/

/** \defgroup interfaces Base Interface Classes

A list of the %OpenRAVE interface templates. See \ref interface_concepts.
 */

/** \defgroup geometric_primitives Geometric Primitives

A set of geometric primitives and functions offering collision detection and other distance measurement capabilities.

*/

/** \defgroup affine_math Affine Math

A set of classes and functions that provide the basic affine math operations with vectors, matrices, and quaternions.

*/

/**
\example FindOpenRAVE.cmake

Allows %OpenRAVE installation to be found when using the CMake build system.
*/

/**
\page executables Executable Programs

- \subpage openrave_exe
- \subpage openrave_config

*/

/**
\page openrave_config openrave-config

Used to find the %OpenRAVE installation location and all the include/development/examples files.

Usage:
\verbatim
openrave-config
  [--prefix[=DIR]]
  [--exec-prefix[=DIR]]
  [--version] [--cflags]
  [--libs]
  [--libs-core]
  [--libs-only-l]
  [--libs-only-L]
  [--cflags-only-I]
  [--shared-libs]
  [--python-dir]
  [--octave-dir]
  [--matlab-dir]
  [--usage | --help]
\endverbatim

*/
