# Japanese translations for PACKAGE package.
# Copyright (C) 2006-2012, Rosen Diankov and contributors
# This file is distributed under the same license as the OpenRAVE package.
# Rosen Diankov <rosen.diankov@gmail.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: OpenRAVE 0.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-08-05 18:32\n"
"PO-Revision-Date: 2012-06-19 18:04+0900\n"
"Last-Translator: Rosen Diankov <rosen.diankov@gmail.com>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 79253f69eca54176990977b2f2c20eae
#: ../../source/openravepy/convexdecompositionpy.rst:2
msgid ":mod:`convexdecompositionpy` Module"
msgstr ""

# 300071852b624869b6469364153aebdb
#: ../../docstring of
#: openravepy.convexdecompositionpy.computeConvexDecomposition:1
msgid "John Ratcliff's Convex Decomposition"
msgstr ""

# 413d296af94741f5928c24007229aa4f
#: ../../docstring of
#: openravepy.convexdecompositionpy.computeConvexDecomposition:4
msgid ""
"boost::python::api::object computeConvexDecomposition(boost::"
"multi_array<float, 2ul, std::allocator<float> >,boost::multi_array<int, 2ul, "
"std::allocator<int> > [,float [,unsigned int [,unsigned int [,float [,float "
"[,float [,bool [,bool]]]]]]]])"
msgstr ""

# cba43b199ad14a65838ad5ad39d97f18
#: ../../source/openravepy/databases.convexdecomposition.rst:2
msgid ":mod:`convexdecomposition` Module"
msgstr ""

# 894cd54b02db47dea878220f4385be00
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:1
msgid "Convex decomposition of the link geometry of the robot."
msgstr ""

# 710f4c71ec6f4f508dbf65dc007c20d1
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:6
msgid "`[source] <../_modules/openravepy/databases/convexdecomposition.html>`_"
msgstr ""

# ac6f9260289e430db4ff57ecd19c495a
# 68064cc53b0c490eb4bbfc776d7522d2
# 184db19b768243a984b4512a61ee1bbb
# 9ba8537d4b3c42aa99ce7d2604fbea3e
# dc229580683b4903b77d80d8b7838539
# 9f06af74d0e040bb8fe1617b5c6b09f2
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:8
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping:8
#: ../../openravepy/databases/inversereachability.py:docstring
#: openravepy.databases.inversereachability:8
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability:11
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics:8
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel:8
msgid "**Running the Generator**"
msgstr ""

# f64e08ad959a475e962b58f8ed0a53ca
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:15
msgid "**Showing the Decomposition**"
msgstr ""

# dae56e0df44a4a4285bfda43c0ea34e3
# f43ad856a97f420bbb0345203f4863b7
# de95821f26c245058b4f7cc71ae49fc8
# 10121b8b56f54081865ab042ae4ecec8
# 01bc5f1e2990475cad873aee09edb765
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:22
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping:17
#: ../../openravepy/databases/inversekinematics.py:docstring
#: openravepy.databases.inversekinematics:15
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel:21
#: ../../openravepy/ikfast.py:docstring openravepy.ikfast:53
msgid "Usage"
msgstr ""

# 564b4da422084e729cdd12581182d3f0
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:24
msgid "Dynamically load the convex hulls for a robot:"
msgstr ""

# 4aa01080c5824d16941c7328e7e614f1
# 194bfdde09764b6f984c92479db7bcd8
# a6c11441201844e484b3610a38e185d7
# 47589f44d9fc4c3fa3aabb31ec95e06a
# 26856e50747d4673bfcd0708c77b7a08
# c4f54425ced54172957b4bf42c810d17
# aedc360f681d4d4c835d89d96016d2a2
# 8a1d53eb312a4b028ec92d477fd0412f
# 6abf7aa51d6b41a1b888ca3a8de2eab9
# 8f625fda38ae404ea6366b359e722de9
# 77e976c4d5df4f4895d3cb940dd078f9
# 956a34f1c550456782578ccf411d59d3
# 890bb521b3434d31bc472de5ccf66d50
# 11f78436415748f99ee6ec6b043bbaca
# 4dd5e2f5aab544d8a289afb68f23f7a6
# 9cc0dc8163be4548ab90b0c911330cbb
# c23a78cd57e944eb8ecdfa51c8101688
# c1ddf53a42ee4549890f27af445a3d96
# 74d379029a544ff1a5edc4e212b086fd
# d802101e20e74b73b1603c3cf20f80ad
# 1ad74dc978f94961a2909b245f098cd8
# 03c8e89e3fda4d07bcb087751edb59cb
# f5682f34356f4107a91c7c88fe2977a0
# 74fb360cc4964ae89bd0ba64c1d9bdf9
# 0835d04301164b23bba9e869296056c8
# a14f6deac768445fb845848a64900138
# 243e28a2c33f48a8ba3718a688b1a4a9
# aa41c3724da748718d9c3688d1f83372
# cde7f412a0b7401b9e5091c6141a909b
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:33
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping:49
#: ../../openravepy/databases/inversekinematics.py:docstring
#: openravepy.databases.inversekinematics:44
#: ../../openravepy/databases/inversereachability.py:docstring
#: openravepy.databases.inversereachability:15
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability:24
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics:26
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel:34
#: ../../openravepy/examples/calibrationviews.py:docstring
#: openravepy.examples.calibrationviews:6
#: ../../openravepy/examples/checkconvexdecomposition.py:docstring
#: openravepy.examples.checkconvexdecomposition:7
#: ../../openravepy/examples/checkvisibility.py:docstring
#: openravepy.examples.checkvisibility:6
#: ../../openravepy/examples/constraintplanning.py:docstring
#: openravepy.examples.constraintplanning:6
#: ../../openravepy/examples/cubeassembly.py:docstring
#: openravepy.examples.cubeassembly:12
#: ../../openravepy/examples/fastgrasping.py:docstring
#: openravepy.examples.fastgrasping:6
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring
#: openravepy.examples.fastgraspingthreaded:6
#: ../../openravepy/examples/graspplanning.py:docstring
#: openravepy.examples.graspplanning:6
#: ../../openravepy/examples/hanoi.py:docstring openravepy.examples.hanoi:6
#: ../../openravepy/examples/inversekinematicspick.py:docstring
#: openravepy.examples.inversekinematicspick:6
#: ../../openravepy/examples/movehandstraight.py:docstring
#: openravepy.examples.movehandstraight:6
#: ../../openravepy/examples/pr2turnlever.py:docstring
#: openravepy.examples.pr2turnlever:6
#: ../../openravepy/examples/qtexampleselector.py:docstring
#: openravepy.examples.qtexampleselector:6
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess:6
#: ../../openravepy/examples/showsensors.py:docstring
#: openravepy.examples.showsensors:7
#: ../../openravepy/examples/simplegrasping.py:docstring
#: openravepy.examples.simplegrasping:6
#: ../../openravepy/examples/simplemanipulation.py:docstring
#: openravepy.examples.simplemanipulation:6
#: ../../openravepy/examples/testphysics.py:docstring
#: openravepy.examples.testphysics:7
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring
#: openravepy.examples.tutorial_grasptransform:7
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring
#: openravepy.examples.tutorial_iksolutions:6
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring
#: openravepy.examples.tutorial_iktranslation:7
#: ../../openravepy/examples/visibilityplanning.py:docstring
#: openravepy.examples.visibilityplanning:6
msgid "Description"
msgstr ""

# 791c07bf28f54d7181cf979502ac9d11
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:35
msgid ""
"Approximates each of the links with a set of convex hulls using John "
"Ratcliff's `convexdecomposition library`_."
msgstr ""

# 08c94e87fe8e4231a91b9a2649be4f38
# 692f6e2c3aa04394a1a2e14f5d9a6275
# 9d54c18ba8e7416fa4f4165225cd686e
# a4384f24846e4a3eb5328aff9babea00
# 11708f7e2de84074b6919b47809cec0b
# ecda573a77bd42fe9b967ec77d2ccd76
# 2a64a791721345c2a6e67e24b6fdcb4b
# 2bdacfceb31347cb9f0568ddbe931f27
# 2f1608a7ef354aea89d21192ff65157e
# de91fdcdb13b42e68f40dab6051b7298
# 2ea38715a1bb47ba8cf34b8d14cf9d53
# ed445276f54948b2856e8b3fc4881d75
# 322bc47cd03c4657a1da8e451632748f
# b6e358625ef4417f8d3be495f230edb4
# 10b67689f03243ea8885d8460ce9dc4a
# ffe65294f90448668ef8b683ca15d8b4
# fe6f0f6d1f144abbaebe6fb0f859acec
# 86f21dfcde7348e8999c85933c6b16e3
# 5696c3506b784da2a50864062dc0e31e
# 676ec05a57cd464aba2396756bd23e32
# 99cc48c3949c464f98bb245ecc3d76f2
# 9c4787d7e1fb402a84c6feea27348bfa
# 785bb6862081401b9c871c191d8eb4f7
# 34495440c22c4a509a33f0cc4fe48690
# 66631203648043cf96844a66f5ae66e6
# 5916fb1336504f1a85ef1422f9c510c9
# 548fed14c1584d648ab33d93d5857a0b
# 518c5c907b88491e8c108edc0a8e3ae9
# cfb2efe02b194a66a7ee426369d302a9
# 89f5ca5d0a934a3088922f241e9fd328
# 033131fdbf9840b6ab77245bd67b82f8
# f595dcd865fb42d098fd43b198cd8f11
# 3aba0f5f4fe5421fbfeb423764bed6f8
# 6f8aec36d8114ebebceef4396fe614c5
# 7962801a4299449cb74690193f42bfbe
# 3e9e5ca6790a4fe9bda773bbece973e2
# c5b4825078de4edda6d9903f25a4ea06
# b256a300a84c4f6faa31b149e4e7c2d5
# a72cf2e3e4c74a71ace580ffa9dbb446
# 976c8a3232f44f42ade0161759c53bfb
# d1e1b87e28fa4196a7d91c1c0f9044ed
# 65810d130331418b8257986052b78859
# 017a6ba297b545a29e8860b3839b333e
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:43
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping:130
#: ../../openravepy/databases/inversekinematics.py:docstring
#: openravepy.databases.inversekinematics:121
#: ../../openravepy/databases/inversereachability.py:docstring
#: openravepy.databases.inversereachability:26
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability:29
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics:21
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel:46 ../../<partial node>:3
msgid "Command-line"
msgstr ""

# 05101b50c1fc4b6591ddcd722bdc5032
# 0a87b587a3834dcf81ef0670a6f5dc29
# 9c28d6eba9b84f5c9596e5269fd51d38
# b57aaae9bf5a4ecfb2c5237b1b24136e
# aea286c946cb470bb36c582f68ccd7f4
# 45e58c48c9ac40cbb60ab169c2cddd59
# 89add897597a418d81768964d1113443
# 4a609e89d61d4800807af1913f58514c
# 07a8c79c6113484fbe5aefc4be3ea954
# 9b5fa45b13e3479cb41bf8a00f90d341
# d2c921c2ed184876a029597cda1490ca
# 1a13e5f6e4aa42ecb492113a4e7dd4f5
# 7501201d81bd4ee69a5da0644a02f0c2
# a241ee41f3d54258a3d5c61d764c7b4a
# 7573498f42fd47f4994aa8b3d275776d
# d94e3b22e62c431aa6cdaaff42c60417
# 7b22a8ff807f4736b83860477bd7a3f3
# e0cc4b43c97748fba1f68e2cec32fb95
# 4ba714c16533425a83627a22107c7305
# 2e3658ec6f0548d1befd2f55ae46872e
# 7ebed2b4c4e841b287c830e2a1d932aa
# 6a62c645f0fa4b689024e86000709475
# b7ad8bbbff764b1aa447c37b017013ed
# 408902fa42d24a37a927ac91d18e1268
# 5c6609c60007458a9635d0cb6284fa16
# 5e6e5d6d40aa4df18b5b1bf09921552d
# 50a743f4ec1f4e60b321901eb0ea1368
# 369b01c9336a4a28b4f76f5e8e6962ea
# ca684d90cd314d45a060c7c7e60aa981
# 91062b18052b4796a7b395b1a00a6e2b
# d0e9001132c34120b1a142767aed4b8f
# 554e39f37d324205819e970d83691a39
# 095752bbfc0e4f2c802bdcad6e332011
# 7235a9ecde0040d9abbf0d91a7c0d924
# 481a4ac52d2d4a77a4a06ad0d6b079f7
# ec02e32191654c6bb6d46597bdd8a1b4
# 749f0e6e9b0146c48b65e54380ebc57b
# 100f1dc56ea14196a847341207e24399
# 15824cf5246c4dc98971c7c097e4ab15
# cef843b6fb77427b8bd23cbe4fc97432
# 159c85dc48a8483ca59a46f475ee5e7d
# 908ef5c067c44b92ae0e6826647374d6
# 5cc618deb3c043d287fb2a2f958d52ed
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition:48
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping:135
#: ../../openravepy/databases/inversekinematics.py:docstring
#: openravepy.databases.inversekinematics:126
#: ../../openravepy/databases/inversereachability.py:docstring
#: openravepy.databases.inversereachability:31
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability:34
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics:42
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel:51 ../../<partial node>:14
msgid "Class Definitions"
msgstr ""

# dc9a8c3503004c118ca0e82ae4e26ea2
# 1a993cd4998747dca1fee0727da8517d
# 9783585e0d5b407ab5f2acb1bd32664e
# 0a7ef08614c041bca2e65a821558e729
# 30f64bca7ef649659c07fbf1d5d0ae9c
# a31add16161843eea74511feb6cab47e
# 516b319dff7241a3837ed1116cf74456
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.databases.DatabaseGenerator`"
msgstr ""

# 8005a683a34842d6a33b4d28f983b628
# 9f164fc0028748c5bf497d8119d68be0
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel:1
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics.LinkStatisticsModel:1
msgid "Computes the convex decomposition of all of the robot's links"
msgstr ""

# 91a560c85c9f4dca8b4e01b2d4fd7dd9
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel.RunFromParser:1
msgid "Executes the ConvexDecompositionModel database generation"
msgstr ""

# 8dde3b3c93d043e3867a7251155e76b2
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel.computeHullPlanes:1
msgid ""
"The computed planes point outside of the mesh. Therefore a point is inside "
"only if the distance to all planes is negative."
msgstr ""

# 3eb0f1e45aeb4146932e83060e766de3
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel.testPointsInside:1
msgid "tests if a point is inside the convex mesh of the robot."
msgstr ""

# 336bf3c1109244f596d399f204aa2762
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel.testPointsInside:3
msgid ""
"Returns an array the same length as points that specifies whether the point "
"is in or not. This method is not meant to be optimized (use C++ for that)."
msgstr ""

# bfdff6cd658b442c959ab04a363c57b0
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.ConvexDecompositionModel.transformHull:1
msgid "hull can be (vertices,indices) or (vertices,indices,planes)"
msgstr ""

# ed670eb7d7ce493ca83b10c2e42c54a1
# d2e6c92c261444d2860eb28a8860e51f
# aac229a93d57490d9584ab8e0e7705df
# 0b31a8dc984945a6aae97239895247c5
# 9fba9f6427364121b8b7b0d3545d6949
# a2060f2282444358a78fd33f219a6604
# be2f0bd8091645f5be9384e4e8373cdb
#: ../../openravepy/databases/convexdecomposition.py:docstring of
#: openravepy.databases.convexdecomposition.run:1
#: ../../openravepy/databases/grasping.py:docstring
#: openravepy.databases.grasping.run:1
#: ../../openravepy/databases/inversekinematics.py:docstring
#: openravepy.databases.inversekinematics.run:1
#: ../../openravepy/databases/inversereachability.py:docstring
#: openravepy.databases.inversereachability.run:1
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability.run:1
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics.run:1
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel.run:1
msgid ""
"Command-line execution of the example. ``args`` specifies a list of the "
"arguments to the script."
msgstr ""

# 49b6ae604a2a436aa9d2be81c9b62617
#: ../../source/openravepy/databases.grasping.rst:2
msgid ":mod:`grasping` Module"
msgstr ""

# 1ea9794c0b71437caaf42e96c503f080
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:1
msgid "Simulate grasping of objects and computing force closure metrics."
msgstr ""

# 2969bd6e0f4b4295b9d68a69d4acbcd1
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:6
msgid "`[source] <../_modules/openravepy/databases/grasping.html>`_"
msgstr ""

# 869db6cb28af4013b92b4e4bab8f755f
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:14
msgid "_databases_grasping_usage:"
msgstr ""

# 8c5ac9ca6cbf4cae9ab943cebc565bc5
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:19
msgid ""
"Dynamically generate/load the grasping set for a robot manipulator and "
"target object:"
msgstr ""

# 390bc388a4d24f6ba1acb0644aeede90
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:29
msgid "To compute at most 10 valid grasps in the current environment do:"
msgstr ""

# 50197c93c35343eab0f9993b761dee57
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:41
msgid "It is also possible to return an iterator to the valid grasps via:"
msgstr ""

# f0745f50ed5f4e6289d19c372534130a
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:51
msgid ""
"OpenRAVE can simulate grasps for any type of robotic hand, evaluate the "
"quality of the grasps, and use those grasps in a more complex grasp planning "
"framework. This tutorial is meant to introduce you to the ``grasper`` plugin "
"and the scripts provided to manage the testing and simulation. At the end, "
"you should be able to create grasp tables and use them effectively in "
"OpenRAVE."
msgstr ""

# d6ec788babeb4512af0008d8324fd0f0
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:56
msgid ""
"A grasp is simulated by giving the end-effector an initial pose and initial "
"joint angles (preshape). Then the end effector moves along a direction "
"(usually along the normal of the palm) until it hits the target object. Once "
"hit, the 'fingers' of the end-effector slowly close around the object until "
"they cannot close further. The contacts between the end-effector and target "
"object are extracted, and force closure is calculated. The :ref:`module-"
"grasper` is responsible for this simulation, the scripts just pass in the "
"correct parameters to it."
msgstr ""

# 051071522b354a689b4e2e3ae4d0f0a0
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:63
msgid ""
"Grasp set creation first tries to uniformly sample the surface of the object "
"to determine where to the approach directions should be. Sampling the actual "
"geometric surface of the object can lead to unwanted results due to possible "
"concavities like the handle of a cup. A simpler approach is to take the "
"bounding box of the object and sample its surface uniformly (see "
"`GraspingModel.computeBoxApproachRays`)."
msgstr ""

# d901dbe64df64c2e9cc1675557eb0e8c
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:72
msgid ""
"Once the surface of the box is sampled, the intersection of the object and a "
"ray originating from each point going inward is taken. The normal of the "
"object's surface from each of these intersection points is taken to be the "
"approaching direction of the end-effector. The red lines in the above image "
"indicate the rays along which the end-effector will approach the cup."
msgstr ""

# 5321052951b54a6ca87418eaec02541a
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:80
msgid ""
"Once the initial pose, preshape, and approach direction are chosen, the "
"grasper planner is called, which queries the contact points of the grasp and "
"analyzes them for force closure."
msgstr ""

# 138365c71549435bb4fadcaecc97262a
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:86
msgid ""
"Render the final configuration of the end-effector closing down on the "
"target object along with the friction cones at each contact point (red "
"transparent cones)."
msgstr ""

# f409d3838aaf481c87bfe1915deca7d0
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:95
msgid "Calling `GraspingModel.generate` generates tables for a ketchup bottle."
msgstr ""

# dc79b864a61e4de197e934030790fa79
# beb1cf3834744ec0b9811940432b4d09
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:104 ../../openravepy/ikfast.py:docstring
#: openravepy.ikfast:24
msgid "Features"
msgstr ""

# c3212e2131934b069e24cda8eeacb3ed
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:106
msgid ""
"Here's a short list of features of the grasper planner and problem "
"interfaces:"
msgstr ""

# 57fdb85d10c8441498eccc82d1ba033a
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:108
msgid ""
"the grasper planner takes care of initializing the robot transform given the "
"grasp parameters. the parameters structure for the now contains: stand off, "
"target body, roll, direction, center, and several flags for controlling "
"internal behavior (definition in in grasper/plugindefs.h)"
msgstr ""

# 004ff88c338c4c7aac620d4682b8a955
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:112
msgid ""
"the grasper problem has two functions: grasp and computedistancemap. grasp "
"just takes care of filling the parameters structure for the planner and "
"returning contact points."
msgstr ""

# 53a9f682ff814347ab15e1e406653991
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:115
msgid ""
"All grasp parameters like roll, direction, and center offset now specified "
"in target body space. The user *never* has to transform them correspondingly "
"anymore (this was causing many headaches before)."
msgstr ""

# 3d4038f772f04fa5ac75676b17ecae6f
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:119
msgid ""
"The grasp coordinate system is defined to be the manipulator's grasp "
"coordinate system (ie, it isn't a link). This allows grasps to define a "
"center of approach. Each grasp also requires an approach direction, which "
"can be specified by the **manipulationdirection** parameter; if none "
"specified, the manipulator's direction is used."
msgstr ""

# 0760b98414b14e38a6712db14b139044
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping:124
msgid ""
"Because the grasper planner reads the gripper links from the manipulator "
"definition, it can now function correctly just by being passed the full "
"robot. Inside the loop, the gripper is separated momentarily to complete the "
"grasping process, the rest of the body is ignored. This allows users to test "
"grasps on a real scene without having to introduce a floating hand into the "
"scene."
msgstr ""

# b0c30ec8ba594903acaad19f7b875380
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel:1
msgid ""
"Holds all functions/data related to a grasp between a robot hand and a target"
msgstr ""

# 8a43aaff40c84497abd4311f73c2416f
# cf80c62fd81b41789f899bc108a750a4
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.GripperVisibility:1
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel.VisibilityModel.GripperVisibility:3
msgid ""
"When 'entered' will hide all the non-gripper links in order to facilitate "
"visiblity of the gripper"
msgstr ""

# 65a55e12a5984026add6be254a8b800d
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.computeValidGrasps:1
msgid ""
"Returns the set of grasps that satisfy conditions like collision-free and "
"reachable."
msgstr ""

# c01b032120704c60be3b3728f747f3b1
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.generate:1
msgid ""
"Generates all the worker items, processes them, and stores the results. For "
"an argument list, take a look at :meth:`.generatepcg`"
msgstr ""

# d257dbfb11c64b68a03c777c678945aa
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.generatepcg:1
msgid "Generates a grasp set by searching space and evaluating contact points."
msgstr ""

# 3bcbd7c932f6429fb1b04a0c43b204d8
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.generatepcg:3
msgid ""
"All grasp parameters have to be in the bodies's coordinate system (ie: "
"approachrays). @param checkgraspfn: If set, then will be used to validate "
"the grasp. If its evaluation returns false, then grasp will not be added to "
"set. Called by checkgraspfn(contacts,finalconfig,grasp,info)"
msgstr ""

# 39f0250c299d4c418675bbf3662ed41d
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.getGlobalApproachDir:1
msgid "returns the global approach direction"
msgstr ""

# c0e65a66ac914af68b6afa8342d89ba1
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.getGlobalGraspTransform:1
msgid ""
"returns the final grasp transform before fingers start closing. If "
"collisionfree is set to True, then will return a grasp that is guaranteed to "
"be not in collision with the target object when at its preshape. This is "
"achieved by by moving the hand back along igraspdir."
msgstr ""

# a410d76eb51a4dea97b0fd16ac6b562b
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.getPreshape:1
msgid "returns the preshape joint values"
msgstr ""

# fcc95c4d560c4a80b5996e57ef7a73eb
# 249e50bc8c1642218147f2c7716d0ad1
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.moveToPreshape:1
#: ../../openravepy/databases/visibilitymodel.py:docstring
#: openravepy.databases.visibilitymodel.VisibilityModel.moveToPreshape:1
msgid ""
"uses a planner to safely move the hand to the preshape and returns the "
"trajectory"
msgstr ""

# b3ad4d63a8f347e29bfbbf4ab9fcda2f
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.runGraspFromTrans:1
msgid ""
"squeeze the fingers to test whether the completed grasp only collides with "
"the target, throws an exception if it fails. Otherwise returns the Grasp "
"parameters. Uses the grasp transformation directly."
msgstr ""

# 9511d334722041d8b7818dfd25c05e70
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.setPreshape:1
msgid "sets the preshape on the robot, assumes environment is locked"
msgstr ""

# 6daa8d0584fd4145acebec7fbb589d12
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.validGraspIterator:1
msgid "Returns an iterator for valid grasps that satisfy certain conditions."
msgstr ""

# d1a4df7f521242d1a76a1ee64258bea4
#: ../../openravepy/databases/grasping.py:docstring of
#: openravepy.databases.grasping.GraspingModel.validGraspIterator:4
msgid "See :meth:`computeValidGrasps` for description of parameters."
msgstr ""

# 99b5f83d259341a187c501f87a41ecdd
#: ../../source/openravepy/databases.inversekinematics.rst:2
msgid ":mod:`inversekinematics` Module"
msgstr ""

# bd70a5ed94b1439db9b426f090068aa8
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:1
msgid "Manages compiled inverse kinematics files for robots using ikfast."
msgstr ""

# 8a2b7824ecd74c9cbba12ab800ab7bcc
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:6
msgid "`[source] <../_modules/openravepy/databases/inversekinematics.html>`_"
msgstr ""

# ac9e8af0f74f4db6907ac17e73f6b991
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:8
msgid "**Running:**"
msgstr ""

# 4d930c69d4394e9ea3a1a489de2980b4
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:17
msgid ""
"First set the active manipulator, and then instantiate the "
"InverseKinematicsModel class specifying the iktype and free indices."
msgstr ""

# db8dad09ddfe4fb6ba507da31ae91981
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:26
msgid ""
"The supported types are defined by `IkParameterizationType` and are "
"propagated throughout the entire OpenRAVE framework. All solve methods take "
"in a `IkParameterization` structure, which handles each IK type's "
"serialization, distances metrics, derivatives, and transformation."
msgstr ""

# 5306bea4a0314146971c45c234c146c0
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:28
msgid "To show the manipulator and IK results do:"
msgstr ""

# b8fec25b0a4b4eac87365743d7c4a010
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:37
msgid "It is also possible to test the IK on a scene:"
msgstr ""

# 88046a477bad4f9e9ebb9463bd4447c1
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:46
msgid ""
"This database generator uses :ref:`ikfast_compiler` to generate optimized "
"and stable analytic inverse kinematics solvers for any robot manipulator. "
"The manipulator's arm joints are used for obtaining the joints to solve for. "
"The user can specify the IK type (Rotation, Translation, Full 6D, Ray 4D, "
"etc), the free joints of the kinematics, and the precision. For example, "
"generating the right arm 6D IK for the PR2 robot where the free joint is the "
"first joint and the free increment is 0.01 radians is:"
msgstr ""

# ec9cf8b2c0e6441db6250f97f8903776
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:57
msgid "Generating the 3d rotation IK for the stage below is:"
msgstr ""

# 6c609c5cc3a549d4bf6e659ba5eb672b
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:67
msgid ""
"Generating the ray inverse kinematics for the 4 degrees of freedom barrett "
"wam is:"
msgstr ""

# 4f4c25480f8a494aae8135a471cbaed7
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:78
msgid "The filename that the code is saved in can be retrieved by"
msgstr ""

# 4b3c63d4c7634b5e8d8d55a67a0078a1
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:85
msgid "Testing"
msgstr ""

# c9ab107885914e6283d24d6e37039c70
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:87
msgid ""
"Every IK solver should be tested with the robot using ``--iktests=XXX``. "
"However, calling ``inversekinematics`` will always re-generate the IK, even "
"if one already exists. In order to just run tests, it is possible to specify "
"the ``--usecached`` option to prevent re-generation and specifically test:"
msgstr ""

# 179fc050a7bc4bb4ba11d1d4f7864cf4
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:96
msgid ""
"This will give the success rate along with information whether the IK gives "
"a wrong results or fails to find a solution."
msgstr ""

# f0dbc36484ad46259705e02fa890a489
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:99
msgid ""
"If there are a lot of free joints in the IK solver, then their "
"discretization can greatly affect whether solutions are found or not. In "
"this case, it is advisable to reduce the discretization threshold by using "
"the ``--freeinc`` option."
msgstr ""

# c0b79ee53b654d548cad279243b532b5
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:104
msgid "Loading from C++"
msgstr ""

# 1a8f5d29e5ac460195be1ff1095badf2
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:106
msgid ""
"It is possible to use the auto-generation process through c++ by loading the "
"IKFast problem and calling LoadIKFastSolver command."
msgstr ""

# 550b91131ce44f5a851978ebecccfd11
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:109
msgid "`ikfastloader.cpp`_ - example for loading IK in C++."
msgstr ""

# 085b5652d92f44458c29a027ee3b4691
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:112
msgid "Reference"
msgstr ""

# 679c37070c3a467db46905e2bab1812a
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:114
msgid ""
":ref:`ikfast-database` - statistics and performance results of ikfast for "
"many robots"
msgstr ""

# a75d2820e7d64b0cb9d2969a8e4c11ea
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics:116
msgid ":ref:`ikfast_compiler` - details on the technology behind IKFast"
msgstr ""

# 77863567656d448096fda4f92924bdd0
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel:1
msgid ""
"Generates analytical inverse-kinematics solutions, compiles them into a "
"shared object/DLL, and sets the robot's iksolver. Only generates the models "
"for the robot's active manipulator. To generate IK models for each "
"manipulator in the robot, mulitple InverseKinematicsModel classes have to be "
"created."
msgstr ""

# dd5f03ca3a9f4aac9519fee72f4ce9e3
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.ArmVisibility:1
msgid ""
"When 'entered' will hide all the non-arm links in order to facilitate "
"visiblity of the gripper"
msgstr ""

# 361de5ac3fc940dbb1a130d322516afa
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.getDefaultFreeIncrements:1
msgid "Returns a list of delta increments appropriate for each free index"
msgstr ""

# 2a2eecd29d184076b82ef9f90a0830b3
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.getDefaultIndices:1
msgid ""
"Returns a default set of free indices if the robot has more joints than "
"required by the IK. In the futrue, this function will contain heuristics in "
"order to select the best indices candidates."
msgstr ""

# cda1550c7b2442fdb920494a3119e395
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.setrobot:1
msgid "Sets the ik solver on the robot."
msgstr ""

# ec1a5957e87f446eb9ffa5c70230f4d6
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.setrobot:3
msgid ""
"freeinc is a list of the delta increments of the freejoint values that can "
"override the default values."
msgstr ""

# b09f07ae208f4714b725ecc4d5fcb0b7
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.InverseKinematicsModel.testik:1
msgid "Tests the iksolver."
msgstr ""

# 84bacdad2b164694b5592fbe2d300bf7
# 176e8e7cd7c84fe693881076bbdbdd9d
# 81a73aae793346da81db7065f80029cb
# 61741d655f824919b6f6abf4a01776c9
#: ../../openravepy/databases/inversekinematics.py:docstring of
#: openravepy.databases.inversekinematics.openravepyCompilerVersion:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.openravepyCompilerVersion:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.openravepyCompilerVersion:1 ../../docstring
#: openravepy.openravepy_int.openravepyCompilerVersion:1
msgid "Returns the compiler version that openravepy_int was compiled with"
msgstr ""

# 0361ba3fbac74229b22ac7e2aee931ec
#: ../../source/openravepy/databases.inversereachability.rst:2
msgid ":mod:`inversereachability` Module"
msgstr ""

# 34aa704630d74ea4b5c184c7f737acdc
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability:1
msgid "Inverse reachability space of manipulators."
msgstr ""

# 10bc2eadbd1840e9a24d89ab0c1ef9be
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability:6
msgid "`[source] <../_modules/openravepy/databases/inversereachability.html>`_"
msgstr ""

# c9b7a8023281442b93e68c9d156e0d24
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability:17
msgid ""
"Clusters the reachability space for a base-placement sampling distribution "
"that can be used to find out where the robot should stand in order to "
"perform a manipulation task."
msgstr ""

# 87ee478e13d1480bb7b1310961ff8f3e
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel:1
msgid ""
"Inverts the reachability and computes probability distributions of the "
"robot's base given an end effector position"
msgstr ""

# d18ee37642c54304ba9f81625dea5c7b
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.classnormalizationconst:1
msgid ""
"normalization const for the equation exp(dot(-0.5/bandwidth**2,r_[arccos(x"
"[0])**2,x[1:]**2]))"
msgstr ""

# 8b31d3377cc64b74974943204d75245a
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.computeAggregateBaseDistribution:1
msgid ""
"Return a function of the distribution of possible positions of the robot "
"such that any grasp from Tgrasps is reachable. Also computes a sampler "
"function that returns a random position of the robot along with the index "
"into Tgrasps"
msgstr ""

# 53f0fb10c9b846c292c7d9d0dba53cf6
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.computeBaseDistribution:1
msgid ""
"Return a function of the distribution of possible positions of the robot "
"such that Tgrasp is reachable. Also returns a sampler function"
msgstr ""

# 49f182a4ff45457c99b4b1e727e9d1a9
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.generate:1
msgid ""
"First transform all end effectors to the identity and get the robot "
"positions, then cluster the robot position modulo in-plane rotation (z-axis) "
"and position (xy), then compute statistics for each cluster."
msgstr ""

# 5b4ab219d91d4fb19bb5e2fecadbb275
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.randomBaseDistributionIterator:1
msgid ""
"randomly sample base positions given the grasps. This is mostly used for "
"comparison"
msgstr ""

# e6cc4e9600e844b89d95bb8aae1e1421
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.sampleBaseDistributionIterator:1
msgid ""
"infinitely samples valid base placements from Tgrasps. Assumes environment "
"is locked. If Nprematuresamples > 0, will sample from the clusters as soon "
"as they are found"
msgstr ""

# 6db065531ba1460dbdf4d4c39e6856ec
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.showEquivalenceClass:1
msgid "Overlays several robots of the same equivalence class"
msgstr ""

# 864606861b7b4f708491663da0f0a7aa
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.InverseReachabilityModel.testEquivalenceClass:1
msgid "tests that configurations in the cluster has IK solutions"
msgstr ""

# 445217f942bf4ec2a7b0f462944e7a8f
# bbb85a84db7441b18920d52b58a88065
# b4a2d16cd0544189ade3a2f65cebfcd1
# 2922b94286e44c2ebae3469c7edf983e
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.matrixFromAxisAngle:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.matrixFromAxisAngle:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.matrixFromAxisAngle:1 ../../docstring
#: openravepy.openravepy_int.matrixFromAxisAngle:1
msgid "matrixFromAxisAngle( (planningutils)axis, (float)angle) -> object"
msgstr ""

# 5204d8e211d7423c9ce1020aa04db1a0
# f0546c7e76b040b8ba3eee310fed7f97
# 1cd08512ce004af180eb7c835874f01b
# 457b64a6ca55496d9f046889df9bc739
# cd8f4f77c5c74af6bbb7a11a802cdb60
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.matrixFromPose:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.matrixFromPose:1
#: ../../openravepy/interfaces/Grasper.py:docstring
#: openravepy.interfaces.Grasper.matrixFromPose:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.matrixFromPose:1
#: ../../docstring openravepy.openravepy_int.matrixFromPose:1
msgid "Converts a 7 element quaterion+translation transform to a 4x4 matrix."
msgstr ""

# 8d1161c953b44712adf023e8416cfb90
# 51f8ac3ada47443fb44b6a89735b2e1e
# 03075703ebc448f286c19ffea7bf0ed6
# 789c6d01234a42838018a8ce89038a02
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.matrixFromQuat:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.matrixFromQuat:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.matrixFromQuat:1
#: ../../docstring openravepy.openravepy_int.matrixFromQuat:1
msgid "Converts a quaternion to a 4x4 affine matrix."
msgstr ""

# c855efe5b92f40e5b1139a48907a5454
# 87c1f3bc17044a9abb4a606d54bd8d44
# 0fca40b5bf994548a6b04e305d09bb98
# c829b65b6330430e9c7e77fb5a71734d
# f8daac8603644b53bcb8aa68408523d7
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.poseFromMatrix:1
#: ../../openravepy/databases/kinematicreachability.py:docstring
#: openravepy.databases.kinematicreachability.poseFromMatrix:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.poseFromMatrix:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.poseFromMatrix:1
#: ../../docstring openravepy.openravepy_int.poseFromMatrix:1
msgid ""
"Converts a 4x4 matrix to a 7 element quaternion+translation representation."
msgstr ""

# 91387e5f67b547ef835a0148a0f744a4
# 5496120ec21f406a9217e2b7cc7f7eb9
# ece67c7a9d1142619a57e0ae33ceb2e2
# 18975b06ff6d4487a5f07db446097ff1
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.poseMult:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.poseMult:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.poseMult:1
#: ../../docstring openravepy.openravepy_int.poseMult:1
msgid "multiplies two poses."
msgstr ""

# f643fa48c9914a82b24a094aeea72ea8
# ac8505685fac475ebabb48ba03046ca2
# b9dc4db30818499f9a92271c9e58e64b
# 11abee73108f4f0599a076ad7eb7777f
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.quatFromAxisAngle:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.quatFromAxisAngle:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.quatFromAxisAngle:1 ../../docstring
#: openravepy.openravepy_int.quatFromAxisAngle:1
msgid "quatFromAxisAngle( (planningutils)axis, (float)angle) -> object"
msgstr ""

# 9c2ce87f03dc462f97e1559fa21a9a7c
# f5faf30b42514df7bd73cb7abba6dffb
# 9d105621f5e04a528b1d7d4ef6e6ccd7
# ea4934a8db754e2ba97e61e99cd9642b
# f8704f8c4ad64c5bbb17f0f794575401
#: ../../openravepy/databases/inversereachability.py:docstring of
#: openravepy.databases.inversereachability.rotationMatrixFromAxisAngle:1
#: ../../openravepy/databases/linkstatistics.py:docstring
#: openravepy.databases.linkstatistics.rotationMatrixFromAxisAngle:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.rotationMatrixFromAxisAngle:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.rotationMatrixFromAxisAngle:1 ../../docstring
#: openravepy.openravepy_int.rotationMatrixFromAxisAngle:1
msgid ""
"rotationMatrixFromAxisAngle( (planningutils)axis, (float)angle) -> object"
msgstr ""

# 34c3b8a177014d069a14257df43248c7
#: ../../source/openravepy/databases.kinematicreachability.rst:2
msgid ":mod:`kinematicreachability` Module"
msgstr ""

# 2fcea68ba2f049298e40725723f7314f
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability:1
msgid "6D kinematic reachability space of a robot's manipulators."
msgstr ""

# e5c36103f3554de38e0ac481dc4567bf
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability:9
msgid ""
"`[source] <../_modules/openravepy/databases/kinematicreachability.html>`_"
msgstr ""

# 62bc793192ea48859fecf6eb29686eea
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability:17
msgid "**Showing the Reachability** (uses mayavi2)"
msgstr ""

# 059edceaa06f4a50ad7c3c1e166bd12d
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability:26
msgid ""
"This is the reachability when counting the total number of configurations "
"possible at each pose."
msgstr ""

# 709f8c7ec8a24508a69e4c8c36bafbf0
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability.ReachabilityModel:1
msgid ""
"Computes the robot manipulator's reachability space (stores it in 6D) and "
"offers several functions to use it effectively in planning."
msgstr ""

# b4f27a56343046c2953e5c62eeb7525e
# 46080331f18a4ac7855c661dbae729ce
# c14c30b2afb343b9bee0a1daff5b94f5
# 704564bffc69445abdc287fb4d2f1fe5
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.metaclass.AutoReloader`"
msgstr ""

# 21864f0b99554a7fa26e384fe6e985f6
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability.ReachabilityModel.QuaternionKDTree:1
msgid "Artificially add more weight to the X,Y,Z translation dimensions"
msgstr ""

# f8669e29fdb8473f93cdd922c1fc9b71
# e0cb1566a63e461ca7d87e7eb94903de
# 3f6551a47a444463b55442dd844e633b
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability.ReachabilityModel.QuaternionKDTree.kFRSearch:1
#: openravepy.databases.kinematicreachability.ReachabilityModel.QuaternionKDTree.kFRSearchArray:1
#: openravepy.databases.kinematicreachability.ReachabilityModel.QuaternionKDTree.kSearch:1
msgid "returns distance squared"
msgstr ""

# 2fc1c29fe25b4b6492f6f008670cc2b9
# 10e746b87aa54a69b7a78d9806c20ac7
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability.ReachabilityModel.generatepcg:1
#: ../../openravepy/databases/__init__.py:docstring
#: openravepy.databases.DatabaseGenerator.generatepcg:1
msgid ""
"Generate producer, consumer, and gatherer functions allowing parallelization"
msgstr ""

# 1f9b5d7cb3c943598b24183fce824f49
# 78706deaf128466f8db498ea7dd3382f
# c56728db7e1e4eeba68576b066abfb38
# 91a5080b349248ae863bfa517069c78d
#: ../../openravepy/databases/kinematicreachability.py:docstring of
#: openravepy.databases.kinematicreachability.rotationMatrixFromQArray:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.rotationMatrixFromQArray:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.rotationMatrixFromQArray:1 ../../docstring
#: openravepy.openravepy_int.rotationMatrixFromQArray:1
msgid "Converts an array of quaternions to a list of 3x3 rotation matrices."
msgstr ""

# d19143f6021545558c2f88bf93107931
#: ../../source/openravepy/databases.linkstatistics.rst:2
msgid ":mod:`linkstatistics` Module"
msgstr ""

# 70475a18ee3c4332bd01a320787ed4f0
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics:1
msgid "Computes statistics on body links like swept volumes."
msgstr ""

# 271506d7eb484e6d974e8933c4d6c903
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics:6
msgid "`[source] <../_modules/openravepy/databases/linkstatistics.html>`_"
msgstr ""

# 7a05a3e2e9f54fa4a3d36d9b0674aaf0
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics:14
msgid "**Showing the Swept Volumes**"
msgstr ""

# 609bb7fc9fdc4a3486c94413dfe422f5
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics:28
msgid ""
"When using link statics, it is possible to set the joints weights and "
"resolutions so that planning is fastest. The **xyzdelta** parameter "
"specifies the smallest object that can be found in the environment, this "
"becomes the new discretization factor when checking collision. Higher values "
"mean faster planning."
msgstr ""

# 9e095cd9808c487bbbdc1a6c9e921e0f
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics.LinkStatisticsModel.ComputeSweptVolume:1
msgid ""
"Compute the swept volume and mesh of volumepoints around rotated around an "
"axis"
msgstr ""

# f37c5b90f23242bd93d1d127aab088b5
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics.LinkStatisticsModel.PrunePointsKDTree:1
msgid ""
"Prunes the poses so that every pose has at most neighsize neighbors within "
"sqrt(thresh2) distance. In order to successfully compute the nearest "
"neighbors, each pose's quaternion is also negated. Input: thresh2 - squared "
"threshold"
msgstr ""

# 22afd681f5a742a99b748ae31f798dc5
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics.LinkStatisticsModel.setRobotResolutions:1
msgid ""
"sets the robot resolution xyzdelta is the maxdistance allowed to be swept."
msgstr ""

# 33a401aa59e94013b9db60f2ea36d9f6
#: ../../openravepy/databases/linkstatistics.py:docstring of
#: openravepy.databases.linkstatistics.LinkStatisticsModel.setRobotWeights:1
msgid ""
"sets the weights for the robot. weightexp is the exponent for the final "
"weights to help reduce the max:min (default is 1/3 which results in 50:1) "
"Weights should be proportional so that equal distances displace the same "
"volume on average."
msgstr ""

# d7502280aabf4dff9bf963ac071d4a4b
#: ../../source/openravepy/databases.visibilitymodel.rst:2
msgid ":mod:`visibilitymodel` Module"
msgstr ""

# 0d46e5b129214ebba3e6bf9ea9a1872f
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:1
msgid "Samples visible locations of a target object and a sensor."
msgstr ""

# 460e513a62c14e469629016bd018a6ce
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:6
msgid "`[source] <../_modules/openravepy/databases/visibilitymodel.html>`_"
msgstr ""

# 58880021810047f69a50a0ce72569312
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:14
msgid "**Showing Visible Locations**"
msgstr ""

# 5f68436094c845dc952d67672ee97bb1
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:23
msgid ""
"Dynamically generate/load the visibility sampler for a manipulator/sensor/"
"target combination:"
msgstr ""

# 4dfc483eb83b4439ab0ee8ea1af916fa
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:36
msgid ""
"As long as a sensor is attached to a robot arm, can be applied to any robot "
"to get immediate visibiliy configuration sampling:"
msgstr ""

# 81e7781be84b4957a3297242023a423c
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel:41
msgid ""
"The visibility database generator uses the :ref:`module-visualfeedback` for "
"the underlying visibility computation. The higher level functions it "
"provides are sampling configurations, computing all valid configurations "
"with the manipulator, and display."
msgstr ""

# 98f4cb5edf264b309ad87405b4bef179
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel.VisibilityModel:1
msgid "Starts a visibility model using a robot, a sensor, and a target"
msgstr ""

# a954641e611442a9a5ba821710ff43eb
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel.VisibilityModel:3
msgid ""
"The minimum needed to be specified is the robot and a sensorname. Supports "
"sensors that do not belong to the current robot in the case that a robot is "
"holding the target with its manipulator. Providing the target allows "
"visibility information to be computed."
msgstr ""

# 1d0c16cee5424477a7a53ef2e699cd6d
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel.VisibilityModel.GripperVisibility:1
msgid "Used to hide links not beloning to gripper."
msgstr ""

# b923e1ad5bb74e01927af8371655283f
#: ../../openravepy/databases/visibilitymodel.py:docstring of
#: openravepy.databases.visibilitymodel.VisibilityModel.SetCameraTransforms:1
msgid "Sets the camera transforms to the visual feedback problem"
msgstr ""

# 14e265c889f448b18df827c08c243a84
#: ../../source/openravepy/examples.calibrationviews.rst:2
msgid ":mod:`calibrationviews` Module"
msgstr ""

# 02d9e81ac5ed439e8e7dd9e1f5c7e020
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:1
msgid "Calibrates a camera attached on a robot by moving it around a pattern."
msgstr ""

# f52725c23ec244e59c5b3c82376e9b59
# c5dccb34976d443cbf562066c8516cc8
# 0cfd1ddca010464b8f6f3dcd27560e37
# 428c18ce2e48407a912ed2a5b6ce9014
# 629126d12a9e4cec8fec7b2a6aae9f56
# 6273d782c09440bdb7e756ef73c185d6
# ce49c8520b2540e1af33d19ec32c60f4
# bea07fbc04d74459ae780f48317a4544
# 45f76ee833b84b07b3451821cb250793
# 5cc702cf652e4b449f163c8e1ad06ad8
# 48f107d8e9f14e07abcb717afea289df
# 3508030e5dd54c3883e1424c2c465c03
# 5f98f135dfb74f44b00f8655e4443225
# 2b389bc65ef74a79b9532ce2f023d644
# d61541805a9545948161db30927f7d76
# e511043124e94f6ba723c81947ba9bd5
# cee95f41e1a44756a0ec61c2f8ada9ab
# 6bd2804984594e37a3fe15ac3ebe2097
# 3e2a9fd281d24e239e1581f7b398409e
# 281ed0d65cb54b96a912d6fe30cb9e59
# 0e069cd660124f68beb8cecf6d100525
# d78ab43050b7459ea94f363e95a45a22
# c3a74ec0e5364778ac57d966b245a52f
# e4c41f25cf384b68926490942aee457e
# 5e9e5738fc2e4c8497f80bac086d7542
# 4b138d5fd5c0439abf41b51983e8bb3c
# 7ea412bf662d4a35ab9960144b15f46e
# a2c86d1c45db4690b03e9c89cfc5899c
# 33d52f2c4d42424ea6caabbd75352311
# 522202c85fb7451ea6083f606e022e15
# 9740e6e068d048468cc22a0246a8feff
# 6733f119928e4ca6936d2fd713a771c9
# 5a1113b87af345a8a03f3f1d2e30d4e6
# 7c16beeaed754b6b909d2ff45c0c748c
# 7b6a7fbc93254902b2c7853ed1e5cd19
# bdca7a8a9a6e4b6c82ac65ac822b28e9
#: ../../<partial node>:5
msgid "**Running the Example**::"
msgstr ""

# 00cd3ba709024ad8a2f0089ab8f7a2f3
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:8
msgid ""
"The pattern is attached to the robot gripper and robot uses moves it to "
"gather data. Uses :mod:`.visibilitymodel` to determine which robot "
"configurations make the pattern fully visible inside the camera view."
msgstr ""

# 17e6880abd9f49e1aa5b7b10ebd13264
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:10
msgid ""
"It is also possible to calibrate an environment camera with this exapmle "
"using:"
msgstr ""

# 984bbcb18924429da6e5ef36e3962d2a
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:20
msgid "Calibration"
msgstr ""

# 4b8a77db3023418b99dc7684ef750076
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:22
msgid ""
"Although this example does not contain calibration code, the frames of "
"reference are the following:"
msgstr ""

# 1db47cc0aa024027844f3ead48ccdfe8
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews:28
msgid ""
"**T_pattern^world** and **T_camera^link** are unknown, while "
"**T_pattern^camera** and **T_link^world** are known."
msgstr ""

# ebfe1fdcf1754d4f8128b7b7b8fba8fd
# 0e3867e5f2bc4570bb7451c9cf799e25
# 021b8c3f81234e4b9833386381aa5418
# 29a981b9585d47d5887da7f3f8259b87
# aa5513001b684b0ab7eec3d19b3dc3a1
# 581012ca9add49e19824b2581136bb2a
# 0e740faddc504d8fa72fa7352a99026c
# f787dc60bea94fe781a947c18ab79417
# b01dda720f044410a0e3953a49b6b6fa
# 8e5df49d9c024137b47f4d2bf97ab822
# d9532380efa344d885088780a91f0af7
# fe40634978024aeb8138ac9271d4d063
# afc69c666f1f4da6a364536e668d8213
# 155162b111fc40ea91f964af93e4f8e2
# e9238c36cde1490199d06da48a0cfa7b
# 9229431573f64cfaa040d2a2226c1dc8
# cfba23fb4cc744179b7e7ffed9bd2429
# 33c442c7c1e14ee0a99e515665e8eb35
# 269a6b7761c441758a3e657d29688349
# 23d927f836df4725a2383e4053348b65
# 80ac8c7d65504086af8de158443b0bbb
# 4cbdb5140191418b8a1eb38170f98c9b
# acff153d9b754e74bcbad90e55818caf
# 54a7f0b7fda54d7694bdab6e1474c1bf
# 8cad5175e6684205b360de7dfda93a0f
# ac129f6e07b346ab94fe80a2d5926578
# 0d9a2f06396749a58280d355427536f3
# 0c9e9681f20345a3ad9de22296f9020a
# eb7ad328ba47423eb6227710ad2fce73
# 5ba5fc47260d4767873fa64a9446be82
# 04c329575e3d4d1da62956d5ce80a9d9
# 296f2b6f02f44d6dbd175ce81e9c53fe
# 1c7cb68203ac432b9688ad7cec4989c5
# 65d41bd58c6742cba14a521c0ad8717f
# 05ee682f818442b4907b770782da6b94
# 6283ea84eee846849b28633895fc366c
#: ../../<partial node>:8
msgid "Main Python Code"
msgstr ""

# 3f24a8c8aeb54bb8bb766accc74c1eca
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews:1
msgid "Starts a calibration sequencer using a robot and a sensor."
msgstr ""

# 1b0daff592244f7d8ed378ae90024b4b
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews:3
msgid ""
"The *minimum needed* to be **specified** is the `robot` and a "
"``sensorname``. Supports camera sensors that do not belong to the current "
"robot, in this case the IK is done assuming the target is grabbed by the "
"active manipulator of the robot Can use the visibility information of the "
"target."
msgstr ""

# 102bac98e7c348a3ad330aeff8115b90
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.computeAndMoveToObservations:1
msgid ""
"Computes several configuration for the robot to move. If usevisibility is "
"True, will use the visibility model of the pattern to gather data. "
"Otherwise, given that the pattern is currently detected in the camera, move "
"the robot around the local neighborhood. This does not rely on the visibiliy "
"information of the pattern and does not create a pattern"
msgstr ""

# e12ad6780388485eb60e9d95532bbda1
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.computelocalposes:1
msgid ""
"Computes robot poses using a cone pointing to the negative z-axis of the "
"camera"
msgstr ""

# 64a7583b46a4431da5d375da7f864e25
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.computevisibilityposes:1
msgid "Computes robot poses using visibility information from the target."
msgstr ""

# a7083fe756d94b75836b712a9bc237a5
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.computevisibilityposes:3
msgid ""
"Sample the transformations of the camera. the camera x and y axes should "
"always be aligned with the  xy axes of the calibration pattern."
msgstr ""

# 5d70751568e74118a13284ab9b692ec4
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.gatherCalibrationData:1
msgid ""
"function to gather calibration data, relies on an outside waitcond function "
"to return information about the calibration pattern"
msgstr ""

# 5e2aa30dba3f4d93bad99c7f895d68d4
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.moveToConfiguration:1
msgid "moves the robot to a configuration"
msgstr ""

# 1e70570901ac4c2ba03b158da49677e4
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.CalibrationViews.moveToObservations:1
msgid "order the poses with respect to distance"
msgstr ""

# de169a4d967949ea9c1338a227584b6c
# 39e3c1f116b648788f9b4cf7d02c09da
# bbbdd7782c984fb8adc5c1ae9ff2fb83
# 7176352b4da741d5bb81f23c0e0b476d
# 9a3b76747a594b50a4db4e20ddcf4541
# c25281c76a6f43818a280dc115f2cbab
# 3051906b4a6747a8b40b1058daa17515
# 6c7190e979df468e879c81b8cdb11ffb
# 9d4f8b01dc974252a23c2b864485618a
# 995d089bf9bc4bc99b22e4f56f74f634
# 44b741154c0642f58141dbb7e7a3c33d
# fa644d49763242d0ab2d36ed802e130d
# 30ad2f40225b4658ab0fcdfbd9806028
# dd4400e5d484425286d554313aaac154
# 7f3f13b414e04c6db1c4f6676ab50613
# edea34826ff245f9b9c8d3ac561ac7c9
# 85c1ab0aa44540238df7adba04220266
# 683f3903f9e943dabcdd89fdb3c51a70
# f5c766f2acfd402585439a29f24927dd
# d9dd736492ed414bb6d2c912a8b46957
# 266a56d652204699b9f5719b95097a8e
# 3c14ddd8d1644731bf58832eb39250a1
# 8a1371d5cbae490cb715b4329f2f8c19
# d2d73c62a3b8481eabd6bede553a3940
# 898c02a121ce416186fd4ae08ad1fcc8
# ac6ed200d1d74b9fad56abef0eb97869
# fd22285759bc4b58bbfa7409906c90f2
# 7a56ecd4c29545ec9f660bf61ed69a33
# 25be5dcacd214c54944e74836628be4a
# 7dfb8578353c413488a88a3c75342475
# 1939ac4b5cf04dda8d239f4d00a5b731
# ebfe93f444314580ace0d27fa0611ad4
# 173c03fb2dd744e68de8a9050b6d732e
# 867876d5fad74f7e97ba406264878389
# fe888d79cdfd4bc99fc97362b6ab0ef3
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.main:1
#: ../../openravepy/examples/checkconvexdecomposition.py:docstring
#: openravepy.examples.checkconvexdecomposition.main:1
#: ../../openravepy/examples/checkvisibility.py:docstring
#: openravepy.examples.checkvisibility.main:1
#: ../../openravepy/examples/collision.py:docstring
#: openravepy.examples.collision.main:1
#: ../../openravepy/examples/collision2.py:docstring
#: openravepy.examples.collision2.main:1
#: ../../openravepy/examples/constraintplanning.py:docstring
#: openravepy.examples.constraintplanning.main:1
#: ../../openravepy/examples/cubeassembly.py:docstring
#: openravepy.examples.cubeassembly.main:1
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring
#: openravepy.examples.dualarmdemo_schunk.main:1
#: ../../openravepy/examples/fastgrasping.py:docstring
#: openravepy.examples.fastgrasping.main:1
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring
#: openravepy.examples.fastgraspingthreaded.main:1
#: ../../openravepy/examples/graspplanning.py:docstring
#: openravepy.examples.graspplanning.main:1
#: ../../openravepy/examples/hanoi.py:docstring
#: openravepy.examples.hanoi.main:1
#: ../../openravepy/examples/inversekinematicspick.py:docstring
#: openravepy.examples.inversekinematicspick.main:1
#: ../../openravepy/examples/movehandstraight.py:docstring
#: openravepy.examples.movehandstraight.main:1
#: ../../openravepy/examples/pr2turnlever.py:docstring
#: openravepy.examples.pr2turnlever.main:1
#: ../../openravepy/examples/qtexampleselector.py:docstring
#: openravepy.examples.qtexampleselector.main:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.main:1
#: ../../openravepy/examples/showsensors.py:docstring
#: openravepy.examples.showsensors.main:1
#: ../../openravepy/examples/simplegrasping.py:docstring
#: openravepy.examples.simplegrasping.main:1
#: ../../openravepy/examples/simplemanipulation.py:docstring
#: openravepy.examples.simplemanipulation.main:1
#: ../../openravepy/examples/simplenavigation.py:docstring
#: openravepy.examples.simplenavigation.main:1
#: ../../openravepy/examples/testphysics.py:docstring
#: openravepy.examples.testphysics.main:1
#: ../../openravepy/examples/testphysics_controller.py:docstring
#: openravepy.examples.testphysics_controller.main:1
#: ../../openravepy/examples/testphysics_diffdrive.py:docstring
#: openravepy.examples.testphysics_diffdrive.main:1
#: ../../openravepy/examples/testviewercallback.py:docstring
#: openravepy.examples.testviewercallback.main:1
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring
#: openravepy.examples.tutorial_grasptransform.main:1
#: ../../openravepy/examples/tutorial_ik5d.py:docstring
#: openravepy.examples.tutorial_ik5d.main:1
#: ../../openravepy/examples/tutorial_iklookat.py:docstring
#: openravepy.examples.tutorial_iklookat.main:1
#: ../../openravepy/examples/tutorial_iklookat_multiple.py:docstring
#: openravepy.examples.tutorial_iklookat_multiple.main:1
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring
#: openravepy.examples.tutorial_iksolutions.main:1
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring
#: openravepy.examples.tutorial_iktranslation.main:1
#: ../../openravepy/examples/tutorial_iktranslation2d.py:docstring
#: openravepy.examples.tutorial_iktranslation2d.main:1
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring
#: openravepy.examples.tutorial_inversereachability.main:1
#: ../../openravepy/examples/tutorial_plotting.py:docstring
#: openravepy.examples.tutorial_plotting.main:1
#: ../../openravepy/examples/visibilityplanning.py:docstring
#: openravepy.examples.visibilityplanning.main:1
msgid "Main example code."
msgstr ""

# eba831c05bb24462812c1a2fe347582a
# 79eabe0c4d94483fb06feb9647058afd
# 1f12e11114964585b682ded133237415
# ff8567dd67d94721a808b99087bb4f81
# ba2e1b95fc204d3ab5d7ae5704507bcc
# 872d2b6b61c443a882cd47c7cb40be7c
# 88b3803fd8944ba7b01b4e6ede72aec5
# 3f2f5dab6ce74ac982a9b707641ef848
# 81dfcdf38c3c46c5a9f5bc16f9cfcf64
# fb6bf4737a9443ed87dd75e774af871b
# 2150cbe7b9b04b8482a4ddf8684faac3
# a0a40f44304a4112953253ba57ab2fc3
# 85d80e234b1d4a5bbbd1ddad87fc0da3
# b6acfe7d93e44135b912cbd55b4c0729
# aff0f3dcd2534b41b024673423c2382c
# 3eb08a4c76f847adb83d8f305649bbbc
# 6f464b1ba0dd4c8b8d904258ca04050d
# 654571582c8f49e1b18a11d4414205dc
# d67a7a9de2c44576bf80df43720d3fa1
# f645013057dc47878515379b8e462207
# cb45b41862eb4ce5a525e24668072842
# 6b9fe07146a140a98b94ca5a0b16191e
# bbbce63954364f5cbe962cf9b4c07051
# c0ad50edbf6945bc9c467ba8dbbdbb7b
# fde67cb999114b1aaf4c0645da354bdc
# 477cb8c203174d0e8dbefa154eaad73e
# 21c97de8cd35438ca9632bf16f5a6c67
# e6d0d4a5537843fa93a2265af97fb481
# 99304f3bdd224cbbaef7d4aadbc1f54d
# e124f34db0c44f27992e3c9542e0d217
# de6ca98e5e0a425195ff4f4efc256093
# d7c7806490734d02b0186f4af79a0e13
# 78f0f7b4584a48a99314683584bcba77
# 22796868021d41d4ac666743b3203ccc
# 646ab5f997244926a62b340413499afd
# 3c71ef5f38c045829dea78f063d396a0
#: ../../openravepy/examples/calibrationviews.py:docstring of
#: openravepy.examples.calibrationviews.run:1
#: ../../openravepy/examples/checkconvexdecomposition.py:docstring
#: openravepy.examples.checkconvexdecomposition.run:1
#: ../../openravepy/examples/checkvisibility.py:docstring
#: openravepy.examples.checkvisibility.run:1
#: ../../openravepy/examples/collision.py:docstring
#: openravepy.examples.collision.run:1
#: ../../openravepy/examples/collision2.py:docstring
#: openravepy.examples.collision2.run:1
#: ../../openravepy/examples/constraintplanning.py:docstring
#: openravepy.examples.constraintplanning.run:1
#: ../../openravepy/examples/cubeassembly.py:docstring
#: openravepy.examples.cubeassembly.run:1
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring
#: openravepy.examples.dualarmdemo_schunk.run:1
#: ../../openravepy/examples/fastgrasping.py:docstring
#: openravepy.examples.fastgrasping.run:1
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring
#: openravepy.examples.fastgraspingthreaded.run:1
#: ../../openravepy/examples/graspplanning.py:docstring
#: openravepy.examples.graspplanning.run:1
#: ../../openravepy/examples/hanoi.py:docstring
#: openravepy.examples.hanoi.run:1
#: ../../openravepy/examples/inversekinematicspick.py:docstring
#: openravepy.examples.inversekinematicspick.run:1
#: ../../openravepy/examples/movehandstraight.py:docstring
#: openravepy.examples.movehandstraight.run:1
#: ../../openravepy/examples/pr2turnlever.py:docstring
#: openravepy.examples.pr2turnlever.run:1
#: ../../openravepy/examples/qtexampleselector.py:docstring
#: openravepy.examples.qtexampleselector.run:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.run:1
#: ../../openravepy/examples/showsensors.py:docstring
#: openravepy.examples.showsensors.run:1
#: ../../openravepy/examples/simplegrasping.py:docstring
#: openravepy.examples.simplegrasping.run:1
#: ../../openravepy/examples/simplemanipulation.py:docstring
#: openravepy.examples.simplemanipulation.run:1
#: ../../openravepy/examples/simplenavigation.py:docstring
#: openravepy.examples.simplenavigation.run:1
#: ../../openravepy/examples/testphysics.py:docstring
#: openravepy.examples.testphysics.run:1
#: ../../openravepy/examples/testphysics_controller.py:docstring
#: openravepy.examples.testphysics_controller.run:1
#: ../../openravepy/examples/testphysics_diffdrive.py:docstring
#: openravepy.examples.testphysics_diffdrive.run:1
#: ../../openravepy/examples/testupdatingbodies.py:docstring
#: openravepy.examples.testupdatingbodies.run:1
#: ../../openravepy/examples/testviewercallback.py:docstring
#: openravepy.examples.testviewercallback.run:1
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring
#: openravepy.examples.tutorial_grasptransform.run:1
#: ../../openravepy/examples/tutorial_ik5d.py:docstring
#: openravepy.examples.tutorial_ik5d.run:1
#: ../../openravepy/examples/tutorial_iklookat.py:docstring
#: openravepy.examples.tutorial_iklookat.run:1
#: ../../openravepy/examples/tutorial_iklookat_multiple.py:docstring
#: openravepy.examples.tutorial_iklookat_multiple.run:1
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring
#: openravepy.examples.tutorial_iksolutions.run:1
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring
#: openravepy.examples.tutorial_iktranslation.run:1
#: ../../openravepy/examples/tutorial_iktranslation2d.py:docstring
#: openravepy.examples.tutorial_iktranslation2d.run:1
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring
#: openravepy.examples.tutorial_inversereachability.run:1
#: ../../openravepy/examples/tutorial_plotting.py:docstring
#: openravepy.examples.tutorial_plotting.run:1
#: ../../openravepy/examples/visibilityplanning.py:docstring
#: openravepy.examples.visibilityplanning.run:1
msgid "Command-line execution of the example."
msgstr ""

# 579a2fe3e99c48c4a88a40f312a2435c
#: ../../source/openravepy/examples.checkconvexdecomposition.rst:2
msgid ":mod:`checkconvexdecomposition` Module"
msgstr ""

# 13eabdead4a5487396c5ac2cba63cf87
#: ../../openravepy/examples/checkconvexdecomposition.py:docstring of
#: openravepy.examples.checkconvexdecomposition:1
msgid ""
"Builds the convex decomposition of the robot and plots all points inside its "
"volume."
msgstr ""

# 684429a2055445c29c6ef22d80bd0e07
#: ../../openravepy/examples/checkconvexdecomposition.py:docstring of
#: openravepy.examples.checkconvexdecomposition:9
msgid ""
"Uses :meth:`.ConvexDecompositionModel.testPointsInside` from :mod:`."
"convexdecomposition`."
msgstr ""

# 3e25506bcde845b3b569e551eaf945b2
#: ../../source/openravepy/examples.checkvisibility.rst:2
msgid ":mod:`checkvisibility` Module"
msgstr ""

# 785aa85eac5f498cb0a9793a69e1f4a6
#: ../../openravepy/examples/checkvisibility.py:docstring of
#: openravepy.examples.checkvisibility:1
msgid "Computes the visibilty extents of a camera and an object."
msgstr ""

# 4d35c1bf1f824375a85297950a0381b0
#: ../../openravepy/examples/checkvisibility.py:docstring of
#: openravepy.examples.checkvisibility:8
msgid ""
"Uses the :mod:`.visibiltymodel` generator and :ref:`module-visualfeedback` "
"interface."
msgstr ""

# cd49d5fde1f34217a3f5c82ab43b0945
#: ../../source/openravepy/examples.collision.rst:2
msgid ":mod:`collision` Module"
msgstr ""

# 471936533bf44ecd921fadbc020705b4
#: ../../openravepy/examples/collision.py:docstring of
#: openravepy.examples.collision:1
msgid "Check collision calls, use collision reports, and do distance queries."
msgstr ""

# d1a1ee23c8f24c52b362b3d0735e77ea
#: ../../openravepy/examples/collision.py:docstring of
#: openravepy.examples.collision.collisioncallback:1
msgid ""
"Whenever a collision or physics detects a collision, this function is called"
msgstr ""

# be53bfe69a284403b0581ea90f814aea
#: ../../source/openravepy/examples.collision2.rst:2
msgid ":mod:`collision2` Module"
msgstr ""

# d5aecaa897a74fa8b7b204dbca9df102
#: ../../openravepy/examples/collision2.py:docstring of
#: openravepy.examples.collision2:1
msgid "Plot collision contacts."
msgstr ""

# 9769490f9e514995905bcc981f49cb04
#: ../../source/openravepy/examples.constraintplanning.rst:2
msgid ":mod:`constraintplanning` Module"
msgstr ""

# a4570d8c3c324e9c971b4e19b8f96a7f
#: ../../openravepy/examples/constraintplanning.py:docstring of
#: openravepy.examples.constraintplanning:1
msgid ""
"Shows how to use simple gradient-based jacobians to constrain the motion of "
"the robot while planning."
msgstr ""

# 39f034a88c4b4442a00757b9aa40f84b
#: ../../openravepy/examples/constraintplanning.py:docstring of
#: openravepy.examples.constraintplanning:8
msgid "A good introduction to these methods can be found in [1]_."
msgstr ""

# d64b1b9b85994fb7b715d0772f70f772
#: ../../openravepy/examples/constraintplanning.py:docstring of
#: openravepy.examples.constraintplanning:10
msgid ""
"A GripperJacobianConstrains class is defined in the rmanipulation plugin. It "
"holds a RetractionConstraint function that takes in a robot configuration, "
"and constrains the manipulator to lie in a certain manifold specified by a "
"target frame and the degrees of freedom to constraint (translation and "
"rotation about axes). If the projection succeeded, it returns true along "
"with the new configuration. Such functions can be set to any planner at any "
"time by filling the PlannerBase::PlannerParameters::_constraintfn field. In "
"the example above, the constraint function is set inside basemanipulation.h "
"in the following way:"
msgstr ""

# 3dd27a5fab3646f5bc1c73edf101fb6f
#: ../../openravepy/examples/constraintplanning.py:docstring of
#: openravepy.examples.constraintplanning:36
msgid ""
"Mike Stilman. Task constrained motion planning in robot joint space. In: "
"Proceedings of the IEEE International Conference on Intelligent Robots and "
"Systems (IROS), 2007."
msgstr ""

# c65cde84eb374616a7dfb379a50e54de
#: ../../source/openravepy/examples.cubeassembly.rst:2
msgid ":mod:`cubeassembly` Module"
msgstr ""

# 43e8f290e3d5449c9b5ea19316dd6f40
#: ../../openravepy/examples/cubeassembly.py:docstring of
#: openravepy.examples.cubeassembly:1
msgid "Assembly of cube from randomly scattered blocks using grasp sets."
msgstr ""

# db06c0251bab43ad94cc72678bad4153
#: ../../openravepy/examples/cubeassembly.py:docstring of
#: openravepy.examples.cubeassembly:5
msgid ""
"There's an ODE bug that can cause the demo to crash, if that happens try "
"with a different collision checker like:"
msgstr ""

# 32598e598bb14864a2f6530fd2c6a420
# d9b76d4dddee4849a732effe8317841f
# 6453bc0b495a4feabddc10079b9ddfa1
# 7f7bc4e458a7481ea997876980232df9
# 5ba1a14b270d416f89748c781d7925d2
# f5d3f673397b4766a024287cfd006b35
# 86dd7e01571e41748bda4cd6f06f73c2
# cd22742827c24124a16e852c758d02f2
#: ../../<autodoc>:1
msgid "Bases: :class:`object`"
msgstr ""

# 18bfa3eab0c145788539d8547498c10f
#: ../../openravepy/examples/cubeassembly.py:docstring of
#: openravepy.examples.cubeassembly.CubeAssembly.SetGoal:1
msgid ""
"sets the goal of all the target bodies and randomizes the obstacles across "
"the plane"
msgstr ""

# f439de9471b741498cc4fb508c97190c
#: ../../source/openravepy/examples.dualarmdemo_schunk.rst:2
msgid ":mod:`dualarmdemo_schunk` Module"
msgstr ""

# 6681d6fa5e7f4217a6c80ca2cd84c1d8
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring of
#: openravepy.examples.dualarmdemo_schunk:1
msgid "Dual arm manipulation example."
msgstr ""

# d04129cee39744e483a14a54e5591541
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring of
#: openravepy.examples.dualarmdemo_schunk.Schunkplanner.MoveArmsToJointPosition:1
msgid "Moves the two arms to the given joint position T"
msgstr ""

# b6d415ec7bc845edb37dfa17dface104
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring of
#: openravepy.examples.dualarmdemo_schunk.Schunkplanner.MoveObjectToPosition:1
msgid ""
"Constrained movement of the arms to new position T while holding the object"
msgstr ""

# f3c9847a207249929594cdf15b6f318e
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring of
#: openravepy.examples.dualarmdemo_schunk.Schunkplanner.moveObject:1
msgid ""
"this plans the trajectory for both the manipulators manipulating the object "
"'name'"
msgstr ""

# efcf08ea6fcc4cb695474d2f6f7dca8c
#: ../../openravepy/examples/dualarmdemo_schunk.py:docstring of
#: openravepy.examples.dualarmdemo_schunk.Schunkplanner.planDualPath:1
msgid "this plans the trajectory for both the manipulators"
msgstr ""

# e5944099988c4a739ad34cd39bbcc048
#: ../../source/openravepy/examples.fastgrasping.rst:2
msgid ":mod:`fastgrasping` Module"
msgstr ""

# fbc3b09add4642f4bf923f84bd1038cb
# a1d097370e134707b40a76ffaa73c7fd
#: ../../openravepy/examples/fastgrasping.py:docstring of
#: openravepy.examples.fastgrasping:1
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring
#: openravepy.examples.fastgraspingthreaded:1
msgid ""
"Finds the first feasible grasp for an object as fast as possible without "
"generating a grasp database."
msgstr ""

# f5862cae8d774359bc2a4962845c6f58
# 3424c6ed2fcf4ab0a26ff2fb1e70df85
# 993e86b9a3f14f30accf810648bdbcc6
#: ../../openravepy/examples/fastgrasping.py:docstring of
#: openravepy.examples.fastgrasping:8
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring
#: openravepy.examples.fastgraspingthreaded:8
#: ../../openravepy/examples/simplegrasping.py:docstring
#: openravepy.examples.simplegrasping:8
msgid ""
"This type of example is suited for object geometries that are dynamically "
"created from sensor data."
msgstr ""

# 520ff4a8f59c4415be9593dc9f15a3fa
# 689d6ae5478b48d4b9f508666e359dca
# b88cae06a15e467d87eca49071eb8a93
# 69b63bdfcb744d0ba92363491ef01df7
# a3033d578b6a4677b2b4294cf1a2514c
# 54e91513a2544b77b6eafacf3a1f7c73
# dab72e4f2ee44b259e48f862583a3082
#: ../../<autodoc>:1
msgid "Bases: :class:`exceptions.Exception`"
msgstr ""

# dad7c17dfb134d529bb6ebfadfa2ac71
#: ../../source/openravepy/examples.fastgraspingthreaded.rst:2
msgid ":mod:`fastgraspingthreaded` Module"
msgstr ""

# f30805e7e1794e9cadb87898a7d45974
# 41b1e86644e74250a59b40c963524b02
#: ../../openravepy/examples/fastgraspingthreaded.py:docstring of
#: openravepy.examples.fastgraspingthreaded.FastGraspingThreaded.callGraspThreaded:1
#: ../../openravepy/interfaces/Grasper.py:docstring
#: openravepy.interfaces.Grasper.Grasper.GraspThreaded:1
msgid "See :ref:`module-grasper-graspthreaded`"
msgstr ""

# e05d12613e9b4c29a452429cb43d99dc
#: ../../source/openravepy/examples.graspplanning.rst:2
msgid ":mod:`graspplanning` Module"
msgstr ""

# 391448d9b0df4eb1b4654c0decf565e7
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:1
msgid ""
"Combine the power of grasp sets and randomized planners to get any robot arm "
"picking up objects from a table and putting them in a dish rack."
msgstr ""

# 46fd266048724e4f937435aa6b0c548d
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:8
msgid ""
"The example uses the powerful TaskManipulation problem interface, which "
"takes advantage of many OpenRAVE features. It performs:"
msgstr ""

# 66c5822e7dfd4c0597b4b9cc2498e30a
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:10
msgid "Pick grasps and validate them with the grasper planner"
msgstr ""

# 3725658f335f4b48a2aa56f0393388e3
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:11
msgid "Move to the appropriate grasp preshape while avoiding obstacles"
msgstr ""

# deeb2ad4f2184ebd9a8b53a9e1a5a383
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:12
msgid ""
"Use an RRT and Jacobian-based gradient descent methods to safely move close "
"to an obstacle"
msgstr ""

# b378603ebbbe4c4aad4263972dbd46ea
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:13
msgid ""
"Use CloseFingers to grasp the object while checking for collisions with "
"other unwanted objects"
msgstr ""

# e64d16856cc4437f9731d94f28deefb6
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:14
msgid "Use body grabbing to grasp the object and move it to its destination"
msgstr ""

# d2c62ca4ee634ff5a60af669eb6a2148
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:15
msgid ""
"Lower the object until collision and then release and move away from it."
msgstr ""

# b415dede7e8b4a56b96732437a478be1
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:17
msgid ""
"The scene is randomized every run in order to show the powerful of the "
"planners."
msgstr ""

# 12b1bbaed15341b09921bb51bbde2821
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:26
msgid "Destinations"
msgstr ""

# ecd27c09bf274d54beefd256180d22e4
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:28
msgid ""
"By default, the grasp planner will choose a grasp that is also valid at a "
"destination point. If running on custom environments, sometimes it is "
"interesting to see if the robot can just grasp the object, without moving it "
"to the destination. To test planning without destinations use:"
msgstr ""

# b965bbe9c4b54275a5b65e4a636757c1
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:37
msgid "5D IK Grasp Planning"
msgstr ""

# e3b4b4fb4dbb4deba6545940adaf0b96
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:39
msgid "It is possible to perform grasp planning with 5D IK."
msgstr ""

# 253078a6e3d547478bd0db53839a5c53
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:42
msgid "Neuronics Katana"
msgstr ""

# c834847abbb94ebf89fee1bb30c48055
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:44
msgid "First create the grasp set with:"
msgstr ""

# 7834db071e744a35b39d4da705f628b8
# 810131be16024611934371b476e32358
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:50 openravepy.examples.graspplanning:68
msgid "Then execute:"
msgstr ""

# c99ef8195a324b59a5f2801429a26829
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:60
msgid "Kuka Youbot"
msgstr ""

# 7791d0338b994e61939b8d45a309ee54
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning:62
msgid "Grasp set generation:"
msgstr ""

# f107945e83534a93aa31519d200365ea
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning.GraspPlanning.graspAndPlaceObject:1
msgid ""
"grasps an object and places it in one of the destinations. If no destination "
"is specified, will just grasp it"
msgstr ""

# 758f36fd63cc40cb8eba8159840e97d4
# 946050f26d374eb9bec747a1373cc02f
# c06f8e47dea240afac8ed7ff4eeb2ac0
# da84f66cd56c46f78e93e7e000249e13
#: ../../openravepy/examples/graspplanning.py:docstring of
#: openravepy.examples.graspplanning.GraspPlanning.waitrobot:1
#: ../../openravepy/examples/hanoi.py:docstring
#: openravepy.examples.hanoi.HanoiPuzzle.waitrobot:1
#: ../../openravepy/examples/pr2turnlever.py:docstring
#: openravepy.examples.pr2turnlever.waitrobot:1
#: ../../openravepy/examples/simplemanipulation.py:docstring
#: openravepy.examples.simplemanipulation.waitrobot:1
msgid "busy wait for robot completion"
msgstr ""

# 0ea8b6fad111499689fa7dc1fdd1c2a2
#: ../../source/openravepy/examples.hanoi.rst:2
msgid ":mod:`hanoi` Module"
msgstr ""

# 3cf274cdc38d4fb09d76dd92aeeedfe8
#: ../../openravepy/examples/hanoi.py:docstring of openravepy.examples.hanoi:1
msgid "Solves the hanoi problem using simple arm planning."
msgstr ""

# 22f34e56a1a542dc9fc7b988ebe93d9b
#: ../../openravepy/examples/hanoi.py:docstring of openravepy.examples.hanoi:8
msgid ""
"This example solves the Hanoi Puzzle using the Puma arm. You can easily "
"change the locations of the pegs, disks, or add obstacles in the environment "
"files **data/hanoi_complex.env.xml** and **data/hanoi.env.xml** to make the "
"problem harder. The default planner used is the rBiRRT, you can easily "
"change it to a different planner by changing the arguments to the "
"BaseManipulation problem."
msgstr ""

# 5599dd105336490ca2c55295911b2602
#: ../../openravepy/examples/hanoi.py:docstring of
#: openravepy.examples.hanoi.HanoiPuzzle.GetGrasp:1
msgid ""
"returns the transform of the grasp given its orientation and the location/"
"size of the disk"
msgstr ""

# e2271119acc54a499231a9de95608cf8
#: ../../openravepy/examples/hanoi.py:docstring of
#: openravepy.examples.hanoi.HanoiPuzzle.MoveToPosition:1
msgid ""
"uses a planner to safely move the hand to the preshape and returns the "
"trajectory."
msgstr ""

# 8bfec3a144c640fd90604ff260790855
#: ../../openravepy/examples/hanoi.py:docstring of
#: openravepy.examples.hanoi.HanoiPuzzle.MoveToPosition:3
msgid "move the robot out of the way so it can complete a preshape"
msgstr ""

# 0f127b70565f4fda89e21e89e085be45
#: ../../openravepy/examples/hanoi.py:docstring of
#: openravepy.examples.hanoi.HanoiPuzzle.hanoimove:1
msgid ""
"Moves the arm and manipulator to grasp a peg and place it on a different peg"
msgstr ""

# 72364565462c4e3a8e03072777a95f5c
#: ../../source/openravepy/examples.inversekinematicspick.rst:2
msgid ":mod:`inversekinematicspick` Module"
msgstr ""

# 4e2888e9397e4e7883b50cbb2475405f
#: ../../openravepy/examples/inversekinematicspick.py:docstring of
#: openravepy.examples.inversekinematicspick:1
msgid ""
"Creates an object whose transform is used to solve IK solutions for each "
"robot manipulator."
msgstr ""

# 828e315b707444e280576a44f378143a
#: ../../openravepy/examples/inversekinematicspick.py:docstring of
#: openravepy.examples.inversekinematicspick:8
msgid ""
"Will create a picker for each manipulator in each robot. Can change the "
"scene with:"
msgstr ""

# 7d7260da9f5a4fb2b7c75bd1a6ddca2b
#: ../../openravepy/examples/inversekinematicspick.py:docstring of
#: openravepy.examples.inversekinematicspick:14
msgid "Can also change the inverse kinematics type to use by:"
msgstr ""

# 885c03a0c54347c9822243101b45b78a
# 2879b18cf0b24f1eb032f72f117850ac
# b6750b6979944c358ef11b6a1e137f97
# f744c6a8f1244ab6a229e3b428a15d02
# 9f1bf566d82748869109639a86f6dbbf
# 54d33a07a41f4920ac98d2ffe3531298
# b3e4b8d001db415dafd31624c34be82d
#: ../../openravepy/examples/inversekinematicspick.py:docstring of
#: openravepy.examples.inversekinematicspick.raveLogInfo:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.RaveLogInfo:1
#: openravepy.examples.qtserverprocess.raveLogInfo:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogInfo:1
#: openravepy.__init__.raveLogInfo:1 ../../docstring
#: openravepy.openravepy_int.RaveLogInfo:1
#: openravepy.openravepy_int.raveLogInfo:1
msgid "Send an info log to the openrave system"
msgstr ""

# f5e3c5b2d01a485db2ea4b594d5c7849
# 46452a6aa720437186e57599dc022716
# 95ed8a0b74c44697aa9a7804a9d66785
# 93027818fd5b47acb616ec8c0457a49c
# 754ec4f83ed64325a18f049242576110
# a7551c3856d74d3c82cc86637c6cca84
# fade6d2f714244eda4ce31f8db809140
#: ../../openravepy/examples/inversekinematicspick.py:docstring of
#: openravepy.examples.inversekinematicspick.raveLogWarn:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.RaveLogWarn:1
#: openravepy.examples.qtserverprocess.raveLogWarn:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogWarn:1
#: openravepy.__init__.raveLogWarn:1 ../../docstring
#: openravepy.openravepy_int.RaveLogWarn:1
#: openravepy.openravepy_int.raveLogWarn:1
msgid "Send a warn log to the openrave system"
msgstr ""

# 7f9e5f3ec2454a1db0193415f2726433
#: ../../source/openravepy/examples.movehandstraight.rst:2
msgid ":mod:`movehandstraight` Module"
msgstr ""

# 5b37ae508c424f0a9a9cfa8cb542a5ba
#: ../../openravepy/examples/movehandstraight.py:docstring of
#: openravepy.examples.movehandstraight:1
msgid "Tests moving the end effctor of the manipulator in straight paths."
msgstr ""

# bfd6464789d5444f977f85faa9ff1fcb
#: ../../openravepy/examples/movehandstraight.py:docstring of
#: openravepy.examples.movehandstraight:8
msgid ""
"Shows how to use the MoveHandStraight basemanipulation command. The example "
"picks a random trajectory of the end effector and tests if this trajectory "
"is feasible to achieve in the robot."
msgstr ""

# 2a09dc907b9d4edaae681340011d2408
#: ../../source/openravepy/examples.pr2turnlever.rst:2
msgid ":mod:`pr2turnlever` Module"
msgstr ""

# 8810e7eae9dc4850accc34d6909c264c
#: ../../openravepy/examples/pr2turnlever.py:docstring of
#: openravepy.examples.pr2turnlever:1
msgid ""
"Shows how to set a workspace trajectory for the hand and have a robot plan "
"it."
msgstr ""

# 61a2046a0782433a9f2615968ebedbf0
#: ../../openravepy/examples/pr2turnlever.py:docstring of
#: openravepy.examples.pr2turnlever:8
msgid ""
"Shows how to instantiate a planner in python and pass in a workspace "
"trajectory."
msgstr ""

# 7b9d7b7f09c9473a9089dee927db8b30
#: ../../source/openravepy/examples.qtexampleselector.rst:2
msgid ":mod:`qtexampleselector` Module"
msgstr ""

# 7ecbab324e614c71a1fa5d21cc0481f6
#: ../../openravepy/examples/qtexampleselector.py:docstring of
#: openravepy.examples.qtexampleselector:1
msgid "Control and run the openrave python examples with a pyqt gui."
msgstr ""

# a8c3eff8a30f4abd871b19f5d4293ec4
#: ../../openravepy/examples/qtexampleselector.py:docstring of
#: openravepy.examples.qtexampleselector:8
msgid ""
"This example shows how to run a qt-gui in python and control an openrave "
"python script including viewer and terminal input. Therefore the openravepy."
"examples dictionary is used to provide all available openravepy examples to "
"the qt-gui. To abort an example just restart the OpenRaveServer. If you want "
"to start an example with some arguments just insert them in the \"Arguments "
"for Example\" box with space seperation."
msgstr ""

# a4d0c4dda4e9490aa9c2179fa7850216
# 3de21bbaf2d7433d9d28baba764ddc82
#: ../../<autodoc>:1
msgid "Bases: :class:`PyQt4.QtCore.QThread`"
msgstr ""

# a83deb2d6f034b298800ccf139b7d40d
# 7373f17a162a41c7981d1d9d09a5441d
#: ../../<autodoc>:1
msgid "Bases: :class:`threading.Thread`"
msgstr ""

# a1d953c8610648119e5723c266a3465f
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`PyQt4.QtGui.QMainWindow`, :class:`openravepy.examples."
"qtexampleselector.Ui_MainWindow`"
msgstr ""

# 5b80bf567d2e41f3b4b4c850c7b3af12
# 556bad489591427dac4dbe923f4d4fff
# ea56006ed58b467885c30a1b464c8460
#: ../../openravepy/examples/qtexampleselector.py:docstring of
#: openravepy.examples.qtexampleselector.OpenRaveServer:1
#: openravepy.examples.qtexampleselector.Server:1
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.Server:1
msgid "Control server to run the benchmark in its own process."
msgstr ""

# aed39e46ed054d528c9c17a8c459d2d3
# 55ff41b7d5904a4599a26407bf9d8b8b
# e16d6ffbcf7e4c7e917000b67a89ecad
#: ../../openravepy/examples/qtexampleselector.py:docstring of
#: openravepy.examples.qtexampleselector.OpenRaveServer:3
#: openravepy.examples.qtexampleselector.Server:3
#: ../../openravepy/examples/qtserverprocess.py:docstring
#: openravepy.examples.qtserverprocess.Server:3
msgid ""
"Setup the shared memory data structure model and initialize the control "
"parts."
msgstr ""

# df8f1a10d7924feebe3e7c2caef6d6b1
#: ../../source/openravepy/examples.qtserverprocess.rst:2
msgid ":mod:`qtserverprocess` Module"
msgstr ""

# 1dc4800113944446aa280f8b68bdd47e
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess:1
msgid ""
"Pyqt example to demonstrate how openrave elements can be controlled by a qt-"
"gui."
msgstr ""

# 2f478f36685a4b83a007d5e706b4ba08
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess:8
msgid ""
"This example shows how a qt-gui can control openrave functionality. If an "
"environment with a robot is loaded, a random pose is generated for which a "
"trajectory is planned. This trajectory can be replayed using the qt-gui."
msgstr ""

# 0f40c762d51f4f768c7cd2f1b4c94032
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`PyQt4.QtGui.QMainWindow`, :class:`openravepy.examples."
"qtserverprocess.Ui_MainWindow`"
msgstr ""

# ae76293ae26c43bc98acd691ed40d223
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.OpenRaveServer:1
msgid "classdocs"
msgstr ""

# 0464e678bb3a4bc9ac241665e477c52a
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.OpenRaveServer:3
msgid "Constructor"
msgstr ""

# fed2fa82e3e94d3585179a83f6b87ab4
# b55cbe648dd14faca42531dbefda33ec
# 899b8bc2e6a44de5aa908e09ad5bca88
# 99eb4e271a654114bfbeccc0d9aec123
# 8dccbbd8468e4067b31204e358851190
# a60ccfd6a1e141609424a05513f9ae8d
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.RaveLog:1
#: openravepy.examples.qtserverprocess.raveLog:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLog:1
#: openravepy.__init__.raveLog:1 ../../docstring
#: openravepy.openravepy_int.RaveLog:1 openravepy.openravepy_int.raveLog:1
msgid "Send a log to the openrave system with excplicit level"
msgstr ""

# a1d82433f3674a2fbc7063cb29a82d8d
# 74617e5c50ac434dae14d5afc39a7d12
# 94c5e20a665e4e9bb75312f4e1d3f9c6
# 9832a6f1f72843e5a0ecbda1c159e19c
# d365fea667314a93a4ed2d7fc5777e11
# 2ed3455deda54ff88e8fae2c28d76f0f
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.RaveLogDebug:1
#: openravepy.examples.qtserverprocess.raveLogDebug:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogDebug:1
#: openravepy.__init__.raveLogDebug:1 ../../docstring
#: openravepy.openravepy_int.RaveLogDebug:1
#: openravepy.openravepy_int.raveLogDebug:1
msgid "Send a debug log to the openrave system"
msgstr ""

# 7f20eefbdd394c28a2bad4d48e101c43
# 3c4d3af6a86a474680b727734a8d9e32
# 6e38b69584be4255a204ba420e87cab3
# 7c5afa62f03d4f11b6db9126b4c6a818
# 419912d7edd64607bb01dc57c5bdcc7c
# fc43a6869bba42f997b1169227643d27
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.RaveLogError:1
#: openravepy.examples.qtserverprocess.raveLogError:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogError:1
#: openravepy.__init__.raveLogError:1 ../../docstring
#: openravepy.openravepy_int.RaveLogError:1
#: openravepy.openravepy_int.raveLogError:1
msgid "Send an error log to the openrave system"
msgstr ""

# d511f9df36774f8580d508819e671a2c
# bfad94c22c054c15b11f26202a14a368
# 507e810d444b48499e3fb915bd04a822
# 44a810405a614ba8934b7f2dfe104e70
# 14f1a57cebf64deba3192fff6c64725a
# feb2e77156b943b0b54e7ba1610f5f86
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.RaveLogFatal:1
#: openravepy.examples.qtserverprocess.raveLogFatal:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogFatal:1
#: openravepy.__init__.raveLogFatal:1 ../../docstring
#: openravepy.openravepy_int.RaveLogFatal:1
#: openravepy.openravepy_int.raveLogFatal:1
msgid "Send a fatal log to the openrave system"
msgstr ""

# 96f1f815a14f4e37a5ed8bda819cf389
# 12ea357f4ad445e2a107b2dadbc03796
# b621ba9137954a66b884bccb15cdcc32
# 4dc092bf84b641799ab0a42abb469dad
# 91474fcdf0b94f7d9436725b5b93145b
# 2f1240c2d5134b36a1d1308d1273ce8b
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.RaveLogVerbose:1
#: openravepy.examples.qtserverprocess.raveLogVerbose:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.RaveLogVerbose:1
#: openravepy.__init__.raveLogVerbose:1 ../../docstring
#: openravepy.openravepy_int.RaveLogVerbose:1
#: openravepy.openravepy_int.raveLogVerbose:1
msgid "Send a verbose log to the openrave system"
msgstr ""

# 2fefd1742e2449769b55489490f226f1
# ef068bf3598d4c029ce11d37b3cee19a
# 5b6819002b83447b8e3ac9567bc59eec
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.invertPoses:1
#: ../../openravepy/__init__.py:docstring openravepy.__init__.invertPoses:1
#: ../../docstring openravepy.openravepy_int.invertPoses:1
msgid ""
"Inverts a Nx7 array of poses where first 4 columns are the quaternion and "
"last 3 are the translation components."
msgstr ""

# 43cbfbe375e346a196bfea4b1d793d43
# 776c3a534f1d4600b5a705a067098454
# 7d0e94867ba2412cb96a62ba3246b82b
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.matrixFromPoses:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.matrixFromPoses:1 ../../docstring
#: openravepy.openravepy_int.matrixFromPoses:1
msgid "Converts a Nx7 element quaterion+translation array to a 4x4 matrices."
msgstr ""

# 5921fb3254b6434689a51db96d1a2609
# 704979f38d0a4261afa08752e29f5529
# ed94078298074d42a7f2dd8b9cb95211
# 979b5505aebd4adf8083bccfbcfadcc2
# 499a344fc1814718b73b261079e9798c
# 4a6c803efaf744e8a8170b08103e1691
# ac463d9356034ba9ba8d24a2d4ebaad7
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.matrixSerialization:1
#: ../../openravepy/interfaces/BaseManipulation.py:docstring
#: openravepy.interfaces.BaseManipulation.matrixSerialization:1
#: ../../openravepy/interfaces/Grasper.py:docstring
#: openravepy.interfaces.Grasper.matrixSerialization:1
#: ../../openravepy/interfaces/TaskManipulation.py:docstring
#: openravepy.interfaces.TaskManipulation.matrixSerialization:1
#: ../../openravepy/interfaces/VisualFeedback.py:docstring
#: openravepy.interfaces.VisualFeedback.matrixSerialization:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.matrixSerialization:1 ../../docstring
#: openravepy.openravepy_int.matrixSerialization:1
msgid "Serializes a transformation into a string representing a 3x4 matrix."
msgstr ""

# aac1ba020fde492a8bb305adcba0dcad
# 9cd050298d7349a789f6a6eac9b98e28
# 320de55034634b2185082cb5630efc15
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.poseFromMatrices:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.poseFromMatrices:1 ../../docstring
#: openravepy.openravepy_int.poseFromMatrices:1
msgid ""
"Converts an array/list of 4x4 matrices to a Nx7 array where each row is "
"quaternion+translation representation."
msgstr ""

# 1139030d115d409f84ea07f2237481bf
# 0272b792ebbe4c42971adf0b34f01e55
# 883845a159a1443eba614042c3f3e00e
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.poseSerialization:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.poseSerialization:1 ../../docstring
#: openravepy.openravepy_int.poseSerialization:1
msgid ""
"Serializes a transformation into a string representing a quaternion with "
"translation."
msgstr ""

# bac38b2ad5e34803babc495db6c9370c
# d97396f5e9994ecfb808d29112935aee
# 40fb351180a945cf98e7d843f5eb0963
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.poseTransformPoints:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.poseTransformPoints:1 ../../docstring
#: openravepy.openravepy_int.poseTransformPoints:1
msgid "left-transforms a set of points by a pose transformation."
msgstr ""

# bfe39d1e50014f7b92749a4616862321
# 1ef0893adba04568b0e57f8c8607a7b9
# 764a9c87162a47d2b9546e75a420beb0
#: ../../openravepy/examples/qtserverprocess.py:docstring of
#: openravepy.examples.qtserverprocess.transformLookat:1
#: ../../openravepy/__init__.py:docstring
#: openravepy.__init__.transformLookat:1 ../../docstring
#: openravepy.openravepy_int.transformLookat:1
msgid ""
"Returns a camera matrix that looks along a ray with a desired up vector."
msgstr ""

# 6c3fca92d0ba42e2aaf351f3a2d1f9b6
#: ../../source/openravepy/examples.showsensors.rst:2
msgid ":mod:`showsensors` Module"
msgstr ""

# cbee235cf9614600b69333a3ed88a1ac
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:1
msgid "Opens a GUI window showing the sensor data of a scene."
msgstr ""

# 4c473147d3324569b99041cd17d61819
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:9
msgid ""
"See `Sensor Concepts`_ for detailed infromation on sensors. When requesting "
"data from the sensor right after it is powered on, the sensor might not "
"return valid data. Therefore have to make sure the data is good by checking "
"that the time stamps changed."
msgstr ""

# 13efde8cb52648a188e734a67d44a2b3
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:12
msgid "Camera"
msgstr ""

# d9dced4052f04e9b9bd03f117633414c
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:15
msgid ""
"The :ref:`sensor-basecamera` interface has a simple implementation of a "
"pinhole camera. This example shows a robot with a camera attached to its "
"wrist. The example opens ``data/testwamcamera.env.xml`` and queries image "
"data from the sensor as fast as possible. The image will change in real-time "
"as the robot is moved around the scene. The wireframe frustum rendered next "
"to the robot shows the camera's field of view."
msgstr ""

# 665c9eeeabb543a39cb91337f3ab4d7a
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:24
msgid ""
"The OpenRAVE XML required to attach a camera to the robot similar to the "
"example above is:"
msgstr ""

# e00bc4738a1b4b57b2cf64403a3c9365
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:44
msgid "Lasers"
msgstr ""

# 4670b97711454988b6d90fea2c35fee2
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:46
msgid ""
"The :ref:`sensor-baselaser2d` interface has a simple implementation of ray-"
"casting laser sensors."
msgstr ""

# 90d70feba5ba4a589db3ddbee5387c56
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:51
msgid ""
"The following OpenRAVE XML attaches a simple 2D laser to the **wam1** link "
"of the robot:"
msgstr ""

# 5079f4fce4a14d2293283672e79861d3
#: ../../openravepy/examples/showsensors.py:docstring of
#: openravepy.examples.showsensors:70
msgid "To OpenRAVE XML to attach a flash LIDAR sensor is:"
msgstr ""

# 43d021ec102c4f49b024aaba0ec865ca
#: ../../source/openravepy/examples.simplegrasping.rst:2
msgid ":mod:`simplegrasping` Module"
msgstr ""

# 99de8e61c016486e8e7bf77b5769589a
#: ../../openravepy/examples/simplegrasping.py:docstring of
#: openravepy.examples.simplegrasping:1
msgid ""
"Shows how to use the grasping.GraspingModel to compute valid grasps for "
"manipulation."
msgstr ""

# 2b441a456a7c4b02b53be144deec32de
#: ../../source/openravepy/examples.simplemanipulation.rst:2
msgid ":mod:`simplemanipulation` Module"
msgstr ""

# 106af591a0d041a68d305ed4c880db5a
#: ../../openravepy/examples/simplemanipulation.py:docstring of
#: openravepy.examples.simplemanipulation:1
msgid ""
"Explicitly specify goals to get a simple navigation and manipulation demo."
msgstr ""

# 9bb296fc4cd348a6af0a5a427326a8f7
#: ../../openravepy/examples/simplemanipulation.py:docstring of
#: openravepy.examples.simplemanipulation:8
msgid ""
"This example shows how to string in a navigation and manipulation planner to "
"achieve a simple goto -> grab -> move task."
msgstr ""

# 9ba7dfab1ece426fad8ec1fac9b66855
#: ../../source/openravepy/examples.simplenavigation.rst:2
msgid ":mod:`simplenavigation` Module"
msgstr ""

# b3b9d07f3165473ba18cda8221cb605e
#: ../../openravepy/examples/simplenavigation.py:docstring of
#: openravepy.examples.simplenavigation:1
msgid ""
"Shows how to use RRTs for navigation planning by setting affine degrees of "
"freedom."
msgstr ""

# 624f5de48683498dbab9577043652d53
#: ../../source/openravepy/examples.testphysics.rst:2
msgid ":mod:`testphysics` Module"
msgstr ""

# 90a3d2b242594533aec782dc8e5db143
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:1
msgid "Shows how to enable physics."
msgstr ""

# fd7099a334304d73b5aa42895795914e
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:9
msgid ""
"When simulations are turned on, an internal timer starts and the "
"SimulationStep functions of all classes are called. Note that simulations "
"extend beyond physics. That's why there's the distinction between simulation "
"and physics and both are set separately. To start the internal simulation "
"with a timestep of 0.001 seconds do"
msgstr ""

# 703cd9eb157c4b1c8f109c3c8481107e
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:16
msgid "To stop it do"
msgstr ""

# 47378a5f2e99449c93332052559f28a0
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:22
msgid ""
"In a plugin, every state is accessible directly through memory. In scripting "
"(Octave/Matlab), there's a thread safe loop that serializes information to "
"the socket. KinBody/Robot information can be accessed from any thread as "
"long as EvironmentBase::LockPhysics is called. In a SimulationStep call, "
"this is not necessary as OpenRAVE locks physics before calling it."
msgstr ""

# 805c0fd1478c49f9b750e0fbc4d4b00d
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:24
msgid "To set the physics engine to ODE, use"
msgstr ""

# bbed2e0cad234b9d8ec533cf32d6c64d
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:30
msgid "octave:"
msgstr ""

# 9ebab08e129c4f5fba594bc503177643
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:32
msgid "orEnvSetOptions('physics ODE');"
msgstr ""

# 6cb9716ab18b4ea0b136fe6a8e5bfd78
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:34
msgid "To set gravity:"
msgstr ""

# ae55f6f639284706b4305acaf7ff1b97
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:40
msgid ""
"Make sure that whatever object you don't want moving (like floors) are "
"declared static. Setting Properites through XML Files"
msgstr ""

# 2b981b1983814d5b8a12be89af65f568
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:42
msgid ""
"It is possible to create and setup a physics engine in the <environment> tag "
"in the XML file description. The ode physics engine uses a custom XML reader "
"to define a special odeproperties tag that can be used to specify friction, "
"gravity, etc. For example:"
msgstr ""

# 75f270e957174de19e1d1651e289a00e
#: ../../openravepy/examples/testphysics.py:docstring of
#: openravepy.examples.testphysics:57
msgid ""
"Take a look at the **share/openrave/data/testphysics.env.xml** for a working "
"example."
msgstr ""

# 9ce81365e6d94c6c92db09c9bcf4e5b1
#: ../../source/openravepy/examples.testphysics_controller.rst:2
msgid ":mod:`testphysics_controller` Module"
msgstr ""

# 4b0fe619635b458bacbbff201364c3ba
#: ../../openravepy/examples/testphysics_controller.py:docstring of
#: openravepy.examples.testphysics_controller:1
msgid "Shows velocity control with ode controller."
msgstr ""

# fe13a15d2a904b06b431f40efeebb5f8
#: ../../source/openravepy/examples.testphysics_diffdrive.rst:2
msgid ":mod:`testphysics_diffdrive` Module"
msgstr ""

# 23308154854f4781a9a361bd1a113db7
#: ../../openravepy/examples/testphysics_diffdrive.py:docstring of
#: openravepy.examples.testphysics_diffdrive:1
msgid "Shows how to enable differential drive with physics."
msgstr ""

# 3a23e9c2357f439b8fc605ef9fc39c5a
#: ../../source/openravepy/examples.testupdatingbodies.rst:2
msgid ":mod:`testupdatingbodies` Module"
msgstr ""

# 3773135c59b64984ad3a4a94a5b4ea6e
#: ../../openravepy/examples/testupdatingbodies.py:docstring of
#: openravepy.examples.testupdatingbodies:1
msgid ""
"Manually call the simulation loop to update the bodies while environment is "
"locked."
msgstr ""

# 05cc83bf821a472da04133ce756f58c0
#: ../../source/openravepy/examples.testviewercallback.rst:2
msgid ":mod:`testviewercallback` Module"
msgstr ""

# 747c97a11e8c4821b4bec32f0cb89db7
#: ../../openravepy/examples/testviewercallback.py:docstring of
#: openravepy.examples.testviewercallback:1
msgid "Shows how to setup a callback for mouse clicks on the viewer."
msgstr ""

# a171cdc31c0343afb9ccdccb3de8f976
#: ../../source/openravepy/examples.tutorial_grasptransform.rst:2
msgid ":mod:`tutorial_grasptransform` Module"
msgstr ""

# ca5ea7217fd74bd985c6db3745d8dd7e
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:1
msgid ""
"This tutorial shows how to find the transform that moves the hand to the "
"target."
msgstr ""

# 7753c169f55c4c0cbea168b0d1697c45
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:10
msgid "Initialize the environment"
msgstr ""

# 10348ba12c194d0b851a8984b5d9daef
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:19
msgid "Load the robot and object"
msgstr ""

# 3f8ec693f9dd4e2d94465257034d6d70
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:29
msgid "Move the object"
msgstr ""

# 9157f2108dc946ddaa426c8a46c7d14e
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:41
msgid "Open arms, raise torso, open gripper"
msgstr ""

# 277afefc8c92436ea1a634c6d76411e8
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:54
msgid "Doing transform"
msgstr ""

# bd81ef47014c441ea374860c8228eb82
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:56
msgid "Given:"
msgstr ""

# d24dd073de29438a8a6aa0d0906a34c9
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:63
msgid "Want:"
msgstr ""

# 3f96be4eb81e41c9ac01f9fcd0a95fed
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:69
msgid "Solution:"
msgstr ""

# 0bbb6494c2014de89f4f287fdf8ff8ac
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:99
msgid "Related Functions"
msgstr ""

# 94bdab56b3544636bfe070a265c00d7f
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform:101
msgid ""
"`Environment.ReadRobotXMLFile` , `Environment.Add` , `Environment."
"ReadKinBodyXMLFile` , `Environment.Add` ,  `KinBody.GetTransform` , `KinBody."
"SetTransform` ,  `Robot.GetActiveDOFValues` , `Robot.SetActiveDOFValues` , "
"`Robot.GetTransform` , `Robot.SetTransform` , `Robot.GetActiveManipulator`, "
"`Robot.Manipulator.GetTransform`"
msgstr ""

# 2f655eba702145e3a8677d0858f3d8da
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform.GraspTransform.drawTransform:1
msgid "draws a set of arrows around a coordinate system"
msgstr ""

# 522703248f37493d8fcca8171cc3c2d8
#: ../../openravepy/examples/tutorial_grasptransform.py:docstring of
#: openravepy.examples.tutorial_grasptransform.GraspTransform.showGrasp:1
msgid ""
"visualizes the robot configuration when robot.GetActiveManipulator()."
"GetTransform()==Tgrasp"
msgstr ""

# d79decf18eff4c9bbfd740c4a0311202
#: ../../source/openravepy/examples.tutorial_ik5d.rst:2
msgid ":mod:`tutorial_ik5d` Module"
msgstr ""

# 73953d3310a3487389588c8579589c16
#: ../../openravepy/examples/tutorial_ik5d.py:docstring of
#: openravepy.examples.tutorial_ik5d:1
msgid ""
"Shows how to use 5D translation+direction inverse kinematics for an arm with "
">= 5 joints."
msgstr ""

# f24329806b8c4c21a259f833318857a1
#: ../../source/openravepy/examples.tutorial_iklookat.rst:2
msgid ":mod:`tutorial_iklookat` Module"
msgstr ""

# 0483001f4380477fbf9059ca1c9097d9
#: ../../openravepy/examples/tutorial_iklookat.py:docstring of
#: openravepy.examples.tutorial_iklookat:1
msgid ""
"Shows how to use lookat inverse kinematics to maintain line of sight with a "
"moving object."
msgstr ""

# 7b9bfd50af664fffae1f4c15f16fe429
#: ../../source/openravepy/examples.tutorial_iklookat_multiple.rst:2
msgid ":mod:`tutorial_iklookat_multiple` Module"
msgstr ""

# faf8897c9b1343ceb1f92d660ed53d9f
#: ../../openravepy/examples/tutorial_iklookat_multiple.py:docstring of
#: openravepy.examples.tutorial_iklookat_multiple:1
msgid ""
"Shows how to use lookat inverse kinematics to have multiple robots maintain "
"line of sight while avoiding collisions."
msgstr ""

# 7ae0c89150ab424480973597086e0c2c
#: ../../source/openravepy/examples.tutorial_iksolutions.rst:2
msgid ":mod:`tutorial_iksolutions` Module"
msgstr ""

# 9957a6b2795f4845b1b4885e4d9b4377
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring of
#: openravepy.examples.tutorial_iksolutions:1
msgid "Shows how to call an IK solver and render all the solutions."
msgstr ""

# 85eaf27c06b841cf92f8f063824d0f50
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring of
#: openravepy.examples.tutorial_iksolutions:8
msgid ""
"First the inversekinematics database generator is called querying a "
"**Transform6D** IK."
msgstr ""

# 6c775b8ee93640bb8bf30ba5ca7dabf5
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring of
#: openravepy.examples.tutorial_iksolutions:16
msgid "Then a collision-free random configuration is set on the robot:"
msgstr ""

# 6280abecec3142318ba322d7008e355e
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring of
#: openravepy.examples.tutorial_iksolutions:25
msgid "Finally all the IK solutions are computed"
msgstr ""

# 126b2383b3044a65b630b515c93de313
#: ../../openravepy/examples/tutorial_iksolutions.py:docstring of
#: openravepy.examples.tutorial_iksolutions:32
msgid ""
"In order to render the ik solutions, create a new robot for every solution "
"and make it trasparent"
msgstr ""

# a415d34cff374222abbd87a9cb7e2760
#: ../../source/openravepy/examples.tutorial_iktranslation.rst:2
msgid ":mod:`tutorial_iktranslation` Module"
msgstr ""

# 7a81efd683e1478781bf9a995a271365
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring of
#: openravepy.examples.tutorial_iktranslation:1
msgid ""
"Shows how to use translational inverse kinematics for an arm with few joints."
msgstr ""

# 7f2579a6b85846849441a08d7b09236d
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring of
#: openravepy.examples.tutorial_iktranslation:9
msgid "There are two different types of translation 3D IKs:"
msgstr ""

# ff8f8c13e2eb42caaf7dcba8ec21c116
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring of
#: openravepy.examples.tutorial_iktranslation:11
msgid ""
"**Translation3D** - Align the origin of the manipulation coordinate system "
"with the desired world position"
msgstr ""

# b6d14c0f988b47c98bd5126785f899bc
#: ../../openravepy/examples/tutorial_iktranslation.py:docstring of
#: openravepy.examples.tutorial_iktranslation:13
msgid ""
"**TranslationLocalGlobal6D** - Align a dynamically chosen position with "
"respect ot the manipulation coordinate system with the desired world "
"position. To see this in action, execute the example with:"
msgstr ""

# 42321238ebab47a7af2b9a112bea6b9f
#: ../../source/openravepy/examples.tutorial_iktranslation2d.rst:2
msgid ":mod:`tutorial_iktranslation2d` Module"
msgstr ""

# 7fe805aebe954eed9283706635e78cd5
#: ../../openravepy/examples/tutorial_iktranslation2d.py:docstring of
#: openravepy.examples.tutorial_iktranslation2d:1
msgid ""
"Shows how to use the TranslationXY2D planar translation inverse kinematics "
"type for an arm with few joints."
msgstr ""

# 5532730a076b4117be9997fba040f956
#: ../../source/openravepy/examples.tutorial_inversereachability.rst:2
msgid ":mod:`tutorial_inversereachability` Module"
msgstr ""

# 02fc36c96c944557b8007b0f05c02d5b
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:1
msgid ""
"Generate and use the inverse-reachability database in OpenRAVE for the PR2 "
"robot."
msgstr ""

# d5a5c26cec7d4320bfc52a6a293166bc
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:7
msgid "Prerequisite"
msgstr ""

# 90b07c9e90d34b569629e1b9c6a9ee09
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:10
msgid "IK solvers"
msgstr ""

# f41dc55ce50642d8810491b85a994d2d
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:12
msgid "Generate the IK solver for leftarm_torso. It takes several minutes:"
msgstr ""

# 6be68822afd3452783362b3bdb45a9ac
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:19
msgid "[optional] Download inverse-reachability database"
msgstr ""

# 29419de56984426f819111e868ddbe90
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:21
msgid ""
"Get the inverse-reachability and reachability databases for OpenRAVE r1974 "
"from::"
msgstr ""

# f8f3063a05b64ca6ad6db192afe5bb7a
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:25
msgid "and decompress the file under:"
msgstr ""

# fb4815aebe38455886cbee3e358a60a2
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:31
msgid "You can also `Generate database`_."
msgstr ""

# 01d21a5ceedf41f7b8b2a8696d836037
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:34
msgid "Generate database"
msgstr ""

# 57294b80b38741cf81a23a11f724f38d
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:36
msgid "**Generate the databases with single core**"
msgstr ""

# 4536a593a77b4cffb8ecc03346b97c96
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:42
msgid ""
"This process will generate both reachability and inverse-rechability "
"databases. It will take more than 10 hours (Intel Core2 Duo E8400 @ 3GHz "
"with 4G of memory)."
msgstr ""

# ccdb5d85aa8c4462b9398d3d075030cf
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:44
msgid "**Generate the databases with multiple cores**"
msgstr ""

# 86a518a82b5e476bbb7c49cb7626a1f2
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:46
msgid ""
"If you have the openrave_planning ROS stack installed, you can try a "
"parallelized version of the reachability database generation:"
msgstr ""

# 077a2149a9a14be09d6ecbc0003a2079
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:48
msgid "First:"
msgstr ""

# ced9c4e431da4050833bac200b8f98ab
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:54
msgid "Then:"
msgstr ""

# 44002db5ad6d44a4a1c47ce5afc2d942
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:60
msgid "Finally, in a separate terminal:"
msgstr ""

# 84a1e3e4ebb243e4a096488daba1f34f
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:66
msgid "To add another computer with 8 cores add:"
msgstr ""

# 58dcac958fc8476783f4ee53b4d3ee9d
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:72
msgid ""
"Once the reachability database is generated, generate the "
"inversereachability database (which will take much less time):"
msgstr ""

# 6c462db5af8d4f6799e9dc70f9cbd927
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:79
msgid "There are a few other parameters that can be set:"
msgstr ""

# 62e41a943dfb470f9e9bb8f4bec760b4
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:90
msgid "You can also `[optional] Download inverse-reachability database`_."
msgstr ""

# 5b1751d8c0bc4d6c86f1221ce799d95e
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:93
msgid "Visualize database"
msgstr ""

# 6811269d350f4323aea1adff6f603bca
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:96
msgid "Visualize inverse-reachability database"
msgstr ""

# 0702ae2ce7744b819ae627e50bfe98a5
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:98
msgid ""
"This tutorial visualizes the database for one grasp, there will be another "
"tutorial that will show how to visualize the base distribution for all "
"possible grasps for an object."
msgstr ""

# 0ff7180220714cf7af80ad263ac0381a
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:107
msgid "Visualize reachability database"
msgstr ""

# 7eec0c7a71404c81ae7eef358b02fe35
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:109
msgid "Command::"
msgstr ""

# 0dc95ad3d94f4e2a84002ca3f9f58e4d
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:124
msgid "Use database: Move the robot where it can perform a specific grasp"
msgstr ""

# ca164baa2df7453694f6fa26ca178c53
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:132
msgid "Set up environment"
msgstr ""

# 643fc37ae9454ca4bf15ffc48375a40f
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:141
msgid "Set up goal"
msgstr ""

# 69b15a39b43c477d88cd7dbb589f1e56
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:158
msgid "Set up robot"
msgstr ""

# f8fda31a10c64111bc3e9848566a98c0
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:175
msgid "Load database"
msgstr ""

# 9d3d08085fed49e8a1667b35f3c64cf7
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:197
msgid "Get robot base distribution"
msgstr ""

# 49e61cdb6a8e4f4da08319417307a4c8
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:203
msgid "Input for computeBaseDistribution()::"
msgstr ""

# f1b563f8033b46bebe9c295f326ae6ce
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:208
msgid "Output for computeBaseDistribution()::"
msgstr ""

# 14036af8376c4bbc9c062dabe6bf60d9
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:215
msgid "Find valid poses from the distribution"
msgstr ""

# b1de93dd188b450c8a6d7a000cf8ebfb
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:217
msgid "Code fragment from sanbox/mobilemanipulation.py"
msgstr ""

# 82700a3d218b411d96033ab57ae26683
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:245
msgid "Move robot to valid poses"
msgstr ""

# 22b623f8e1a44ed6bd86a30b338b5f9c
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:262
msgid "[optional] Overlay results"
msgstr ""

# fe65f26663534d888cf3cf6cbbf08569
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:264
msgid "Code fragment from `databases.inversereachability`"
msgstr ""

# 47df8bdb606a462c9e96df61219d7d8a
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:298
msgid "Related classes"
msgstr ""

# 63bc78ca73734bd28d027bcef762b0d4
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:300
msgid ""
"`databases.inversereachability` - Code that generates the inverse-"
"reachability database"
msgstr ""

# c09078dc49f74e69ad6fd45773d925c5
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability:301
msgid ""
"`databases.kinematicreachability` - Code that generates the reachability "
"database"
msgstr ""

# 107ece6923dd4252affd59d7ae8712b5
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability.InverseReachabilityDemo.showGrasp:1
msgid "visualizes a grasp transform"
msgstr ""

# 87d6e9f455a247d6b03e77b083631298
#: ../../openravepy/examples/tutorial_inversereachability.py:docstring of
#: openravepy.examples.tutorial_inversereachability.InverseReachabilityDemo.showPossibleBasePoses:1
msgid ""
"visualizes possible base poses for a grasp specified by Tgrasp and "
"gripper_angle"
msgstr ""

# e49a9cc02d2149d8ba861ce217ec5470
#: ../../source/openravepy/examples.tutorial_plotting.rst:2
msgid ":mod:`tutorial_plotting` Module"
msgstr ""

# 4118afb45fc34aacb813df21ae8549bd
#: ../../openravepy/examples/tutorial_plotting.py:docstring of
#: openravepy.examples.tutorial_plotting:1
msgid "Example plotting calls."
msgstr ""

# b094e9d017ad41039fe5d328faae8841
#: ../../source/openravepy/examples.visibilityplanning.rst:2
msgid ":mod:`visibilityplanning` Module"
msgstr ""

# 055fe0efe31b477bbd14c2eec1e1e284
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:1
msgid ""
"Planning with a wrist camera to look at the target object before grasping."
msgstr ""

# 4aa2cec003d44d3591d331366ff6eeba
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:8
msgid ""
"This example shows a vision-centric manipulation framework for that can be "
"used to perform more reliable reach-and-grasp tasks. The biggest problem "
"with a lot of autonomous manipulation frameworks is that they perform the "
"full grasp planning step as soon as the object is detected into view by a "
"camera. Due to uncertainty in sensors and perception algorithms, usually the "
"object error is huge when a camera is viewing it from far away. This is why "
"OpenRAVE provides a module to plan with cameras attached to the gripper that "
"implements [1]_."
msgstr ""

# b3d3bd4591b24e699d0626c0db8a8cd6
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:10
msgid ""
"By combining grasp planning and visual feedback algorithms, and constantly "
"considering sensor visibility, the framework can recover from sensor "
"calibration errors and unexpected changes in the environment. The planning "
"phase generates a plan to move the robot manipulator as close as safely "
"possible to the target object such that the target is easily detectable by "
"the on-board sensors. The execution phase is responsible for continuously "
"choosing and validating a grasp for the target while updating the "
"environment with more accurate information. It is vital to perform the grasp "
"selection for the target during visual-feedback execution because more "
"precise information about the target's location and its surroundings is "
"available. Here is a small chart outlining the differences between the "
"common manipulation frameworks:"
msgstr ""

# 6b316de95da94e7280bf51ab641bc907
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:24
msgid "First Stage: Sampling Camera Locations"
msgstr ""

# d684950ad5924cbc90af55b200ed9eb8
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:27
msgid "Handling Occlusions"
msgstr ""

# 9b3114ae0c094d6bbb2a0cadd4291fab
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:29
msgid ""
"Occlusions are handled by shooting rays from the camera and computing where "
"they hit. If any ray hits another object, the target is occluded."
msgstr ""

# 3000901fcfef4d1b9c92eb2d02ec256b
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:35
msgid "Object Visibility Extents"
msgstr ""

# 6d1ce436af7a4586a0ee48d819f4929f
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:36
msgid ""
"The places where a camera could be in order for object detection to work are "
"recorded."
msgstr ""

# d1a964a506c44036928b1ea723f50a54
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:38
msgid "Visibility detection extents.jpg"
msgstr ""

# 4caa17fa983248598ad6405306aab357
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:40
msgid "# gather data # create a probability distribution # resample"
msgstr ""

# fb98a0dbd209405396014fc00b8ec8ff
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:45
msgid "Adding Robot Kinematics"
msgstr ""

# 24d1db0cf2054639a99a0c81553bb3a7
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:47
msgid "The final sampling algorithm is:"
msgstr ""

# 481f490313984449a2464291fc159a2d
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:52
msgid ""
"The final planner just involves an RRT that uses this goal sampler. The next "
"figure shows the two-stage planning proposed in the paper."
msgstr ""

# 4efd5a2dece643aa89457f21e7b24fc8
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:57
msgid ""
"For comparison reasons the one-stage planning is shown above. Interestingly, "
"visibility acts like a key-hole configuration that allows the two-stage "
"planner to finish both paths in a very fast time. The times are comparible "
"to the first stage."
msgstr ""

# 7daed7ed94f445eeb8b89aa8ce6e0f4d
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning:59
msgid ""
"Rosen Diankov, Takeo Kanade, James Kuffner. Integrating Grasp Planning and "
"Visual Feedback for Reliable Manipulation, IEEE-RAS Intl. Conf. on Humanoid "
"Robots, December 2009."
msgstr ""

# 460960982a4d4082930873dc3f4f4ad2
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`openravepy.examples.visibilityplanning.VisibilityGrasping`"
msgstr ""

# f2ca398e01e748999788e49db01ec18c
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning.PA10GraspExample:1
msgid "Specific class to setup an PA10 scene for visibility grasping"
msgstr ""

# b9097a1009ab450fa8ccdc6ac05a1184
#: ../../openravepy/examples/visibilityplanning.py:docstring of
#: openravepy.examples.visibilityplanning.VisibilityGrasping:1
msgid ""
"Calls on the openrave grasp planners to get a robot to pick up objects while "
"guaranteeing visibility with its cameras"
msgstr ""

# 90d03aa53b554f39932697bebe6f54ca
#: ../../source/openravepy/ikfast.rst:2
msgid ":mod:`ikfast` Module"
msgstr ""

# cb335b17fcac489994fcdc02ca9148b1
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:4
msgid "IKFast: The Robot Kinematics Compiler"
msgstr ""

# 1c1098fcd523496dbccc4db77ec7533c
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:9
msgid ""
"IKFast analytically solves robot inverse kinematics equations and generates "
"optimized C++ files."
msgstr ""

# 21840e8980c348eaa89bf8fd0aae9951
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:11
msgid ""
"The inverse kinematics equations arise from attemping to place the robot end "
"effector coordinate system in the world while maintaining joint and user-"
"specified constraints. User-specified constraints make up many different `IK "
"Types`_, each of them having advantages depending on the task."
msgstr ""

# 91fb82f117034032a39642c216367462
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:14
msgid ""
"IKFast will work with any number of joints arranged in a chain; this is "
"defined by the `Robot.Manipulator`. For chains containing more degrees of "
"freedom (DOF) than the IK type requires, the user can set arbitrary values "
"of a subset of the joints until the number of unknown joints matches the "
"degrees of freedom of the IK type."
msgstr ""

# c6dc68dc460a475ea0b539091f61e658
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:16
msgid ""
"It is not trivial to create hand-optimized inverse kinematics solutions for "
"arms that can capture all degenerate cases, having closed-form IK speeds up "
"many tasks including planning algorithms, so it really is a must for most "
"robotics researchers."
msgstr ""

# 035847ca038d41819fd648ab069232ff
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:18
msgid ""
"Closed-form solutions are necessary for motion planning due to two reasons:"
msgstr ""

# 9ad19bb8af3a453e80867d470e138e5f
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:20
msgid ""
"Numerical inverse kinematics solvers will always be much slower than closed "
"form solutions. Planners require being able to process thousands of "
"configurations per second. The closed-form code generated by ikfast can "
"produce solutions on the order of **~4 microseconds**! As a comparison, most "
"numerical solutions are on the order of 10 milliseconds (assuming good "
"convergence)."
msgstr ""

# a1a3a33a7cdc42b0953f05a799faf661
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:21
msgid ""
"The null space of the solution set can be explored because all solutions are "
"computed."
msgstr ""

# 59c24daf709c4fd298cf39b132d004cf
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:26
msgid ""
"Can handle robots with arbitrary joint complexity like non-intersecting axes."
msgstr ""

# 2d037f828b604301a9afbf7edc22a5e6
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:27
msgid "All possible discrete solutions calculated (can be up to 16)."
msgstr ""

# f635d1f351cb42edaacd5b47af338de6
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:28
msgid "Generated C++ code **independent** of OpenRAVE or any other library."
msgstr ""

# 5b819d1e48e84c0994dd8eb72f06599b
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:29
msgid ""
"Automatically detects degenerate cases where 2 or more axes align and cause "
"infinite solutions."
msgstr ""

# 9aa47f96978543b9a34de49c26c00fbb
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:30
msgid ""
"Invalid solutions are detected by checking if square roots are given "
"negative values or arc sines and arc cosines are given inputs exceeding the "
"[-1,1] range."
msgstr ""

# 6a2e62a9dfb6434dace245d5034dcf2d
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:31
msgid "All divide by zero conditions are automatically checked and handled."
msgstr ""

# 2fb171b711dd4e46a7e41c10f613824f
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:36
msgid "IK Types"
msgstr ""

# e570ff52237340cd95c4914c1c5fc052
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:38
msgid "The following inverse kinematics types are supported:"
msgstr ""

# f27230359ef54b02a3a1fc5c06806505
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:40
msgid "**Transform6D** - end effector reaches desired 6D transformation"
msgstr ""

# 6b77d9eebab740329607229689429d25
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:41
msgid "**Rotation3D** - end effector reaches desired 3D rotation"
msgstr ""

# 93fbf30d4b8c4489b3f07954388aaff2
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:42
msgid "**Translation3D** - end effector origin reaches desired 3D translation"
msgstr ""

# 6e9a596aa20f4190b7d51baf674497e7
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:43
msgid ""
"**Direction3D** - direction on end effector coordinate system reaches "
"desired direction"
msgstr ""

# eba709add2554fb793d81d78be3ceff7
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:44
msgid ""
"**Ray4D** - ray on end effector coordinate system reaches desired global ray"
msgstr ""

# 701a5d2e1bc7454f8ffdf87af8565106
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:45
msgid ""
"**Lookat3D** - direction on end effector coordinate system points to desired "
"3D position"
msgstr ""

# d6497279def24909b89c96641f7f6a90
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:46
msgid ""
"**TranslationDirection5D** - end effector origin and direction reaches "
"desired 3D translation and direction. Can be thought of as Ray IK where the "
"origin of the ray must coincide."
msgstr ""

# aa4af59519c14d2ab210791a862b455d
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:47
msgid ""
"**TranslationXY2D** - end effector origin reaches desired XY translation "
"position, Z is ignored. The coordinate system with relative to the base link."
msgstr ""

# 337f21727ad642acb218d6b73d45cb6d
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:48
msgid ""
"**TranslationLocalGlobal6D** - local point on end effector origin reaches "
"desired 3D global point. Because both local point and global point can be "
"specified, there are 6 values."
msgstr ""

# 6fc7d6f26dca42b0a84ce907c6ed3c27
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:49
msgid ""
"**TranslationXAxisAngle4D**, **TranslationYAxisAngle4D**, "
"**TranslationZAxisAngle4D** - end effector origin reaches desired 3D "
"translation, manipulator direction makes a specific angle with x/y/z-axis "
"(defined in the manipulator base link's coordinate system)"
msgstr ""

# 366733316c9045f9ab5182a8fc5eb076
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:50
msgid ""
"The possible solve methods are defined by `ikfast.IKFastSolver.GetSolvers()`"
msgstr ""

# 24dde4a28da3478d835f28aa1fae965f
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:55
msgid ""
"The main file ikfast.py can be used both as a library and as an executable "
"program. For advanced users, it is also possible to use run ikfast.py as a "
"stand-alone program, which makes it mostly independent of the OpenRAVE run-"
"time."
msgstr ""

# 83f01a18ea59481cb2f52c7c897b7506
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:57
msgid ""
"**However, the recommended way of using IKFast** is through the OpenRAVE :"
"mod:`.databases.inversekinematics` database generator which directly loads "
"the IK into OpenRAVE as an interface."
msgstr ""

# 706d421fb6d34d7bbfa940f392a2c615
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:60
msgid "Stand-alone Executable"
msgstr ""

# b7a9296d572749ba915eab965f757a43
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:62
msgid "To get help and a description of the ikfast arguments type"
msgstr ""

# 85fef25b74ba4a028fc7d003556ec35f
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:68
msgid ""
"A simple example to generate IK for setting the 3rd joint free of the "
"Barrett WAM is"
msgstr ""

# 24c126e110c5453b80ed43e9bbdc4c23
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:75
msgid "Through Python"
msgstr ""

# 6d0e6adc81344cd2a591d43c15e86ba8
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:77
msgid ""
"IKFast can also be used as a library in python. Generating 6D IK for the "
"Barrett WAM while setting the 3rd joint free can be achieved with:"
msgstr ""

# c48002468d204e60b765c28c0f8fe0b1
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:91
msgid "Using Generated IK Files"
msgstr ""

# 81759115173f4057aa3cbf0215d346b1
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:93
msgid ""
"The common usage is to generate a C++ file that can be compiled into a stand-"
"alone shared object/DLL, an executable program, or linked in statically to a "
"bigger project. For more complex kinematics, LAPACK_ is needed. Here is the "
"header file, which can be found in `share/openrave-X.Y/python/ikfast.h "
"<../../coreapihtml/ikfast_8h.html`_."
msgstr ""

# a11fdaa6127a4b1593f7b4ddd12879a8
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:96
msgid "Compiling with GCC"
msgstr ""

# 7753d5de3bd24826b9c866bdb2fdc11d
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:98
msgid "The most basic command is:"
msgstr ""

# 6f190ac99cd44e8d8dde1cd25ba83a70
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:104
msgid ""
"This will generate a small program that outputs all solutions given the end "
"effector with respect to the robot base."
msgstr ""

# 737c4c2320cb438c89745877669d3215
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:106
msgid ""
"Using gcc, this requires \"-llapack\" to be added. For MSVC++, users will "
"have to compile lapack and link it themselves."
msgstr ""

# d8f4eba442634f82babf40b2af981133
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:109
msgid "Compiling with MSVC"
msgstr ""

# 68be4fa36a434aa0bdbbb4b30fec9a4b
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:111
msgid ""
"`LAPACK For Windows`_ should be installed in order to get complex kinematics "
"linking correctly."
msgstr ""

# 3b2189acc69b4a41b79bb508ac43dbc3
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:114
msgid "Details"
msgstr ""

# 2941a416d85749dcaf9e87ebff8ecace
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:116
msgid "Terminology:"
msgstr ""

# 260df688a78d45a5bb5dbb59aedbe5bc
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:118
msgid "**solve joints** - the joints to solve for using inverse kinematics"
msgstr ""

# 444db2d40429416a9b41c3adcc6b5e6a
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:120
msgid ""
"**free joints** - the joints that are specified before the IK is run, these "
"values are known at runtime, but not known at IK generation time."
msgstr ""

# 8cd4d962883b4676ab21c01e90017b71
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:123
msgid ""
"The top level class is `ikfast.IKFastSolver` and generates an Abstract "
"Syntax Tree (AST) using definitions from `ikfast.AST`. The AST is then "
"passed to the language-specific generators defined in `ikfast."
"CodeGenerators`."
msgstr ""

# c056cb45f18844d3b3d90a464a1b4607
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:125
msgid ""
"Internal symbolic math uses sympy_. Infinite precision fractions are used in "
"order to keep track of linearly independent equations and when they evaluate "
"to 0. The infinite precision fractions are converted to decimals in the "
"generators."
msgstr ""

# 1f50f58f39e74caf965a2e0dafc876ff
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:134
msgid "Open Issues"
msgstr ""

# f3ec16a31445429c8db9d350020efdb8
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:136
msgid ""
"currently ikfast does not handle big decimal numbers well. for example "
"defining the axes or anchors as 1.032513241 will produce very big fractions "
"and make things slow."
msgstr ""

# fce1e1cdcb1e435b9be218e868ac2ad2
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:138
msgid ""
"there are cases when axes align and there are infinite solutions. although "
"ikfast can detect such cases, we need a lot more work in this area."
msgstr ""

# 4d333155fa5845f4af5bd0dd44e3fcfc
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:140
msgid ""
"for 6D ik, there are still mechanisms it cannot solve, please send the "
"kinematics model if such a situation is encountered."
msgstr ""

# cc32d05730dd4803a1470ad46124336e
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:142
msgid ""
"there are 10 different types of IK, currently ray4d IK needs a lot of work."
msgstr ""

# 55f438bc8c374aa0bf23930e48ccb5a1
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:145
msgid "FAQ"
msgstr ""

# 6cb6ca0b071441bd94a9fb2799a652d8
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:147
msgid "**ikfast has been running for more than an hour, will it ever finish?**"
msgstr ""

# 296bf60e8d764009880c048febf3283e
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast:149
msgid "Most likely not, usually an iksolver finishes within 10 minutes."
msgstr ""

# 6c40ca7b94ad4e47b2a1c7122bfc53e9
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast.AST:1
msgid ""
"Abstarct Syntax Tree class definitions specific for evaluating complex math "
"equations."
msgstr ""

# 128aa186e1ab4935bda26765f26ab4ff
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast.AST.SolverBreak:1
msgid "Terminates this scope"
msgstr ""

# b26a5f24d2fa488ca958479b00593b68
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverCoeffFunction:1
msgid ""
"Evaluate a set of coefficients and pass them to a custom function which will "
"then return all possible values of the specified variables in jointnames."
msgstr ""

# 096428cb33654642bd21fdb615b84d95
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverMatrixInverse:1
msgid ""
"Take the inverse of a large matirx and set the coefficients of the inverse "
"to the symbols in Asymbols."
msgstr ""

# aa1ac2d9c2b74a0ab7b464734b217273
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverPolynomialRoots:1
msgid ""
"find all roots of the polynomial and plug it into jointeval. poly should be "
"Poly"
msgstr ""

# 0bd9296cb0684c1c812cbb0d839e6beb
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverSolution:1
msgid ""
"Contains equations for evaluating one unknown variable. The variable can "
"have multiple solutions, and the solution is only valid if every equation in "
"checkforzeros is non-zero"
msgstr ""

# 4e5554206cfc4578aa47f985ce7ac301
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverSolution.equationsused:1
msgid ""
"Meaning of FeasibleIsZeros: If set to false, then solution is feasible only "
"if all of these equations evalute to non-zero. If set to true, solution is "
"feasible only if all these equations evaluate to zero."
msgstr ""

# f5a2c7bea614421cbdf4ccb10f6957db
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.AST.SolverStoreSolution:1
msgid "Called when all the unknowns have been solved to add a solution."
msgstr ""

# 8f64756ec42c460382cacab4241e9094
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast.IKFastSolver:1
msgid ""
"Solves the analytical inverse kinematics equations. The symbol naming "
"conventions are as follows:"
msgstr ""

# 596f123eb01a4aaab8afffd2ee17eae1
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast.IKFastSolver:3
msgid ""
"cjX - cos joint angle constX - temporary constant used to simplify "
"computations     dummyX - dummy intermediate variables to solve for gconstX "
"- global constant that is also used during ik generation phase htjX - half "
"tan of joint angle jX - joint angle pX - end effector position information "
"rX - end effector rotation information sjX - sin joint angle tconstX - "
"second-level temporary constant tjX - tan of joint angle"
msgstr ""

# 3562b1914f9a48dba0a0f5f2da1f009a
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.CannotSolveError:1
msgid ""
"thrown when ikfast fails to solve a particular set of equations with the "
"given knowns and unknowns"
msgstr ""

# c3557405b8b0437a8f122421231c21a4
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.GetSolvers:1
msgid ""
"Returns a dictionary of all the supported solvers and their official "
"identifier names"
msgstr ""

# 292b991ae63d446f9af2b11906152bb3
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.IKFeasibilityError:1
msgid ""
"thrown when it is not possible to solve the IK due to robot not having "
"enough degrees of freedom. For example, a robot with 5 joints does not have "
"6D IK"
msgstr ""

# 57c674620e2a4e45a667b027e24b3bf4
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.MatchSimilarFraction:1
msgid "returns None if no appropriate match found"
msgstr ""

# d9b175c4283944deb7c0fe69ac7eae56
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.addSolution:1
msgid ""
"Take the least complex solution of a set of solutions and resume solving"
msgstr ""

# 774bfc44e3a14432bb5aa1ebcb4b319d
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.buildEquationsFromRotation:1
msgid "Ree is a 3x3 matrix"
msgstr ""

# f7ea4611a1e04600b93eeb116308bde0
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.buildRaghavanRothEquationsFromMatrix:1
msgid ""
"Builds the 14 equations using only 5 unknowns. Method explained in "
"[Raghavan1993]_. Basically take the position and one column/row so that the "
"least number of variables are used."
msgstr ""

# 3e78336cc6144692a6d30cf7b718f035
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.buildRaghavanRothEquationsFromMatrix:3
msgid ""
"M Raghavan and B Roth, \"Inverse Kinematics of the General 6R Manipulator "
"and related Linkages\",  Journal of Mechanical Design, Volume 115, Issue 3, "
"1993."
msgstr ""

# 7b9f9847805542ab83324574660873f7
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.checkFinalEquation:1
msgid "check an equation in one variable for validity"
msgstr ""

# 448f4c9f116f4b048c377560b064eb71
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.checkForDivideByZero:1
msgid "returns the equations to check for zero"
msgstr ""

# 555829e234d049fd893d94e2ae9ca3cd
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.checkSolvabilityReal:1
msgid "returns true if there are enough equations to solve for checkvars"
msgstr ""

# 9e8eb788755c4e3fbae0da22988270c2
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.countVariables:1
msgid "Counts number of terms variable appears in"
msgstr ""

# 30b0a9bd59d24feab922572c11444382
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.det_bareis:1
msgid ""
"Function from sympy with a couple of improvements. Compute matrix "
"determinant using Bareis' fraction-free algorithm which is an extension of "
"the well known Gaussian elimination method. This approach is best suited for "
"dense symbolic matrices and will result in a determinant with minimal number "
"of fractions. It means that less term rewriting is needed on resulting "
"formulae."
msgstr ""

# 47f346b46ea74a4e823a08fe07da3bc4
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.det_bareis:9
msgid "TODO: Implement algorithm for sparse matrices (SFF)."
msgstr ""

# 2109e78b1fde4e3faff4892b763c76a1
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.det_bareis:11
msgid "Function from sympy/matrices/matrices.py"
msgstr ""

# cf25cd3ee3814adb9887ae6c3e7df7d4
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.forwardKinematicsChain:1
msgid "The first and last matrices returned are always non-symbolic"
msgstr ""

# 3153c42481b34622bf1165b05f4cfeb7
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.groupTerms:1
msgid "Separates all terms that do have var in them"
msgstr ""

# a57d96a4a0c84307b7f832720fd922bf
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.isValidSolution:1
msgid "return true if solution does not contain any nan or inf terms"
msgstr ""

# d35f7ec9843544e5ad1b3c4fa6c8bd15
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.iterateThreeIntersectingAxes:1
msgid ""
"Search for 3 consectuive intersecting axes. If a robot has this condition, "
"it makes a lot of IK computations simpler."
msgstr ""

# 78e9601679f94e1eb9b9a61fd035fd00
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.iterateThreeNonIntersectingAxes:1
msgid ""
"check for three consecutive non-intersecting axes. if several points exist, "
"so have to choose one that is least complex?"
msgstr ""

# c8492a2e5e0e4795955421450e984ed7
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.normalizeRotation:1
msgid ""
"error from openrave can be on the order of 1e-6 (especially if they are "
"defined diagonal to some axis)"
msgstr ""

# 8acef31d01924e2792b26217faa071f3
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.reduceBothSides:1
msgid ""
"Reduces a set of equations in 5 unknowns to a set of equations with 3 "
"unknowns by solving for one side with respect to another. The input is "
"usually the output of buildRaghavanRothEquations."
msgstr ""

# caf6720e858348659592ad46d02900a1
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.reduceBothSidesInverseMatrix:1
msgid ""
"solve a linear system inside the program since the matrix cannot be reduced "
"so easily"
msgstr ""

# c80466cff3ba4ac1a25441e88f35a98b
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.reduceBothSidesSymbolicallyDelayed:1
msgid ""
"the left and right side of the equations need to have different variables"
msgstr ""

# 4741f72653e84fb593cbe356d973804a
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.removecommonexprs:1
msgid ""
"removes common expressions from a sum. Assumes all the coefficients are "
"rationals. For example: a*c_0 + a*c_1 + a*c_2 = 0 will return in c_0 + c_1 + "
"c_2 = 0"
msgstr ""

# 1a932bd25b5841e293c3c3fe78d78d5d
# b5e4fd8b3d3442fd96e3b34361c73d37
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.replaceNumbers:1
#: ../../openravepy/ikfast_generator_cpp.py:docstring
#: openravepy.ikfast_generator_cpp.evalNumbers:1
msgid ""
"Replaces all numbers with symbols, this is to make gcd faster when fractions "
"get too big"
msgstr ""

# 7265555e935e4212abab3f8232c5c7ef
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.simplifyTransform:1
msgid ""
"Attemps to simplify an equation given that variables from a rotation matrix "
"have been used. There are 12 constraints that are tested: - lengths of rows "
"and colums are 1 - dot products of combinations of rows/columns are 0 - "
"cross products of combinations of rows/columns yield the left over row/column"
msgstr ""

# 8aa8cf32d2094267878f7e822ecef186
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.simplifyTransformPoly:1
msgid ""
"simplifies the coefficients of the polynomial with simplifyTransform and "
"returns the new polynomial"
msgstr ""

# fcdf759281714767bba72c86c18d1ed9
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solve6DIntersectingAxes:1
msgid ""
"Solve 6D equations using fact that 3 axes are intersecting. The 3 "
"intersecting axes are all part of T0links and will be used to compute the "
"rotation of the robot. The other 3 axes are part of T1links and will be used "
"to first compute the position."
msgstr ""

# 88b0448c13e04c47b8e5ec7c7c2ee30f
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveDialytically:1
msgid ""
"Return the coefficients to solve equations dialytically (Salmon 1885) "
"leaving out variable index ileftvar."
msgstr ""

# 844f06ecf7464fd18cefcc390318b9fa
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveDialytically:3
msgid ""
"Extract the coefficients of 1, leftvar**1, leftvar**2, ... of every equation "
"every len(newreducedeqs)*len(monoms) coefficients specify one degree of all "
"the equations (order of monoms is specified in exportmonomorder there should "
"be len(newreducedeqs)*len(monoms)*maxdegree coefficients"
msgstr ""

# 59c755d4660f4d7aa19c3ac05db4bdf5
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveDialytically:7
msgid "Method also checks if the equations are linearly dependent"
msgstr ""

# 5e960a7f8b8241dd84d578e4d6c11152
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_6D:1
msgid "Solves the full 6D translatio + rotation IK"
msgstr ""

# 1060f05f676748f0bc0024da1a077c6e
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_6DGeneral:1
msgid ""
"Solve 6D equations of a general kinematics structure. This method only works "
"if there exists 3 consecutive joints in that do not always intersect!"
msgstr ""

# 496cb722cc9a41c79871bc4a7a7b727c
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_Direction3D:1
msgid ""
"basedir needs to be filled with a 3elemtn vector of the initial direction to "
"control"
msgstr ""

# 4633bfdf2128440d93783e788737543f
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_Lookat3D:1
msgid ""
"basedir,basepos needs to be filled with a direction and position of the ray "
"to control the lookat"
msgstr ""

# 57760f7744504f1f968cd73e721320a3
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_Ray4D:1
msgid ""
"basedir,basepos needs to be filled with a direction and position of the ray "
"to control"
msgstr ""

# 2f8200740fe5436cb2c1d96419dea466
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_TranslationAxisAngle4D:1
msgid "Solves 3D translation + Angle with respect to X-axis"
msgstr ""

# 6d781bc0a7ed452fbd7d1094d29b8f2c
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveFullIK_TranslationDirection5D:1
msgid "Solves 3D translation + 3D direction"
msgstr ""

# 15b0beeaaa6a486c90222c3d4cac9311
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveHighDegreeEquationsHalfAngle:1
msgid "solve a set of equations in one variable with half-angle substitution"
msgstr ""

# cfd0d7bac5994339a4bc813776315205
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveKohliOsvatic:1
msgid ""
"Find a 16x16 matrix where the entries are linear with respect to the tan "
"half-angle of one of the variables [Kohli1993]_. Takes in the 14 raghavan/"
"roth equations."
msgstr ""

# 2faec5c25b634a49ba7a0584fd29f52c
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveKohliOsvatic:3
msgid ""
"Dilip Kohli and M. Osvatic, \"Inverse Kinematics of General 6R and 5R,P "
"Serial Manipulators\", Journal of Mechanical Design, Volume 115, Issue 4, "
"Dec 1993."
msgstr ""

# 01b3a250bb3244d7843f08099332366f
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveLiWoernleHiller:1
msgid ""
"Li-Woernle-Hiller procedure covered in  Jorge Angeles, \"Fundamentals of "
"Robotics Mechanical Systems\", Springer, 2007."
msgstr ""

# 5dfdee45e0c34ba882ebadacf0baeeb0
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveManochaCanny:1
msgid ""
"Solves the IK equations using eigenvalues/eigenvectors of a 12x12 quadratic "
"eigenvalue problem. Method explained in"
msgstr ""

# 879b03c3d4fa4c62a1eb72c6d71ff469
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveManochaCanny:3
msgid ""
"Dinesh Manocha and J.F. Canny. \"Efficient inverse kinematics for general 6R "
"manipulators\", IEEE Transactions on Robotics and Automation, Volume 10, "
"Issue 5, Oct 1994."
msgstr ""

# 4be1e2b0f75642188e2f80d3b232f6da
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solvePairVariablesHalfAngle:1
msgid "solves equations of two variables in sin and cos"
msgstr ""

# 44556701d1dc4c3ea4c03675c8f19c37
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveSingleVariableLinearly:1
msgid ""
"tries to linearly solve for one variable treating everything else as "
"constant."
msgstr ""

# b260e812afd343f6a22a65ac89456d3d
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.solveSingleVariableLinearly:3
msgid "need at least 3 equations"
msgstr ""

# c063c42d1b0e4970ab0523ca8fb3fabb
#: ../../openravepy/ikfast.py:docstring of
#: openravepy.ikfast.IKFastSolver.writeIkSolver:1
msgid "write the ast into a specific langauge, prioritize c++"
msgstr ""

# 3938c9b7d4934b0e909e91f1bc1f9e0e
# 843b22d676844ab191a46383b351346e
#: ../../<autodoc>:1
msgid "Bases: :class:`sympy.functions.elementary.trigonometric.atan2`"
msgstr ""

# aa4830dd96f24fbb9382e91a0b1e28a7
# 187b08175b8b4f5594a659d240c2e5f7
#: ../../openravepy/ikfast.py:docstring of openravepy.ikfast.atan2check:1
#: openravepy.ikfast.fmod:1
msgid "defines floating-point mod"
msgstr ""

# 3eb053a70d9647e1a006b3bb21e33c7e
# cd47c4833f6d4cd5a74b416bf62f95bc
#: ../../<autodoc>:1
msgid "Bases: :class:`sympy.core.function.Function`"
msgstr ""

# b4ab58cfc65b43aea4d4bd96faaf4300
#: ../../source/openravepy/ikfast_generator_cpp.rst:2
msgid ":mod:`ikfast_generator_cpp` Module"
msgstr ""

# 9ce1ccd81b5940a398691dc91f28a325
#: ../../openravepy/ikfast_generator_cpp.py:docstring of
#: openravepy.ikfast_generator_cpp:1
msgid "generates C++ code from the IKFastSolver AST."
msgstr ""

# 6d82b21f4cd64931a3480ff66e703508
#: ../../openravepy/ikfast_generator_cpp.py:docstring of
#: openravepy.ikfast_generator_cpp.CodeGenerator:1
msgid "Generates C++ code from an AST generated by IKFastSolver."
msgstr ""

# d2ce76ea7620487ebe3d0523f7b7b2f5
#: ../../openravepy/ikfast_generator_cpp.py:docstring of
#: openravepy.ikfast_generator_cpp.CodeGenerator.generateSolution:1
msgid ""
"writes the solution of one variable :param declarearray: if False, will "
"return the equations to be written without evaluating them. Used for "
"conditioned solutions."
msgstr ""

# 5131f0c55a454fc1a324eaef28e4b419
#: ../../source/openravepy/ikfast_generator_cpp_sympy0_6.rst:2
msgid ":mod:`ikfast_generator_cpp_sympy0_6` Module"
msgstr ""

# f58ab56e87f7487ba6d6a10ee1627943
#: ../../source/openravepy/ikfast_sympy0_6.rst:2
msgid ":mod:`ikfast_sympy0_6` Module"
msgstr ""

# 6af536808bee4337876f85a5402e3d00
#: ../../source/openravepy/interfaces.BaseManipulation.rst:2
msgid ":mod:`BaseManipulation` Module"
msgstr ""

# b125fbe8339d4ea19e45ecaf544e1f1a
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation:1
msgid "Interface wrapper for :ref:`module-basemanipulation`"
msgstr ""

# 4d804ef58d9b4d47a4c0d6495eeec2f1
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.FindIKWithFilters:1
msgid "See :ref:`module-basemanipulation-findikwithfilters`"
msgstr ""

# bb98f4004d9c4490b4edba888969f923
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.JitterActive:1
msgid "See :ref:`module-basemanipulation-jitteractive`"
msgstr ""

# e4a1079320e3442491e60d5af50c1e95
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveActiveJoints:1
msgid "See :ref:`module-basemanipulation-moveactivejoints`"
msgstr ""

# 5f5354d6787b470dbc37b31dd4f292a3
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveHandStraight:1
msgid "See :ref:`module-basemanipulation-movehandstraight`"
msgstr ""

# 996d39d2161b470a8d0283bb92399c7e
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveManipulator:1
msgid "See :ref:`module-basemanipulation-movemanipulator`"
msgstr ""

# b99d7a9aaeac427093f32990309bb951
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveToHandPosition:1
msgid "See :ref:`module-basemanipulation-movetohandposition`"
msgstr ""

# 64a9812b805a4181af5e8cbb4709dda9
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveToHandPosition:3
msgid "postprocessing is two parameters: (plannername,parmaeters)"
msgstr ""

# 6c08479c2b3b4ccf8ebbd278706b2cc6
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.MoveUnsyncJoints:1
msgid "See :ref:`module-basemanipulation-moveunsyncjoints`"
msgstr ""

# 2fd4de7b564b4ca9966a6d973aea119f
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.TrajFromData:1
msgid "See :ref:`module-basemanipulation-traj`"
msgstr ""

# 777152644a004edd8ec4d6ef4c0d5a3a
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.VerifyTrajectory:1
msgid "See :ref:`module-basemanipulation-verifytrajectory`"
msgstr ""

# d64c6aa5df094ff2b4b4889cf7d9e3b8
# d9c07edc43574c1b8b301ee2394f22d8
# 627b2e8c54cf4dd28fca383b708d29c8
# a3d4894d823e482989f9aaf95fc0261f
#: ../../openravepy/interfaces/BaseManipulation.py:docstring of
#: openravepy.interfaces.BaseManipulation.BaseManipulation.clone:1
#: ../../openravepy/interfaces/Grasper.py:docstring
#: openravepy.interfaces.Grasper.Grasper.clone:1
#: ../../openravepy/interfaces/TaskManipulation.py:docstring
#: openravepy.interfaces.TaskManipulation.TaskManipulation.clone:1
#: ../../openravepy/interfaces/VisualFeedback.py:docstring
#: openravepy.interfaces.VisualFeedback.VisualFeedback.clone:1
msgid "Clones the interface into another environment"
msgstr ""

# 246e300a5c76488c8b7a3ffeacc199ba
#: ../../source/openravepy/interfaces.Grasper.rst:2
msgid ":mod:`Grasper` Module"
msgstr ""

# 089f434cb1294a6e9a40779f79f73023
#: ../../openravepy/interfaces/Grasper.py:docstring of
#: openravepy.interfaces.Grasper.Grasper:1
msgid "Interface wrapper for :ref:`module-grasper`"
msgstr ""

# 525ba19799cf4afeaeac6c37a8f0227d
#: ../../openravepy/interfaces/Grasper.py:docstring of
#: openravepy.interfaces.Grasper.Grasper.ConvexHull:1
msgid "See :ref:`module-grasper-convexhull`"
msgstr ""

# 3ff76e161884401982c891821ff77738
#: ../../openravepy/interfaces/Grasper.py:docstring of
#: openravepy.interfaces.Grasper.Grasper.Grasp:1
msgid "See :ref:`module-grasper-grasp`"
msgstr ""

# c5814ff4c50244bca51612eed88143ad
#: ../../source/openravepy/interfaces.TaskManipulation.rst:2
msgid ":mod:`TaskManipulation` Module"
msgstr ""

# 9a9075b775f74cd9853c1d86c44494b5
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation:1
msgid "Interface wrapper for :ref:`module-taskmanipulation`"
msgstr ""

# 707632f97a5e45db95527a026b676ff3
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.CloseFingers:1
msgid "See :ref:`module-taskmanipulation-closefingers`"
msgstr ""

# 3611418a342c49469b5f09be02bbfee9
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.EvaluateConstraints:1
msgid "See :ref:`module-taskmanipulation-evaluateconstraints`"
msgstr ""

# 72811caf66f64c96ab2d95dc0c509f0c
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.GraspPlanning:1
msgid "See :ref:`module-taskmanipulation-graspplanning`"
msgstr ""

# eb932d3eb9074c2fb3bcf933c45e788b
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.GraspPlanning:3
msgid ""
"If gmodel is specified, then do not have to fill graspindices, grasps, "
"target, grasptranslationstepmult, graspfinestep"
msgstr ""

# b3943264e413420d81c305e31afcd868
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.ReleaseActive:1
msgid "See :ref:`module-taskmanipulation-releaseactive`"
msgstr ""

# 25f0ed2d6c20479aa027344cfe9e0e93
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.ReleaseFingers:1
msgid "See :ref:`module-taskmanipulation-releasefingers`"
msgstr ""

# 2cbed01721d34a5086d66b87b768f9e3
#: ../../openravepy/interfaces/TaskManipulation.py:docstring of
#: openravepy.interfaces.TaskManipulation.TaskManipulation.SwitchModels:1
msgid "See :ref:`module-taskmanipulation-switchmodels`"
msgstr ""

# 9e0d28a8415c4d1baa69ce139cf5969e
#: ../../source/openravepy/interfaces.VisualFeedback.rst:2
msgid ":mod:`VisualFeedback` Module"
msgstr ""

# f794bb01aadc42c9a18d84c4e3612a61
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback:1
msgid "Interface wrapper for :ref:`module-visualfeedback`"
msgstr ""

# e82f34409d254c048779660d59843515
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.ComputeVisibility:1
msgid "See :ref:`module-visualfeedback-computevisibility`"
msgstr ""

# bbe33d2c47b14dada30bc293ba44fb0a
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.ComputeVisibleConfiguration:1
msgid "See :ref:`module-visualfeedback-computevisibleconfiguration`"
msgstr ""

# d5c8e1880c944ce8881223be680110fc
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.MoveToObserveTarget:1
msgid "See :ref:`module-visualfeedback-movetoobservetarget`"
msgstr ""

# 6e396eaf0edf4a49ad201d315c823f77
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.ProcessVisibilityExtents:1
msgid "See :ref:`module-visualfeedback-processvisibilityextents`"
msgstr ""

# 29f5fbdd03fa4be49bb72e68e0b6ceb3
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.SampleVisibilityGoal:1
msgid "See :ref:`module-visualfeedback-samplevisibilitygoal`"
msgstr ""

# 78b7003fe7b44c87be07e79ae79ab9d6
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.SetCameraAndTarget:1
msgid "See :ref:`module-visualfeedback-setcameraandtarget`"
msgstr ""

# 872f998100e142c7a914543fa69316ff
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.SetCameraTransforms:1
msgid "See :ref:`module-visualfeedback-setcameratransforms`"
msgstr ""

# b094b235b9ad4da5a6408b2a29073fa4
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.SetParameter:1
msgid "See :ref:`module-visualfeedback-setparameter`"
msgstr ""

# 8e1f9d59036b4c0394150075ee93caa3
#: ../../openravepy/interfaces/VisualFeedback.py:docstring of
#: openravepy.interfaces.VisualFeedback.VisualFeedback.VisualFeedbackGrasping:1
msgid "See :ref:`module-visualfeedback-visualfeedbackgrasping`"
msgstr ""

# 15de815988de47a5a1156acac5a78c9f
#: ../../source/openravepy/metaclass.rst:2
msgid ":mod:`metaclass` Module"
msgstr ""

# c1e3c675c3844b459d53213ce155ff46
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.metaclass.InstanceTracker`"
msgstr ""

# f4bf687ac14d4e38a313cd4b31a7aa91
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.metaclass.MetaInstanceTracker`"
msgstr ""

# 50f8e50356fd41d58b19fa47a51c97cd
#: ../../<autodoc>:1
msgid "Bases: :class:`type`"
msgstr ""

# 790939bd128c408a894419703f499438
#: ../../source/openravepy/misc.rst:2
msgid ":mod:`misc` Module"
msgstr ""

# 4c5701274243416486baa24dd7eb4121
#: ../../openravepy/misc.py:docstring of openravepy.misc:1
msgid "Misc openravepy functions. Need to explicitly import to use them."
msgstr ""

# e852aebe6d154021800dbc7140e69bc9
#: ../../openravepy/misc.py:docstring of openravepy.misc.ComputeBoxMesh:1
msgid "Computes a box mesh"
msgstr ""

# c8632d70f3c8438ba7b3c4e52fc43b45
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.ComputeCylinderYMesh:1
msgid "Computes a mesh of a cylinder oriented towards y-axis"
msgstr ""

# fb211c336e1542c084de136456e21230
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.ComputeGeodesicSphereMesh:1
msgid ""
"Computes a geodesic sphere to a specified level. Returns the vertices and "
"triangle indices"
msgstr ""

# ba9258efb6224206b9b94d7908ea89bd
#: ../../openravepy/misc.py:docstring of openravepy.misc.DrawAxes:1
msgid "draws xyz coordinate system around target."
msgstr ""

# 9fe8766dea5c405b9f0246679a771850
#: ../../openravepy/misc.py:docstring of openravepy.misc.DrawAxes:3
msgid ""
"target can be a 7 element pose, 4x4 matrix, or the name of a kinbody in the "
"environment"
msgstr ""

# 59b515e6102f4947932ebfbfe68b7ed2
#: ../../openravepy/misc.py:docstring of openravepy.misc.InitOpenRAVELogging:1
msgid ""
"Sets the python logging **openravepy** scope to the same debug level as "
"OpenRAVE and initializes handles if they are not present"
msgstr ""

# bc340e18b75340f9950b9c64deb3c611
#: ../../openravepy/misc.py:docstring of openravepy.misc.MultiManipIKSolver:1
msgid ""
"Finds the simultaneous IK solutions of all disjoint manipulators (no "
"manipulators share a joint)."
msgstr ""

# f366d2ca28754efc9ffdf10b10280013
#: ../../openravepy/misc.py:docstring of openravepy.misc.MultiManipIKSolver:3
msgid ""
"The class is extremely useful in dual-manipulation IK solutions. It also "
"handled grabbed bodies correctly."
msgstr ""

# bd6bffad9c3f4087a856f6771948638e
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.MultiManipIKSolver.findMultiIKSolution:1
msgid "Return one set collision-free ik solutions for all manipulators."
msgstr ""

# 70a1c909b9174580857e708993b4fe77
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.MultiManipIKSolver.findMultiIKSolution:3
msgid "Method always checks self-collisions."
msgstr ""

# 501b8f1528d5467698dfbbd6f7497a10
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.OpenRAVEGlobalArguments:1
msgid ""
"manages a global set of command-line options applicable to all openrave "
"environments"
msgstr ""

# 8bd84fcaad3a4290a9c30c7ed61d6422
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.OpenRAVEGlobalArguments.parseAndCreate:1
msgid ""
"Parse all options and create the global Environment. The left over arguments "
"are passed to the parse functions. If returnviewer is False, the viewer is "
"created in a separate thread, so this method will not work for MacOSX if "
"this is the main executing thread."
msgstr ""

# f53f5f1c31104a78b7c1d5dbe6944767
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.OpenRAVEGlobalArguments.parseAndCreateThreadedUser:1
msgid ""
"Parse all options and create the global Environment. The left over arguments "
"are passed to the parse functions. If a viewer is requested, it is created "
"in this thread, and another thread is executed with the user function. This "
"is required for OSes that require viewer thread to be in main thread (Mac "
"OSX) :param userfn: Call with userfn(env,options) :return: nothing"
msgstr ""

# c03284f69c91441f87f30fbca019b562
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.OpenRAVEGlobalArguments.parseEnvironment:1
msgid ""
"Parses all options that affect the environment. If returnviewer is set, will "
"return the viewer to set instead of setting it"
msgstr ""

# 58a6991343af4c6eb1ee8f8632e1e63b
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.OpenRAVEGlobalArguments.parseGlobal:1
msgid "Parses all global options independent of the environment"
msgstr ""

# df2c8deba67e46b1bfbd291b7b4414ce
#: ../../openravepy/misc.py:docstring of openravepy.misc.SetViewerUserThread:1
msgid ""
"Adds a viewer to the environment if one doesn't exist yet and starts it on "
"this thread. Then creates a new thread to call the user-defined function to "
"continue computation. This function will return when the viewer and uesrfn "
"exits. If userfn exits first, then will quit the viewer"
msgstr ""

# e63541eb064347a3b2b62b23daaafbce
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.computeSepration:1
msgid "used to test separation of a set of quaternions"
msgstr ""

# df56338103194777956b97c0ab592b57
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.hopf2quat:1
msgid "convert hopf rotation coordinates to quaternion"
msgstr ""

# a4d0ac6b92374346a239f510411ea599
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.sampleR3:1
msgid ""
"low-discrepancy sampling using primes. The samples are evenly distributed "
"with an average distance of averagedist inside the box with dimensions "
"boxdims. Algorithim from \"Geometric Discrepancy: An Illustrated Guide\" by "
"Jiri Matousek"
msgstr ""

# b4176645923b411cbf387aab6a5d6c88
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.sampleR3lattice:1
msgid ""
"low-discrepancy lattice sampling in using the roots of x^3-3x+1. The samples "
"are evenly distributed with an average distance of averagedist inside the "
"box with extents boxextents. Algorithim from \"Geometric Discrepancy: An "
"Illustrated Guide\" by Jiri Matousek"
msgstr ""

# 99c06a0541bd400188d6a7ffc0467db5
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.sampleS2:1
msgid ""
"uses healpix algorithm with ordering from Yershova et. al. 2009 journal paper"
msgstr ""

# 70785c57fbae46188ded59061628adfe
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.SpaceSamplerExtra.sampleSO3:1
msgid ""
"Uniformly Sample 3D Rotations. If quatdelta is specified, will compute the "
"best level aiming for that average quaternion distance. Algorithm From A. "
"Yershova, S. Jain, S. LaValle, J. Mitchell \"Generating Uniform Incremental "
"Grids on SO(3) Using the Hopf Fibration\", International Journal of Robotics "
"Research, Nov 13, 2009."
msgstr ""

# 711b5b8b6f2446c183e866f0ba08db62
#: ../../openravepy/misc.py:docstring of openravepy.misc.TSP:1
msgid ""
"solution to travelling salesman problem. orders the set of solutions such "
"that visiting them one after another is fast."
msgstr ""

# 6e3f93f7f12f45d19d99ab42c45d4d60
#: ../../openravepy/misc.py:docstring of
#: openravepy.misc.sequence_cross_product:1
msgid "iterates through the cross product of all items in the sequences"
msgstr ""

# f71171ab42304e6dbe0bcf470b09812d
#: ../../source/openravepy/openravepy.rst:4
msgid ":mod:`openravepy` Package"
msgstr ""

# 0bf96f46c6f04f88b023c09eb7105f82
#: ../../openravepy/__init__.py:docstring of openravepy.__init__:1
msgid "Library allows OpenRAVE to be used through Python."
msgstr ""

# 014c3d9cf4d845928194d7b136240993
#: ../../openravepy/__init__.py:docstring of openravepy.__init__:3
msgid "Beginners should first check out :ref:`openravepy_beginning`."
msgstr ""

# e22e7f997d004cdb8a4fd7da8de845c4
#: ../../openravepy/__init__.py:docstring of openravepy.__init__:6
msgid "Internals"
msgstr ""

# efb03d037601461ea4bd5c9089d10095
#: ../../openravepy/__init__.py:docstring of openravepy.__init__:8
msgid ""
"There is a __build_doc__ external variable that is set to True only when "
"building docs. This allows package to clean their symbols and documentation."
msgstr ""

# 3171318ff0ea45efa3104866d3d59de6
#: ../../source/openravepy/openravepy.databases.rst:4
msgid ":mod:`databases` Package"
msgstr ""

# eb93c17851e24ef4aa2e419d915b152d
#: ../../openravepy/databases/__init__.py:docstring of openravepy.databases:1
msgid ""
"Kinematic, quasi-static, dynamic, and geometric analyses are precomputed and "
"used as databases during the run-time. All database generators rely on a "
"specific robot and provide many helpful methods to use the information after "
"it has been generated."
msgstr ""

# 0ded2605d955497db00228c78b0b21f7
#: ../../openravepy/databases/__init__.py:docstring of openravepy.databases:3
msgid ""
"The base abstract class is `databases.DatabaseGenerator` and always takes a "
"robot as its parameter. Sometimes database generators are dependent on a "
"robot's manipulator, sensor, or target object. These extra parameters are "
"always required at the constructor level. The hashes of all objects the "
"generator relies on are used to produce a unique ID to index the database "
"with $OPENRAVE_DATABASE. For example, the grasping database will combine the "
"robot manipulator hash and the target object hash."
msgstr ""

# f5a5d12fe6b442e797eed24f2620c586
#: ../../openravepy/databases/__init__.py:docstring of
#: openravepy.databases.DatabaseGenerator:1
msgid ""
"The base class defining the structure of the openrave database generators."
msgstr ""

# 295798a9b76f47aebba2c8fccdfc73e4
#: ../../openravepy/databases/__init__.py:docstring of
#: openravepy.databases.DatabaseGenerator.CreateOptionParser:1
msgid ""
"set basic option parsing options for using databasers through the command "
"line"
msgstr ""

# 7b5d2d0a4c394776880baefbb5d2ed88
# a8fad73bd40b44978e9dc8255f134625
#: ../../openravepy/databases/__init__.py:docstring of
#: openravepy.databases.DatabaseGenerator.InitializeFromParser:1
#: openravepy.databases.DatabaseGenerator.RunFromParser:1
msgid "run the database generator from the command line using"
msgstr ""

# e264ca9b71ee4be5901f5eec55edb641
#: ../../openravepy/databases/__init__.py:docstring of
#: openravepy.databases.DatabaseGenerator.autogenerateparams:1
msgid ""
"Caches parameters for most commonly used robots/objects and starts the "
"generation process for them"
msgstr ""

# d263bd7affcd4b2dbd727f0c59d97f35
#: ../../openravepy/databases/__init__.py:docstring of
#: openravepy.databases.DatabaseGenerator.clone:1
msgid "clones a database onto a different environment"
msgstr ""

# 5762a73276c24f4ba6cd1386dbffb707
#: ../../source/openravepy/openravepy.examples.rst:4
msgid ":mod:`examples` Package"
msgstr ""

# 921b89546bc34948994b3475a690db5a
#: ../../openravepy/examples/__init__.py:docstring of openravepy.examples:1
msgid "Examples showing common planning and usage scenarios."
msgstr ""

# 68aaaed4c4034ee1a0ef3b91ed648898
#: ../../openravepy/examples/__init__.py:docstring of openravepy.examples:3
msgid ""
"Unlike the tutorials, python examples are installed with openravepy and "
"their list can be retrieved with:"
msgstr ""

# 0aefa42e3285497a970318aaf6b9bd13
#: ../../openravepy/examples/__init__.py:docstring of openravepy.examples:9
msgid "Execute example ``X`` using:"
msgstr ""

# 95e01eaadb2647589541d2df91540e07
#: ../../openravepy/examples/__init__.py:docstring of openravepy.examples:15
msgid ""
"Each sub-module contains a 'run' function that can be called directly with "
"options to configure the example."
msgstr ""

# 2122b8953b394345aa441fe08b5074fe
#: ../../source/openravepy/openravepy.interfaces.rst:4
msgid ":mod:`interfaces` Package"
msgstr ""

# 228725dbde1b46539d68b1cdd07f4ffe
#: ../../openravepy/interfaces/__init__.py:docstring of
#: openravepy.interfaces:1
msgid "Interface bindings"
msgstr ""

# 7b78f568ccea4369839e544e37b8aaa9
#: ../../source/openravepy/openravepy_ext.rst:2
msgid ":mod:`openravepy_ext` Module"
msgstr ""

# 839ed1081fae4d65b1068c6c99b4d2b6
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.CollisionOptionsStateSaver:1
msgid "Saves/restores the state of the collision checker options"
msgstr ""

# ac03ea30501a4868a9cdef61e5c01a3c
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.KinBodyStateSaver:1
msgid "Saves/restores the body state, use **with** statement."
msgstr ""

# 87573d40d5434eceb25a03ea7c94ad0b
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.RobotStateSaver:1
msgid "Saves/restores the robot state, use **with** statement."
msgstr ""

# 66bafb56bd5444b6a5b75d1c66a9e2c1
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.normalizeZRotation:1
msgid ""
"for each quaternion, find the rotation about z that minimizes the distance "
"between the identify (1,0,0,0). Return the transformed the quaternions along "
"with the angle around the z-axis eliminated. qarray is a Nx4 array."
msgstr ""

# 5367f1e09c374200a2645f3d6cf60970
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.openrave_exception:1
msgid "wrap up the C++ openrave_exception"
msgstr ""

# 8122559ffdd348b19e7c298c81065f19
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.poseMultArrayT:1
msgid ""
"multiplies a pose with an array of poses (each pose is a quaterion + "
"translation)"
msgstr ""

# 72260be2bee6434dbeb1e6ab288a2283
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatArrayRotate:1
msgid "rotates a point by an array of 4xN quaternions. Returns a 3xN vector"
msgstr ""

# 59e2cfbc94124378ab433911b1b3ca1d
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatArrayTDist:1
msgid ""
"computes the natural distance (Haar measure) for quaternions, q is a 4-"
"element array, qarray is Nx4"
msgstr ""

# f2bed7574fe14220bb8b0dc1e93b3fec
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatArrayTMult:1
msgid "multiplies a Nx4 array of quaternions with a quaternion"
msgstr ""

# 92846685e9b04219bf25a9560cb6904d
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatArrayTRotate:1
msgid "rotates a point by an array of Nx4 quaternions. Returns a Nx3 vector"
msgstr ""

# 7a538aa45db54c06b3b3dd9bfe2e155f
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatMultArrayT:1
msgid "multiplies a quaternion q with each quaternion in the Nx4 array qarray"
msgstr ""

# f2e501a872ed457a9586c661a37fe98b
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatRotate:1
msgid "rotates a point by a 4-elt quaternion. Returns a 3 elt vector"
msgstr ""

# 1f4079a1066446de8ee5ec1cf243f03f
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.quatRotateArrayT:1
msgid ""
"rotates a set of points in Nx3 transarray by a quaternion. Returns a Nx3 "
"vector"
msgstr ""

# 628c72471c7f41288cdea7e6f72e6746
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.runtime_error:1
msgid "wrap up the C++ runtime_error"
msgstr ""

# 1bbb50511e4a4996a54b93f53e60f472
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.transformInversePoints:1
msgid "Transforms a Nxk array of points by the inverse of an affine matrix"
msgstr ""

# 7711a1da7c2846828893139c6eff6f00
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.transformPoints:1
msgid "Transforms a Nxk array of points by an affine matrix"
msgstr ""

# ffd9b5960be84cbe906c66adb7451426
#: ../../openravepy/openravepy_ext.py:docstring of
#: openravepy.openravepy_ext.with_destroy:1
msgid ""
"a decorator that always calls openravepy_int.RaveDestroy at the function end"
msgstr ""

# dd6c9fb539204105832bcc41b1fd3673
#: ../../source/openravepy/openravepy_int.rst:2
msgid ":mod:`openravepy_int` Module"
msgstr ""

# 6edc75c87e084b07abe055620d70be01
# dc6bec60e807466e8400d8b137490ac6
# 8f79107779324a86aa0bc87984eaf825
# de1679832b0640c99402d28760422729
# 825feb5b3710405b97462df7100ea6a0
# 8f00d830bd764fda993e55ebf06f1f9d
# 49409ee5aba247838015ac47a4ef1570
# 872ed0fee8d348ffa8381d39bc86b1d5
# bb8e583c7d104625aa12f1d85d9e15b4
# 20bb00b61e0e4b8ab9e2b019600aaee5
# 5757a37c2b0d49b5be53064d41cbfad1
# 6d1be43f6e4a494da97881c2bb1fd267
# fcc31933558b45f4b8a0048a0de4ff8c
# 5285a62556da4c74b734363bb54dca4c
# 922569b131344bb3bb5318d5474d2cbf
# b6f641a16ff443109dde07aa11119b70
# 22d2976909784a92a1593248be0c627c
# 5b18c54555724400b68104b809c7e293
# f807fa55ef914141bf3709d89002b17b
# a632668a8eb541869b9095d8e5763d89
# c8474505ddf64e2cbee6a062ca10c8b9
# 227e12551dd4454b8922651bd2bd8915
# 6d651247918548849fb3e6128110b5a1
# 124935ffa3864878b58b6718bbad1d87
# 4d9d92a348ef471c9afef9f665560c23
# 3e4b1bf80d2c46809371464c1307fca7
# a2b753c506f34268b66c4479e48cbfa2
# 9543bad4c1624664b1acfce94d2e8734
# 1e28c58423234c54a75aaaa9e42c2852
# ce661e96ba0444448556e3340847754d
# 3fa86a2b5e494bc6b6ee900b1ba37452
# 2df95d1c35034433b2a19f07b2ef0716
#: ../../<autodoc>:1
msgid "Bases: :class:`Boost.Python.instance`"
msgstr ""

# 202c47c2201e4adcb3d3f542ebc6c8bb
# f7f75749548f4ea481da6a2dce5adb33
# eef79b519b84493e815a0c3234c99ac3
# d25ce4cdb3fc4fbbb535a28e184a8c05
# 6a39f20ca8c54cb2a9ac00350cc195d4
# 8d5643c8e2204d028803aed7a21c6821
# 09c2eb2861c641798c3c822741dad69f
# 2b7787ad2fd342549ab4f8a33b4a0ef0
# 1ff9958f9b9b4e688f3ac020ba1eb85a
# 2d26675795994afc9b8e93a07ecae08a
# 78295e9e6bb04981a5ec0b14cfdac052
# 4a580fab01674d59a5ddbccaa7cf1d27
# 43207b26a0bf442aaa378ecb74be9c06
# 3d16a89a3f58473b9b04f6c7c243f691
# 14e77143cd99469eba7bd6f3e2fcffcf
# 1d8c48adf5e7448495ac35966c601d3f
# fdba23b6a36e41d9bb0f7309b3732ce3
# 71b67b087182459ba8dd23fe27365ae7
# ee670884996b4c5cb5e72ca23b44d5eb
# cde4d8ee03864051bd208ae277b8fdc7
#: ../../docstring of openravepy.openravepy_int.AABB:1
#: openravepy.openravepy_int.CollisionReport:1
#: openravepy.openravepy_int.ConfigurationSpecification:1
#: openravepy.openravepy_int.ConfigurationSpecification.Group:1
#: openravepy.openravepy_int.Contact:1 openravepy.openravepy_int.Environment:1
#: openravepy.openravepy_int.Environment:3
#: openravepy.openravepy_int.IkParameterization:1
#: openravepy.openravepy_int.KinBody.Link.GeometryInfo:1
#: openravepy.openravepy_int.Planner.PlannerParameters:1
#: openravepy.openravepy_int.Planner.PlannerParameters:3
#: openravepy.openravepy_int.PlannerProgress:1 openravepy.openravepy_int.Ray:1
#: openravepy.openravepy_int.Robot.ManipulatorInfo:1
#: openravepy.openravepy_int.Sensor.CameraIntrinsics:1
#: openravepy.openravepy_int.TriMesh:1 openravepy.openravepy_int.VoidHandle:1
#: openravepy.openravepy_int.VoidPointer:3 openravepy.openravepy_int.options:1
#: openravepy.openravepy_int.planningutils:1
#: openravepy.openravepy_int.planningutils.DHParameter:1
#: openravepy.openravepy_int.planningutils.DHParameter:3
msgid "__init__( (object)arg1) -> None"
msgstr ""

# 0a888ef4b1fe4823823600cbb92c5dca
#: ../../docstring of openravepy.openravepy_int.AABB:3
msgid ""
"__init__( (object)arg1, (planningutils)pos, (planningutils)extents) -> None"
msgstr ""

# 579b8c36e2f04e5584bb27b8b498f27c
# e77338d38c0d4b9a93765c744923506e
# dc7b8092a8c048c2a3812a0e9c70a3df
# 60f96f417771495b934c90610106aec6
# ed76fa3d273f444f829a640793507ef7
# b0989e31e3be4f8c82ca916607224d37
# e7dbd6abe86f45a8888b425e2297dd9e
# ed78daa4b62f4eebbfcaff85d55f07a4
# 7da2c731282a491781bd735110a19856
# e74db0f46dcd4a69bd52210fa8ffcb2d
# 14a67ee1069e44d886955cd17f7b1f39
# b6d9043d2d9a4497b3996eeaf9975676
# 85e15b5e4d4a499b9a908fd2a7124598
# bdcf1c54319149358ba70e33856ede13
# 293da20425e647a2a853e3c79f9822e8
# 5d8b7319dbae4e70adc5ec97f8add46f
# 6f4f2f7fcf854d77a5db64d303fbe051
# c4264252a3e84c9da8e351a8898d5e0f
# f657bdd2bc0a4603bf7d55c38ef8737f
# 0fdad527b5604f6b81658503ef4c9dc3
# bf3fd0fe629b40cca5b998295e26dd74
# 486b774006e449969ec0a9830b37d071
# fc6b82cf7fbc45c38de30b2728096cfb
# d37675f75402438f8843f9a952b60253
# b018086864644c73921ebf921d0dc54c
#: ../../<autodoc>:1
msgid "Bases: :class:`Boost.Python.enum`"
msgstr ""

# b001c22cfc95414fb0d4991ae6903ef6
# eec6125e975848dcbad30a7d1ec04365
# 4dddfef1c6d0468a8717d0e27c7292fc
# fb2bcee69dd34fdbbf6609be8a00f526
# 45808a08805943119b33083d154d67d9
# 37423063894d4b6f95bc5f0fcbbdcb7b
# e6a49f2002ab4a4bbecf21737bd63b65
# 491ca27e6ee5465894d17a6c849db28b
# 58e90414747d4c47a27f5aed1e6dd359
# 4e8ee5f4bc134c728c00b22f3cbb3ab5
# 6bca091172f646a79e08afe1afef5745
# 8649d9fa2bd3436a807d2852a114d66e
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.openravepy_int.Interface`"
msgstr ""

# 747e7a75eed04c19b466aa113b59e4b1
# 415c44f14d33425aa5997fd26b37b8f7
# 91feda7da90a49399fa5e0e544f40276
# e26affc03301400e9c1e4d9d24a54f25
# 6394c69a58f44165bc05edd91827b048
# 865113edc75f4590933a2c85e2993cb2
# 644c1e4ba34b47759b4788ef49a7bb17
# 93bfa0f1a08045b3a2847b0e616c93d8
# 0bf1d18085b740648a67a34c4cc3f51d
# 4b3919c595df404f8b22ed77e8e53240
# 461fde8970664504a24287e8e780ae6b
# 28e74aba78ef4c7d98bd39762fdf11bb
# 5a2c3f01b6b14209907ba334b642d8b3
# c8d17681886d4588a066be329039cfa9
# 14ca0dc1339b4a2b871e4b23f7b49f23
# f9f0088bda064b47955be5e2075358ec
# c199f1aade1644789d6a4808ba9c5c0d
# 1e2ba609b7f74c74a86c8e929d8e570a
# 9db93970332d4921a6efe895ef4096f8
# d2c49fba9bdc44ed97fc7be846250903
# c5c148278c37435bb8452427780d736a
# 2414461e599e4fa1ad7c8b1446285229
# d666b4e8e7b943af945378d2c5018a82
# 7f8b34143f5f4756a90189af4c394509
# 892c8418ae9d42ff8ff1a6fe30007ae4
# 7b8f179572154ec4bb27e2c84b544f95
# 4cef3a018c8d409f89aeb9f0d8a6d8a8
# e8b15fef1ddb4b8ca4daaf3ff4d3e2fb
# 8a90d224f73841a8a42998f012e0c32d
# 236d5e6087ac4521b992ec0b8573839d
# 029795c10329482483173a7a3b4eab85
# 17e6f33f611e4ee09b53a26dc8aee598
# 6eb5310e7764432182573a6d5f1dfefd
# 305a099394cd43f3bd66ee9042ade7ce
#: ../../docstring of openravepy.openravepy_int.CollisionChecker:1
#: openravepy.openravepy_int.Controller:1
#: openravepy.openravepy_int.GraphHandle:1
#: openravepy.openravepy_int.IkSolver:1 openravepy.openravepy_int.Interface:1
#: openravepy.openravepy_int.InterfaceBase:1
#: openravepy.openravepy_int.KinBody:1
#: openravepy.openravepy_int.KinBody.Joint:1
#: openravepy.openravepy_int.KinBody.Link:1
#: openravepy.openravepy_int.KinBody.Link.Geometry:1
#: openravepy.openravepy_int.KinBody.ManageData:1
#: openravepy.openravepy_int.Module:1
#: openravepy.openravepy_int.PhysicsEngine:1
#: openravepy.openravepy_int.Planner:1 openravepy.openravepy_int.PluginInfo:1
#: openravepy.openravepy_int.Robot:1
#: openravepy.openravepy_int.Robot.AttachedSensor:1
#: openravepy.openravepy_int.Robot.Manipulator:1
#: openravepy.openravepy_int.Sensor:1
#: openravepy.openravepy_int.Sensor.ActuatorSensorData:1
#: openravepy.openravepy_int.Sensor.CameraSensorData:1
#: openravepy.openravepy_int.Sensor.Force6DSensorData:1
#: openravepy.openravepy_int.Sensor.IMUSensorData:1
#: openravepy.openravepy_int.Sensor.JointEncoderSensorData:1
#: openravepy.openravepy_int.Sensor.LaserSensorData:1
#: openravepy.openravepy_int.Sensor.OdometrySensorData:1
#: openravepy.openravepy_int.Sensor.SensorData:1
#: openravepy.openravepy_int.Sensor.TactileSensorData:1
#: openravepy.openravepy_int.SensorSystem:1
#: openravepy.openravepy_int.SerializableData:1
#: openravepy.openravepy_int.SpaceSampler:1
#: openravepy.openravepy_int.Trajectory:1 openravepy.openravepy_int.UserData:1
#: openravepy.openravepy_int.Viewer:1
msgid "Raises an exception This class cannot be instantiated from Python"
msgstr ""

# 6b91d925f5e242df9dde78fc55e749ce
#: ../../docstring of openravepy.openravepy_int.ConfigurationSpecification:3
msgid "__init__( (object)arg1, (ConfigurationSpecification)spec) -> None"
msgstr ""

# c5e97eb96fa14ec882789eb5092845a3
#: ../../docstring of openravepy.openravepy_int.ConfigurationSpecification:5
msgid "__init__( (object)arg1, (Group)group) -> None"
msgstr ""

# 775d9cce9a1c4aa8ab27f44f308439e1
#: ../../docstring of openravepy.openravepy_int.ConfigurationSpecification:7
msgid "__init__( (object)arg1, (str)xmldata) -> None"
msgstr ""

# 3b31d21457ff44bf89746af6b48816d9
#: ../../docstring of
#: openravepy.openravepy_int.ConfigurationSpecification.AddGroup:1
msgid "AddGroup( (ConfigurationSpecification)arg1, (Group)group) -> int"
msgstr ""

# 654ad8380e0b426fb1a9fda20ab351e5
#: ../../docstring of openravepy.openravepy_int.Controller.Init:1
msgid ""
"Init( (Controller)arg1, (Robot)robot, (planningutils)dofindices, (int)"
"controltransform) -> bool"
msgstr ""

# 4fd46f492cd84370b80dda5f4c6f2c29
#: ../../docstring of openravepy.openravepy_int.Controller.SetDesired:1
msgid ""
"SetDesired( (Controller)arg1, (planningutils)values, (planningutils)"
"transform) -> bool"
msgstr ""

# a2495a60563b4c3f8dd2faa17ecf9020
#: ../../docstring of openravepy.openravepy_int.Environment.AddKinBody:1
msgid "AddKinBody( (Environment)arg1, (KinBody)body, (bool)anonymous) -> None"
msgstr ""

# b5b53b95d677409f958104af0c5cdef7
#: ../../docstring of openravepy.openravepy_int.Environment.AddRobot:1
msgid "AddRobot( (Environment)arg1, (Robot)robot, (bool)anonymous) -> None"
msgstr ""

# 9d75ef5f73274a8ea94ebe8048676131
#: ../../docstring of openravepy.openravepy_int.Environment.AddSensor:1
msgid "AddSensor( (Environment)arg1, (Sensor)sensor, (bool)anonymous) -> None"
msgstr ""

# 8b32a12e820c4ccd93279e693f4c2441
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:1
msgid ""
"CheckCollision( (Environment)arg1, (KinBody)body, (CollisionReport)report) -"
"> bool"
msgstr ""

# 59a1f044cb4743769058d96936c3c312
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:3
msgid ""
"CheckCollision( (Environment)arg1, (KinBody)body1, (KinBody)body2) -> bool"
msgstr ""

# f708c6fc82404f659ff027d101623f31
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:5
msgid ""
"CheckCollision( (Environment)arg1, (KinBody)body1, (KinBody)body2, "
"(CollisionReport)report) -> bool"
msgstr ""

# 398a932b38b74daca4d25e37d7a6fad4
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:7
msgid "CheckCollision( (Environment)arg1, (planningutils)link) -> bool"
msgstr ""

# c4fc8b40fab7434d88e2127951a396c2
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:9
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link, (CollisionReport)"
"report) -> bool"
msgstr ""

# 9df748a04dcd429f8c1e607aafcc835c
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:11
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link1, (planningutils)"
"link2) -> bool"
msgstr ""

# a6cc2d41996c4dccb8aaa7a1bdf28ed9
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:13
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link1, (planningutils)"
"link2, (CollisionReport)report) -> bool"
msgstr ""

# bd2883cde8a5443f90235be483dc5a35
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:15
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link, (KinBody)body) -> "
"bool"
msgstr ""

# 045acd18f3cb4f60830207eb7e189ae4
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:17
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link, (KinBody)body, "
"(CollisionReport)report) -> bool"
msgstr ""

# 9d79e4d3b3304bdfbaff284707462b20
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:19
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link, (planningutils)"
"bodyexcluded, (planningutils)linkexcluded) -> bool"
msgstr ""

# 7cf79b854f3b4fd5804992f95cc81e4b
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:21
msgid ""
"CheckCollision( (Environment)arg1, (planningutils)link, (planningutils)"
"bodyexcluded, (planningutils)linkexcluded, (CollisionReport)report) -> bool"
msgstr ""

# e3bb9b416a6f41638b30e89e4362e9d1
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:23
msgid ""
"CheckCollision( (Environment)arg1, (KinBody)body, (planningutils)"
"bodyexcluded, (planningutils)linkexcluded) -> bool"
msgstr ""

# 1fd0f72d827349ac9ae895e3b5238486
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:25
msgid ""
"CheckCollision( (Environment)arg1, (KinBody)body, (planningutils)"
"bodyexcluded, (planningutils)linkexcluded, (CollisionReport)report) -> bool"
msgstr ""

# 0418cd4591a543a1b8b959435db7ca80
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:27
msgid "CheckCollision( (Environment)arg1, (Ray)ray, (KinBody)body) -> bool"
msgstr ""

# 57ea6490dead4765afce6d221cb54243
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:29
msgid ""
"CheckCollision( (Environment)arg1, (Ray)ray, (KinBody)body, (CollisionReport)"
"report) -> bool"
msgstr ""

# 8b63564d3f864c689c434e2b50b9b117
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:31
msgid "CheckCollision( (Environment)arg1, (Ray)ray) -> bool"
msgstr ""

# 931ec00dd4b84bc9a671aad168e5e6e9
#: ../../docstring of openravepy.openravepy_int.Environment.CheckCollision:33
msgid ""
"CheckCollision( (Environment)arg1, (Ray)arg2, (CollisionReport)ray) -> bool"
msgstr ""

# 5f025033f63742fab67b27b63b6414f1
#: ../../docstring of
#: openravepy.openravepy_int.Environment.CheckCollisionRays:1
msgid ""
"Check if any rays hit the body and returns their contact points along with a "
"vector specifying if a collision occured or not. Rays is a Nx6 array, first "
"3 columsn are position, last 3 are direction+range."
msgstr ""

# 7aa85bb36f3748d6a98681a07bf364c6
#: ../../docstring of openravepy.openravepy_int.Environment.Load:1
msgid "Load( (Environment)arg1, (str)filename, (dict)atts) -> bool"
msgstr ""

# ce6d61b6c8b4475ca14ef5af330ee3ee
#: ../../docstring of openravepy.openravepy_int.Environment.LoadData:1
msgid "LoadData( (Environment)arg1, (str)data, (dict)atts) -> bool"
msgstr ""

# f7d29c74fded4be495ec4aba521bb620
# f818c9f1e95c43eb9cef320a81850cea
#: ../../docstring of openravepy.openravepy_int.Environment.Lock:1
#: openravepy.openravepy_int.Environment.LockPhysics:1
msgid "Locks the environment mutex."
msgstr ""

# 13aff79f229441d2afd7fcfaeafe28f9
#: ../../docstring of openravepy.openravepy_int.Environment.LockPhysics:4
msgid "Locks the environment mutex with a timeout."
msgstr ""

# 1afd5f14544246bc8e1633f5629a9b8a
#: ../../docstring of openravepy.openravepy_int.Environment.ReadInterfaceURI:1
msgid ""
"ReadInterfaceURI( (Environment)arg1, (str)filename, (dict)atts) -> Interface"
msgstr ""

# 213e9a57069d4b9eba283c3a3bb2cf9f
#: ../../docstring of
#: openravepy.openravepy_int.Environment.ReadInterfaceXMLFile:1
msgid ""
"ReadInterfaceXMLFile( (Environment)arg1, (str)filename, (dict)atts) -> "
"Interface"
msgstr ""

# 84c4e07c25f74d9987f14e214423e0b0
#: ../../docstring of openravepy.openravepy_int.Environment.ReadKinBodyData:1
msgid "ReadKinBodyData( (Environment)arg1, (str)data, (dict)atts) -> object"
msgstr ""

# 8708e52826184689a66e6ac1c1992a9e
#: ../../docstring of openravepy.openravepy_int.Environment.ReadKinBodyURI:1
msgid "ReadKinBodyURI( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# 5df3119e8edf468394162ee4aca825cf
#: ../../docstring of
#: openravepy.openravepy_int.Environment.ReadKinBodyXMLData:1
msgid "ReadKinBodyXMLData( (Environment)arg1, (str)data, (dict)atts) -> object"
msgstr ""

# c10d33c953a2482aab81f1ad9961f529
#: ../../docstring of
#: openravepy.openravepy_int.Environment.ReadKinBodyXMLFile:1
msgid ""
"ReadKinBodyXMLFile( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# 439fec304eac4202bfb7827c3eea9f2e
#: ../../docstring of openravepy.openravepy_int.Environment.ReadRobotData:1
msgid "ReadRobotData( (Environment)arg1, (str)data, (dict)atts) -> object"
msgstr ""

# 0df069e077c94951a3815fdb4bd1c3b3
#: ../../docstring of openravepy.openravepy_int.Environment.ReadRobotURI:1
msgid "ReadRobotURI( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# 501588265dad40e283271f8a4d2ecbc4
#: ../../docstring of openravepy.openravepy_int.Environment.ReadRobotXMLData:1
msgid "ReadRobotXMLData( (Environment)arg1, (str)data, (dict)atts) -> object"
msgstr ""

# 6c9bc113ff9f457a9ac13506a125342b
#: ../../docstring of openravepy.openravepy_int.Environment.ReadRobotXMLFile:1
msgid ""
"ReadRobotXMLFile( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# 73a1c24a2d5140a8bc166755b3a0bac4
#: ../../docstring of openravepy.openravepy_int.Environment.ReadTrimeshFile:1
msgid ""
"ReadTrimeshFile( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# be57d58cf8114f70be2b9df1c0329ac9
#: ../../docstring of openravepy.openravepy_int.Environment.ReadTrimeshURI:1
msgid "ReadTrimeshURI( (Environment)arg1, (str)filename, (dict)atts) -> object"
msgstr ""

# 2535f158b7ca41c1bc367ec1ab281f19
#: ../../docstring of openravepy.openravepy_int.Environment.Save:1
msgid ""
"Save( (Environment)arg1, (str)filename, (SelectionOptions)options, (str)"
"selectname) -> None"
msgstr ""

# 29296655b5df475884d42e63f68cf0ba
#: ../../docstring of openravepy.openravepy_int.Environment.SetUserData:1
msgid "SetUserData( (Environment)arg1, (planningutils)data) -> None"
msgstr ""

# 429671d55d8a49d8aaaaa2badae0b2c6
#: ../../docstring of openravepy.openravepy_int.Environment.SetViewer:1
msgid "Attaches the viewer and starts its thread"
msgstr ""

# f67f109b61e240eeac3c8bcca734f19e
#: ../../docstring of openravepy.openravepy_int.Environment.Unlock:1
msgid "Unlocks the environment mutex."
msgstr ""

# 414a077e1b7a4ff48d63dac3fcca6dff
#: ../../docstring of openravepy.openravepy_int.Environment.drawplane:1
msgid ""
"drawplane( (Environment)arg1, (planningutils)transform, (planningutils)"
"extents, (object)texture) -> object"
msgstr ""

# 1e6e25548e594e9ea19737ab253d91b0
#: ../../docstring of openravepy.openravepy_int.IkParameterization:3
msgid ""
"__init__( (object)arg1, (planningutils)primitive, (IkParameterizationType)"
"type) -> None"
msgstr ""

# 1e7fcd407f8f472a9422c6a836a31d11
#: ../../docstring of openravepy.openravepy_int.IkParameterization:5
msgid "__init__( (object)arg1, (str)str) -> None"
msgstr ""

# 8cd80ba3bfe04bd3ae9aba4fa0461156
#: ../../docstring of openravepy.openravepy_int.IkParameterization:7
msgid "__init__( (object)arg1, (IkParameterization)ikparam) -> None"
msgstr ""

# 1a09e9ef85f74820a15e8bfb9698e24a
#: ../../docstring of
#: openravepy.openravepy_int.IkParameterization.GetConfigurationSpecification:1
msgid ""
"GetConfigurationSpecification( (IkParameterization)arg1, (planningutils)"
"type) -> ConfigurationSpecification"
msgstr ""

# 49f6654f099749ff80433f3037c81c7f
#: ../../docstring of openravepy.openravepy_int.IkParameterization.GetDOF:1
msgid "GetDOF( (IkParameterization)arg1, (planningutils)type) -> int"
msgstr ""

# ade6a31d47534a36b0b0430ddc6593bf
#: ../../docstring of
#: openravepy.openravepy_int.IkParameterization.GetNumberOfValues:1
msgid ""
"GetNumberOfValues( (IkParameterization)arg1, (planningutils)type) -> int"
msgstr ""

# a0d01068983f46fa9fd8f4f5c0ff5f92
#: ../../docstring of openravepy.openravepy_int.IkParameterization.Transform:1
msgid ""
"Returns a new parameterization with transformed by the transformation T (T * "
"ik)"
msgstr ""

# 992990c19d764ea58aa9f64150c5c3b6
#: ../../docstring of openravepy.openravepy_int.IkReturn:1
msgid "__init__( (object)arg1, (IkReturnAction)action) -> None"
msgstr ""

# 44cf0d082ac3478cab5cfdc1997d3d70
#: ../../docstring of openravepy.openravepy_int.IkReturn.GetAction:1
msgid "Retuns IkReturn::_action"
msgstr ""

# 1d4dccd3575447359d8a65cd339828a4
#: ../../docstring of openravepy.openravepy_int.IkReturn.GetMapData:1
msgid ""
"Indexes into the map and returns an array of numbers. If key doesn't exist, "
"returns None"
msgstr ""

# 106a268452574de1a0cd051abc4d78eb
#: ../../docstring of openravepy.openravepy_int.IkReturn.GetMapDataDict:1
msgid "Returns a dictionary copy for IkReturn::_mapdata"
msgstr ""

# e81887a080874ee0a9f8d1ccc8658814
#: ../../docstring of openravepy.openravepy_int.IkReturn.GetSolution:1
msgid "Retuns IkReturn::_vsolution"
msgstr ""

# 0d0c6ab2ccee4747a7ea886e4a62fe08
#: ../../docstring of openravepy.openravepy_int.IkReturn.GetUserData:1
msgid "Retuns IkReturn::_userdata"
msgstr ""

# 6337e7dcb9054f66a92ff42dfa371512
#: ../../docstring of openravepy.openravepy_int.IkReturn.SetMapKeyValue:1
msgid "Adds key/value pair to IKReturn::_mapdata"
msgstr ""

# 85531c62306444a59f91d385ca82de6e
#: ../../docstring of openravepy.openravepy_int.IkReturn.SetSolution:1
msgid "Set IKReturn::_vsolution"
msgstr ""

# 83a51a26b4894ca28f9d00f2a86f2a20
#: ../../docstring of openravepy.openravepy_int.IkReturn.SetUserData:1
msgid "Set IKReturn::_userdata"
msgstr ""

# df252d7e4f8149a79a95b4a6ad4cf25c
#: ../../docstring of openravepy.openravepy_int.IkSolver.Solve:1
msgid ""
"Solve( (IkSolver)arg1, (planningutils)ikparam, (planningutils)q0, "
"(planningutils)freeparameters, (int)filteroptions) -> IkReturn"
msgstr ""

# 1be9fe2a73ac4071b2ab625d9b033bec
#: ../../docstring of openravepy.openravepy_int.IkSolver.SolveAll:1
msgid ""
"SolveAll( (IkSolver)arg1, (planningutils)ikparam, (planningutils)"
"freeparameters, (int)filteroptions) -> object"
msgstr ""

# 7b445db93f2f45038fe161be92a03c3d
#: ../../docstring of openravepy.openravepy_int.Interface.SendCommand:1
msgid "The calling conventions between C++ and Python differ a little."
msgstr ""

# 0a84c83dd69741af9370f044f0bbaa93
#: ../../docstring of openravepy.openravepy_int.Interface.SendCommand:3
msgid "In C++ the syntax is::"
msgstr ""

# 474385a625294067a204c82bdd7ded2a
#: ../../docstring of openravepy.openravepy_int.Interface.SendCommand:7
msgid "In python, the syntax is::"
msgstr ""

# 2b953f07934e40e8a501e80ce17e0ba0
#: ../../docstring of openravepy.openravepy_int.Interface.SendCommand:13
msgid ""
"The **releasegil** parameter controls whether the python Global Interpreter "
"Lock should be released when executing this code. For calls that take a long "
"time and if there are many threads running called from different python "
"threads, releasing the GIL could speed up things a lot. Please keep in mind "
"that releasing and re-acquiring the GIL also takes computation time."
msgstr ""

# 86d8803d159f491c8af32b531e72b51c
#: ../../docstring of openravepy.openravepy_int.Interface.SetUserData:1
msgid "SetUserData( (Interface)arg1, (planningutils)data) -> None"
msgstr ""

# aef14c18fbcc49f2b669053df9229906
#: ../../docstring of openravepy.openravepy_int.KinBody.CheckSelfCollision:1
msgid "CheckSelfCollision( (KinBody)arg1, (CollisionReport)report) -> bool"
msgstr ""

# abbe942703bc49b68dd46847715ffcbd
# 47bac9f1e96d497780ad221a5ac51654
#: ../../docstring of
#: openravepy.openravepy_int.KinBody.CreateKinBodyStateSaver:1
#: openravepy.openravepy_int.KinBody.CreateKinBodyStateSaver:4
msgid "Creates KinBodySaveStater for this body"
msgstr ""

# d3ca9dc0da8140bbbb7dbd29125eed35
#: ../../docstring of openravepy.openravepy_int.KinBody.GetChain:1
msgid ""
"If returnjoints is false will return a list of links, otherwise will return "
"a list of links (default is true)"
msgstr ""

# a94756b1e15b46679c05f56b2e30572b
#: ../../docstring of
#: openravepy.openravepy_int.KinBody.GetDOFAccelerationLimits:1
msgid ""
"GetDOFAccelerationLimits( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# f89a575ecb3e4011b23c1a23a43fd780
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFLimits:1
msgid "GetDOFLimits( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 34f081e3aaa44d6d933e96d3fbe85506
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFResolutions:1
msgid "GetDOFResolutions( (KinBody)arg1, (planningutils)arg2) -> object"
msgstr ""

# 983f6639bf744660b728dcdd27688afd
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFTorqueLimits:1
msgid "GetDOFTorqueLimits( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 07d7a9cb13c64b3ea7b67b92a97123ca
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFValues:1
msgid "GetDOFValues( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 6d5e014fd5f54bbe904016e234886e01
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFVelocities:1
msgid "GetDOFVelocities( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 04c43909ca2c4e58b77554d885a8f029
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFVelocityLimits:1
msgid "GetDOFVelocityLimits( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 2a08cd0bdbd24a858dc779b67245a20a
#: ../../docstring of openravepy.openravepy_int.KinBody.GetDOFWeights:1
msgid "GetDOFWeights( (KinBody)arg1, (planningutils)arg2) -> object"
msgstr ""

# d69a70f0106944e7b57829eb3f71ceb2
#: ../../docstring of openravepy.openravepy_int.KinBody.GetJoints:1
msgid "GetJoints( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# 9ddb969daded484497e198b05589aed8
#: ../../docstring of openravepy.openravepy_int.KinBody.GetLinks:1
msgid "GetLinks( (KinBody)arg1, (planningutils)indices) -> object"
msgstr ""

# e549c8aa60e2466883a5424ce99d24a4
#: ../../docstring of openravepy.openravepy_int.KinBody.GetNonAdjacentLinks:1
msgid "GetNonAdjacentLinks( (KinBody)arg1, (int)adjacentoptions) -> object"
msgstr ""

# 4713e06cfbcc4bf9a9f854e32d0784b1
#: ../../docstring of openravepy.openravepy_int.KinBody.InitFromBoxes:1
msgid "boxes is a Nx6 array, first 3 columsn are position, last 3 are extents"
msgstr ""

# 9963f075b431457589ea555066d7c096
#: ../../docstring of openravepy.openravepy_int.KinBody.SetDOFValues:1
msgid ""
"SetDOFValues( (KinBody)arg1, (planningutils)values, (planningutils)"
"dofindices) -> None"
msgstr ""

# 995e04e3269a4889aa66a8bd5ff41e9c
#: ../../docstring of openravepy.openravepy_int.KinBody.SetDOFValues:3
msgid ""
"SetDOFValues( (KinBody)arg1, (planningutils)values, (planningutils)"
"dofindices, (bool)checklimits) -> None"
msgstr ""

# 4e2eab01872a4e5eb6e90a61b0b99d1f
#: ../../docstring of openravepy.openravepy_int.KinBody.SetDOFVelocities:1
msgid ""
"SetDOFVelocities( (KinBody)arg1, (planningutils)dofvelocities, "
"(planningutils)linear, (planningutils)angular) -> None"
msgstr ""

# 667d428d5b7541fa9b5f53e6c6e9bae1
#: ../../docstring of openravepy.openravepy_int.KinBody.SetDOFVelocities:3
msgid ""
"SetDOFVelocities( (KinBody)arg1, (planningutils)dofvelocities, (bool)"
"checklimits) -> None"
msgstr ""

# 7c46a4170fa34437bdef4b0575e701e4
#: ../../docstring of openravepy.openravepy_int.KinBody.SetDOFVelocities:5
msgid ""
"SetDOFVelocities( (KinBody)arg1, (planningutils)dofvelocities, "
"(planningutils)linear, (planningutils)angular, (bool)checklimits) -> None"
msgstr ""

# cadba01fb1a644e0bbe7fe5614331f96
#: ../../docstring of openravepy.openravepy_int.KinBody.SetJointValues:1
msgid ""
"SetJointValues( (KinBody)arg1, (planningutils)values, (planningutils)"
"dofindices) -> None"
msgstr ""

# c420dc1d9f06408e81c7a58255b55c77
#: ../../docstring of openravepy.openravepy_int.Planner.InitPlan:1
msgid "InitPlan( (Planner)arg1, (Robot)robot, (str)xmlparams) -> bool"
msgstr ""

# 7ec624acf654458e9d66854528d9a889
#: ../../docstring of openravepy.openravepy_int.Planner.PlannerParameters:5
msgid "__init__( (object)arg1, (PlannerParameters)parameters) -> None"
msgstr ""

# 962fb2f8ad2944f4aef55edf4b6c9b2d
#: ../../docstring of
#: openravepy.openravepy_int.Planner.PlannerParameters.SetGoalConfig:1
msgid "sets PlannerParameters::vgoalconfig"
msgstr ""

# 400950c624b64f63a22047a29aa1b9f0
#: ../../docstring of
#: openravepy.openravepy_int.Planner.PlannerParameters.SetInitialConfig:1
msgid "sets PlannerParameters::vinitialconfig"
msgstr ""

# f4b32da5b49d47ada81b49ef960c44cf
#: ../../docstring of openravepy.openravepy_int.Ray:3
msgid "__init__( (object)arg1, (planningutils)pos, (planningutils)dir) -> None"
msgstr ""

# 053efeef91374f16b7a44721448163f4
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`openravepy.openravepy_int.KinBody`, :class:`openravepy."
"openravepy_int.Interface`"
msgstr ""

# db11ae27796443dcb4873ff7c10e3138
# 9e11cb74146f4045aef3eafbccbe5225
#: ../../docstring of openravepy.openravepy_int.Robot.CreateRobotStateSaver:1
#: openravepy.openravepy_int.Robot.CreateRobotStateSaver:4
msgid "Creates RobotSaveStater for this robot."
msgstr ""

# 20160fb620d846b08f601e88e641c92e
#: ../../docstring of openravepy.openravepy_int.Robot.GetAttachedSensor:1
msgid "Return the attached sensor whose name matches"
msgstr ""

# 0f2afcbc2543480c9a38b33bf65c5dba
#: ../../docstring of openravepy.openravepy_int.Robot.GetManipulator:1
msgid "Return the manipulator whose name matches"
msgstr ""

# 10d36742e27648c8af5c82dd0a64d4ab
#: ../../docstring of openravepy.openravepy_int.Robot.GetManipulators:1
msgid "GetManipulators( (Robot)arg1, (str)manipname) -> object"
msgstr ""

# 4afb3469ff304ec185d2270ba99b0075
#: ../../docstring of openravepy.openravepy_int.Robot.Grab:1
msgid "Grab( (Robot)arg1, (KinBody)body, (planningutils)linkstoignre) -> bool"
msgstr ""

# 86afc7db562849bbaa1d154f0dfe8f79
#: ../../docstring of openravepy.openravepy_int.Robot.Grab:3
msgid "Grab( (Robot)arg1, (KinBody)body, (Link)grablink) -> bool"
msgstr ""

# e8817bbefd204b4cb586882020542069
#: ../../docstring of openravepy.openravepy_int.Robot.Grab:5
msgid ""
"Grab( (Robot)arg1, (KinBody)body, (Link)grablink, (planningutils)"
"linkstoignore) -> bool"
msgstr ""

# 58f9413655f2499ca09d06a45f125438
#: ../../docstring of
#: openravepy.openravepy_int.Robot.Manipulator.CheckEndEffectorCollision:1
msgid ""
"CheckEndEffectorCollision( (Manipulator)arg1, (planningutils)transform, "
"(CollisionReport)report) -> bool"
msgstr ""

# 7274c4f4534545d88b0ca26951703405
#: ../../docstring of
#: openravepy.openravepy_int.Robot.Manipulator.CheckIndependentCollision:1
msgid ""
"CheckIndependentCollision( (Manipulator)arg1, (CollisionReport)report) -> "
"bool"
msgstr ""

# 473127bf1f264dc38e1895564c771ae6
#: ../../docstring of
#: openravepy.openravepy_int.Robot.Manipulator.FindIKSolution:1
msgid ""
"FindIKSolution( (Manipulator)arg1, (planningutils)param, (planningutils)"
"freevalues, (int)filteroptions [, (bool)ikreturn [, (bool)releasegil]]) -> "
"object"
msgstr ""

# a9f9bfddfd2a459a8220f11eaecd2171
#: ../../docstring of
#: openravepy.openravepy_int.Robot.Manipulator.FindIKSolutions:1
msgid ""
"FindIKSolutions( (Manipulator)arg1, (planningutils)param, (planningutils)"
"freevalues, (int)filteroptions [, (bool)ikreturn [, (bool)releasegil]]) -> "
"object"
msgstr ""

# 2d3af3dcd11f45048ab55f341de0bb1f
#: ../../docstring of openravepy.openravepy_int.Robot.SetActiveDOFs:1
msgid ""
"SetActiveDOFs( (Robot)arg1, (planningutils)dofindices, (int)affine) -> None"
msgstr ""

# 1401368cc45b484596864bf81d381300
#: ../../docstring of openravepy.openravepy_int.Robot.SetActiveDOFs:3
msgid ""
"SetActiveDOFs( (Robot)arg1, (planningutils)dofindices, (int)affine, "
"(planningutils)rotationaxis) -> None"
msgstr ""

# 341accde58304464a7ae611af9ef9112
#: ../../docstring of openravepy.openravepy_int.Robot.SetActiveManipulator:1
msgid "SetActiveManipulator( (Robot)arg1, (str)manipname) -> Manipulator"
msgstr ""

# 71b8fbf849594fac9592232b425179a8
#: ../../docstring of openravepy.openravepy_int.Robot.SetActiveManipulator:4
msgid "Set the active manipulator given a pointer"
msgstr ""

# 45cd7f7de07947a3b098898d5722acca
#: ../../docstring of openravepy.openravepy_int.Robot.SetController:1
msgid ""
"SetController( (Robot)arg1, (Controller)robot, (planningutils)dofindices, "
"(int)controltransform) -> bool"
msgstr ""

# 0589c5dc2c424fbcb34e9cff2ad55d18
#: ../../docstring of openravepy.openravepy_int.Robot.SetController:3
msgid "SetController( (Robot)arg1, (Controller)arg2) -> bool"
msgstr ""

# dbe4c8c4755d4e7d9c727ca9fb0d1e33
#: ../../docstring of openravepy.openravepy_int.Robot.WaitForController:1
msgid "Wait until the robot controller is done"
msgstr ""

# ce9367fb3e754ce1a78571644794dd2d
# 5c7b6263a2f942d6aa84ea9c185ceca2
# a064dc751bca4a88acf404113888d5dc
# 1ae6d1b9c8c54265a20ededb06b694da
# 1458af084ecf458583891a18e9ed61ce
# a755bbd53e6f48fbaa35603301fe164c
# b7d9253a1ba44544b4b14bc38fa29368
# 81c97acce89949edbc4417c44c8bda5e
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.openravepy_int.SensorData`"
msgstr ""

# c229a12bc2cc4b2cb6f857032ee3ed59
#: ../../docstring of openravepy.openravepy_int.Sensor.GetSensorData:1
msgid "GetSensorData( (Sensor)arg1, (Type)arg2) -> SensorData"
msgstr ""

# a8b1395d9ebd4deca4bc97f0cf2305de
#: ../../<autodoc>:1
msgid "Bases: :class:`openravepy.openravepy_int.UserData`"
msgstr ""

# faa39454a30943b8a239f9779e2abd27
#: ../../docstring of openravepy.openravepy_int.Trajectory.GetWaypoint:1
msgid ""
"GetWaypoint( (Trajectory)arg1, (int)index, (ConfigurationSpecification)spec) "
"-> object"
msgstr ""

# 6a15cca2c3134e3198340f2fcdbf9521
#: ../../docstring of openravepy.openravepy_int.Trajectory.GetWaypoints:1
msgid ""
"GetWaypoints( (Trajectory)arg1, (int)startindex, (int)endindex, "
"(ConfigurationSpecification)spec) -> object"
msgstr ""

# 8df9139ea7a045db9249b5203a45bd6c
#: ../../docstring of openravepy.openravepy_int.Trajectory.Insert:1
msgid ""
"Insert( (Trajectory)arg1, (int)index, (planningutils)data, (bool)overwrite) -"
"> None"
msgstr ""

# 1fad9c8d9eea47f3b826f96fafbd2a98
#: ../../docstring of openravepy.openravepy_int.Trajectory.Insert:3
msgid ""
"Insert( (Trajectory)arg1, (int)index, (planningutils)data, "
"(ConfigurationSpecification)spec) -> None"
msgstr ""

# d976ec3a049d4011ab1b81484d3b7244
#: ../../docstring of openravepy.openravepy_int.Trajectory.Insert:5
msgid ""
"Insert( (Trajectory)arg1, (int)index, (planningutils)data, "
"(ConfigurationSpecification)spec, (bool)overwrite) -> None"
msgstr ""

# 6a761e9f764d4474ad666f6457a16163
#: ../../docstring of openravepy.openravepy_int.Trajectory.Sample:1
msgid ""
"Sample( (Trajectory)arg1, (float)time, (ConfigurationSpecification)spec) -> "
"object"
msgstr ""

# eb11736a12ac49d2856f21183e267220
#: ../../docstring of openravepy.openravepy_int.TriMesh:3
msgid ""
"__init__( (object)arg1, (planningutils)vertices, (planningutils)indices) -> "
"None"
msgstr ""

# 7aa256a7910a41429491daaad4654be3
#: ../../docstring of openravepy.openravepy_int.UserData.Close:1
msgid "force releasing the user handle point."
msgstr ""

# c4b06c34fb774a638afe9d93c2245f82
# b4fb36a04eaa4471b3a52e80873da2f2
#: ../../docstring of openravepy.openravepy_int.UserData.close:1
#: openravepy.openravepy_int.VoidHandle.close:1
msgid "deprecated"
msgstr ""

# 0616653c1a244442aa7c7a54edcb7e16
#: ../../docstring of openravepy.openravepy_int.Viewer.SetCamera:1
msgid ""
"SetCamera( (Viewer)arg1, (planningutils)transform, (float)focalDistance) -> "
"None"
msgstr ""

# 24e136c3741248bc88b47fe39d1ee44f
#: ../../docstring of openravepy.openravepy_int.VoidPointer:1
msgid "Holds auto-managed resources, deleting it releases its shared data."
msgstr ""

# f268fd1278654678938029699af45b11
#: ../../docstring of openravepy.openravepy_int.planningutils.DHParameter:5
msgid ""
"__init__( (object)arg1, (planningutils)joint, (int)parentindex, "
"(planningutils)transform, (float)d, (float)a, (float)theta, (float)alpha) -> "
"None"
msgstr ""

# c2e3b67a19354f7ea327a3e13a5718ae
#: ../../docstring of
#: openravepy.openravepy_int.planningutils.ManipulatorIKGoalSampler:1
msgid ""
"__init__( (object)arg1, (planningutils)manip, (planningutils)"
"parameterizations, (int)nummaxsamples, (int)nummaxtries, (float)jitter) -> "
"None"
msgstr ""

# 9c8ddf4609954dd19621d8e3a5f6b7e1
#: ../../source/openravepy/pyANN.rst:2
msgid ":mod:`pyANN` Module"
msgstr ""

# c5cb120a2f574aaab8a2b5e1c5bd132e
#: ../../openravepy/pyANN.py:docstring of openravepy.pyANN:1
msgid "Imports ANN extentions"
msgstr ""

# 3f41c18a13c541beb8a7debca8e5371f
# 78403eb99c424039b9dabf69b890e2a4
#: ../../openravepy/pyANN.py:docstring of openravepy.pyANN.max_pts_visit:2
#: ../../docstring openravepy.pyANN_int.max_pts_visit:2
msgid "void max_pts_visit(int)"
msgstr ""

# 5431074f5c164359a442189d49bb5f8b
#: ../../openravepy/pyANN.py:docstring of openravepy.pyANN.pyann_exception:1
msgid "wrap up the C++ pyann_exception"
msgstr ""

# f0ab6c3411ae436fb51bf1010393fb0c
#: ../../source/openravepy/pyANN_int.rst:2
msgid ":mod:`pyANN_int` Module"
msgstr ""

# 0a8c167f19c5424fb358982f4f198d55
#: ../../docstring of openravepy.pyANN_int.KDTree:1
msgid "__init__( (object)arg1) -> None :"
msgstr ""

# 3e805ce773114cccb263330af5ed1ef2
#: ../../docstring of openravepy.pyANN_int.KDTree:4
msgid "void __init__(_object*)"
msgstr ""

# 9bbb42b29b8b4b7e84c4026b4a19f257
#: ../../docstring of openravepy.pyANN_int.KDTree:6
msgid "__init__( (planningutils)arg1, (planningutils)arg2) -> object :"
msgstr ""

# 910aae0723c048dba7dc483762b64281
#: ../../docstring of openravepy.pyANN_int.KDTree:9
msgid "void* __init__(boost::python::api::object,boost::python::api::object)"
msgstr ""

# 4bbee9b7b260445d98da943229d55d98
#: ../../docstring of openravepy.pyANN_int.KDTree.dim:2
msgid "int dim(ANNkd_tree {lvalue})"
msgstr ""

# d907a75f46bc4d1ca18ddd97157323dc
#: ../../docstring of openravepy.pyANN_int.KDTree.kFRSearch:2
msgid ""
"boost::python::api::object kFRSearch(ANNkd_tree {lvalue},boost::python::api::"
"object,double,int,double)"
msgstr ""

# 49c7f17b3aef4eee93cac4eeb5261e77
#: ../../docstring of openravepy.pyANN_int.KDTree.kFRSearchArray:2
msgid ""
"boost::python::api::object kFRSearchArray(ANNkd_tree {lvalue},boost::python::"
"api::object,double,int,double)"
msgstr ""

# 14dcf17230b0409abb1e642b74dd2089
#: ../../docstring of openravepy.pyANN_int.KDTree.kPriSearch:2
msgid ""
"boost::python::api::object kPriSearch(ANNkd_tree {lvalue},boost::python::"
"api::object,int,double)"
msgstr ""

# 9201a9b31b0744219706ddacd6489e45
#: ../../docstring of openravepy.pyANN_int.KDTree.kPriSearchArray:2
msgid ""
"boost::python::api::object kPriSearchArray(ANNkd_tree {lvalue},boost::"
"python::api::object,int,double)"
msgstr ""

# 17b791a7b68b42a1a0e9a9146ce85ac0
#: ../../docstring of openravepy.pyANN_int.KDTree.kSearch:2
msgid ""
"boost::python::api::object kSearch(ANNkd_tree {lvalue},boost::python::api::"
"object,int,double)"
msgstr ""

# d845121d4ed44a219876d5e947fb958a
#: ../../docstring of openravepy.pyANN_int.KDTree.kSearchArray:2
msgid ""
"boost::python::api::object kSearchArray(ANNkd_tree {lvalue},boost::python::"
"api::object,int,double)"
msgstr ""
