#define IKFAST_NAMESPACE ik_pr2_leftarm_torso
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2014-10-08 15:46:18.070939
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[1]);
x1=IKcos(j[4]);
x2=IKcos(j[2]);
x3=IKsin(j[4]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[6]);
x11=IKcos(j[6]);
x12=IKsin(j[7]);
x13=IKcos(j[7]);
x14=((1.0)*x1);
x15=((1.0)*x3);
x16=((0.321)*x1);
x17=((1.0)*x6);
x18=((0.321)*x5);
x19=((1.0)*x8);
x20=((1.0)*x9);
x21=((1.0)*x10);
x22=((0.321)*x6);
x23=((1.0)*x11);
x24=(x2*x7);
x25=((-1.0)*x3);
x26=(x2*x5);
x27=((-1.0)*x10);
x28=(x0*x2);
x29=((-1.0)*x1);
x30=(x0*x4);
x31=((-1.0)*x11);
x32=(x2*x6);
x33=(x5*x7);
x34=(x4*x7);
x35=(x15*x28);
x36=(x14*x32);
x37=(((x30*x5))+(((-1.0)*x17*x7)));
x38=(((x0*x5))+(((-1.0)*x17*x34)));
x39=(((x0*x6))+((x33*x4)));
x40=(x36+(((-1.0)*x15*x4)));
x41=((((-1.0)*x33))+(((-1.0)*x17*x30)));
x42=(x37*x9);
x43=(((x14*x4))+((x15*x32)));
x44=(x39*x8);
x45=((1.0)*x41);
x46=(x40*x9);
x47=(x1*x41);
x48=(((x26*x9))+((x8*(((((-1.0)*x36))+((x3*x4)))))));
x49=((((-1.0)*x14*x38))+((x15*x24)));
x50=(x49*x9);
x51=(((x8*((((x1*x38))+((x24*x25))))))+((x39*x9)));
x52=(((x8*((x47+((x25*x28))))))+x42);
x53=((((-1.0)*x21*x43))+(((-1.0)*x23*x48)));
x54=(((x31*x51))+((x27*((((x24*x29))+((x25*x38)))))));
eerot[0]=(((x10*((x42+((x8*(((((-1.0)*x35))+x47))))))))+((x11*((((x1*x28))+((x3*x41)))))));
eerot[1]=((((-1.0)*x12*((((x21*(((((-1.0)*x15*x41))+(((-1.0)*x14*x28))))))+((x23*x52))))))+((x13*((((x9*((((x29*x41))+x35))))+((x37*x8)))))));
eerot[2]=((((-1.0)*x12*((((x19*x37))+((x20*(((((-1.0)*x14*x41))+x35))))))))+((x13*((((x27*((((x28*x29))+((x25*x41))))))+((x31*x52)))))));
eetrans[0]=((-0.05)+(((0.1)*x0))+((x16*x28))+((x3*(((((-1.0)*x18*x7))+(((-1.0)*x22*x30))))))+(((0.4)*x28)));
eerot[3]=(((x10*x51))+((x11*((((x1*x24))+((x3*x38)))))));
eerot[4]=(((x13*((x44+x50))))+((x12*x54)));
eerot[5]=(((x13*x54))+((x12*(((((-1.0)*x20*x49))+(((-1.0)*x19*x39)))))));
eetrans[1]=((0.188)+(((0.1)*x7))+((x16*x24))+(((0.4)*x24))+((x3*((((x0*x18))+(((-1.0)*x22*x34)))))));
eerot[6]=(((x10*x48))+(((-1.0)*x11*x43)));
eerot[7]=(((x12*x53))+((x13*((x46+((x26*x8)))))));
eerot[8]=(((x13*x53))+((x12*(((((-1.0)*x20*x40))+(((-1.0)*x19*x26)))))));
eetrans[2]=((0.739675)+(((-1.0)*x2*x22*x3))+(((-1.0)*x16*x4))+(((-0.4)*x4))+j[0]);
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j18,cj18,sj18,htj18,j18mul,j19,cj19,sj19,htj19,j19mul,j20,cj20,sj20,htj20,j20mul,j21,cj21,sj21,htj21,j21mul,j12,cj12,sj12,htj12,j17,cj17,sj17,htj17,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij12[2], _nj12,_ij17[2], _nj17;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1;  _ij12[0] = -1; _ij12[1] = -1; _nj12 = 0;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]), htj12=tan(pfree[0]*0.5);
j17=pfree[1]; cj17=cos(pfree[1]); sj17=sin(pfree[1]), htj17=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((0.05)+px);
new_r10=((-1.0)*r12);
new_r11=r11;
new_r12=r10;
new_py=((-0.188)+py);
new_r20=((-1.0)*r22);
new_r21=r21;
new_r22=r20;
new_pz=((-0.739675)+(((-1.0)*j12))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x58=((0.2)*px);
IkReal x59=((1.0)*pp);
IkReal x60=((0.509841)+x58+(((-1.0)*x59)));
IkReal x61=((-0.003759)+x58+(((-1.0)*x59)));
IkReal x62=(x59+x58);
IkReal x63=((0.509841)+(((-1.0)*x62)));
IkReal x64=((-0.003759)+(((-1.0)*x62)));
IkReal gconst0=x60;
IkReal gconst1=x61;
IkReal gconst2=x60;
IkReal gconst3=x61;
IkReal gconst4=x63;
IkReal gconst5=x64;
IkReal gconst6=x63;
IkReal gconst7=x64;
IkReal x65=py*py;
IkReal x66=sj17*sj17;
IkReal x67=px*px;
IkReal x68=((1.0)*gconst4);
IkReal x69=(gconst5*py);
IkReal x70=((4.0)*px);
IkReal x71=(gconst0*gconst3);
IkReal x72=(gconst1*gconst2);
IkReal x73=((2.0)*gconst5);
IkReal x74=((1.0)*gconst0);
IkReal x75=(gconst1*gconst7);
IkReal x76=(gconst0*gconst6);
IkReal x77=(gconst1*gconst3);
IkReal x78=(gconst4*gconst7);
IkReal x79=(gconst6*py);
IkReal x80=((2.0)*gconst0);
IkReal x81=(gconst0*gconst7);
IkReal x82=((2.0)*gconst4);
IkReal x83=(gconst3*gconst5);
IkReal x84=(gconst2*gconst5);
IkReal x85=(gconst3*gconst4);
IkReal x86=(gconst5*gconst6);
IkReal x87=(gconst2*gconst4);
IkReal x88=(gconst1*gconst6);
IkReal x89=(px*py);
IkReal x90=(gconst1*py);
IkReal x91=(gconst2*py);
IkReal x92=(gconst5*gconst7);
IkReal x93=((1.05513984)*x89);
IkReal x94=(gconst6*x65);
IkReal x95=((0.3297312)*x66);
IkReal x96=((4.0)*x67);
IkReal x97=(gconst2*x65);
IkReal x98=((2.0)*x65);
IkReal x99=((1.0)*x65);
IkReal x100=((0.824328)*x66);
IkReal x101=((0.412164)*x66);
IkReal x102=((0.1648656)*x66);
IkReal x103=(x65*x78);
IkReal x104=(x65*x86);
IkReal x105=(x65*x84);
IkReal x106=(x65*x85);
IkReal x107=(x65*x81);
IkReal x108=(x65*x88);
IkReal x109=((0.0834355125792)*py*x66);
IkReal x110=(x65*x72);
IkReal x111=(x65*x71);
IkReal x112=(x65*x66);
IkReal x113=(x101*x86);
IkReal x114=(x92*x99);
IkReal x115=(x68*x94);
IkReal x116=(py*x70*x87);
IkReal x117=(py*x70*x75);
IkReal x118=(gconst3*x69*x70);
IkReal x119=(py*x70*x76);
IkReal x120=(py*x70*x85);
IkReal x121=(py*x70*x81);
IkReal x122=(gconst2*x69*x70);
IkReal x123=(gconst1*x70*x79);
IkReal x124=(x75*x99);
IkReal x125=(x68*x97);
IkReal x126=(x101*x88);
IkReal x127=((0.06594624)*x112);
IkReal x128=(x74*x94);
IkReal x129=(x101*x84);
IkReal x130=(x83*x99);
IkReal x131=(pp*py*x95);
IkReal x132=((0.06594624)*x66*x89);
IkReal x133=(x74*x97);
IkReal x134=(x77*x99);
IkReal x135=(x101*x72);
IkReal x136=(x111+x110);
IkReal x137=(x104+x103);
IkReal x138=(x113+x115+x114);
IkReal x139=(x135+x134+x133);
IkReal x140=(x108+x105+x106+x107);
IkReal x141=(x122+x123+x120+x121);
IkReal x142=(x117+x116+x119+x118);
IkReal x143=(x130+x126+x127+x124+x125+x128+x129);
op[0]=(x137+(((-1.0)*x138)));
op[1]=((((-1.0)*x109))+x131+x132+(((-1.0)*x93)));
op[2]=((((-1.0)*x143))+(((-1.0)*gconst4*gconst6*x96))+((x82*x94))+(((-1.0)*x73*x94))+((x78*x96))+((x86*x96))+x140+(((-1.0)*x78*x98))+(((-1.0)*x92*x96))+(((-1.0)*x100*x86))+((gconst7*x65*x73)));
op[3]=((((-1.0)*x142))+(((-1.0)*x102*x91))+(((-1.0)*x102*x90))+(((-1.0)*gconst6*x69*x70))+(((-1.0)*py*x70*x78))+x141+((gconst7*x69*x70))+(((-1.0)*x79*x95))+(((-1.0)*x69*x95))+((gconst4*x70*x79)));
op[4]=(((x82*x97))+((x81*x96))+(((-1.0)*x73*x97))+((gconst3*x65*x73))+(((-1.0)*x83*x96))+(((-0.13189248)*x112))+((x85*x96))+x137+x136+(((-1.0)*x87*x96))+(((-1.0)*x138))+(((-1.0)*x139))+((x75*x98))+((x88*x96))+((x76*x98))+(((-1.0)*x76*x96))+(((-1.0)*x100*x84))+(((-1.0)*x100*x88))+(((-1.0)*x75*x96))+(((-1.0)*gconst3*x65*x82))+(((-1.0)*x88*x98))+(((-1.0)*gconst7*x65*x80))+((x84*x96)));
op[5]=((((-1.0)*x141))+(((-1.0)*x90*x95))+(((-1.0)*gconst0*x70*x91))+(((-1.0)*x91*x95))+(((-1.0)*py*x70*x77))+x142+((py*x70*x72))+((py*x70*x71))+(((-1.0)*x102*x69))+(((-1.0)*x102*x79)));
op[6]=((((-1.0)*x143))+((x71*x96))+(((-1.0)*gconst0*gconst2*x96))+(((-1.0)*x71*x98))+(((-1.0)*x72*x98))+(((-1.0)*x77*x96))+((x72*x96))+x140+(((-1.0)*x100*x72))+((x80*x97))+((x77*x98)));
op[7]=((((-1.0)*x109))+x131+(((-1.0)*x132))+x93);
op[8]=(x136+(((-1.0)*x139)));
polyroots8(op,zeror,numroots);
IkReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j16eval[2];
IkReal x144=py*py;
IkReal x145=cj15*cj15;
IkReal x146=px*px;
IkReal x147=pz*pz;
IkReal x148=((4.0)*sj17);
IkReal x149=((20.0)*sj17);
IkReal x150=(py*sj15);
IkReal x151=(cj15*px);
IkReal x152=((100.0)*sj17);
IkReal x153=((0.8)*sj17);
IkReal x154=(x144*x145);
IkReal x155=(x145*x146);
j16eval[0]=(((x149*x150))+((x149*x151))+(((-1.0)*x144*x152))+((x152*x154))+(((-1.0)*x152*x155))+(((-1.0)*sj17))+(((-1.0)*x147*x152))+(((-200.0)*sj17*x150*x151)));
j16eval[1]=IKsign((((x150*x153))+(((-1.0)*x144*x148))+((x151*x153))+(((-1.0)*x147*x148))+(((-1.0)*x148*x155))+(((-8.0)*sj17*x150*x151))+((x148*x154))+(((-0.04)*sj17))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x156=(((px*sj15))+(((-1.0)*cj15*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=x156;
evalcond[2]=x156;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal j16eval[3];
sj17=0;
cj17=1.0;
j17=0;
IkReal x157=((321000.0)*sj18);
IkReal x158=(py*sj15);
IkReal x159=((321000.0)*cj18);
IkReal x160=(cj15*px);
j16eval[0]=((1.02430295950156)+cj18);
j16eval[1]=IKsign(((263041.0)+(((256800.0)*cj18))));
j16eval[2]=((IKabs(((-40000.0)+(((400000.0)*x160))+(((-1.0)*pz*x157))+(((400000.0)*x158))+(((-32100.0)*cj18))+((x158*x159))+((x159*x160)))))+(IKabs(((((-1.0)*x157*x160))+(((-1.0)*x157*x158))+(((-1.0)*pz*x159))+(((-400000.0)*pz))+(((32100.0)*sj18))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=0;
cj17=1.0;
j17=0;
IkReal x161=(cj15*px);
IkReal x162=((1000.0)*pz);
IkReal x163=(py*sj15);
IkReal x164=((10.0)*cj18);
IkReal x165=((321.0)*cj18);
IkReal x166=(pz*sj18);
j16eval[0]=((1.24610591900312)+(((-1.0)*x163*x164))+(((-1.0)*x161*x164))+cj18+(((-10.0)*x166))+(((-12.4610591900312)*x161))+(((-12.4610591900312)*x163)));
j16eval[1]=IKsign(((40.0)+(((-400.0)*x161))+(((-400.0)*x163))+(((-1.0)*x163*x165))+(((32.1)*cj18))+(((-1.0)*x161*x165))+(((-321.0)*x166))));
j16eval[2]=((IKabs(((-160.0)+((pz*x162))+(((-256.8)*cj18))+(((-103.041)*(cj18*cj18))))))+(IKabs((((x161*x162))+(((-100.0)*pz))+(((103.041)*cj18*sj18))+((x162*x163))+(((128.4)*sj18))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=0;
cj17=1.0;
j17=0;
IkReal x167=cj15*cj15;
IkReal x168=py*py;
IkReal x169=px*px;
IkReal x170=pz*pz;
IkReal x171=(py*sj15);
IkReal x172=((321.0)*sj18);
IkReal x173=(cj15*px);
IkReal x174=((321.0)*cj18);
IkReal x175=((100.0)*x167);
IkReal x176=((1000.0)*x167);
j16eval[0]=((-1.0)+(((-100.0)*x168))+(((-100.0)*x170))+((x168*x175))+(((20.0)*x171))+(((20.0)*x173))+(((-200.0)*x171*x173))+(((-1.0)*x169*x175)));
j16eval[1]=IKsign(((-10.0)+(((-2000.0)*x171*x173))+((x168*x176))+(((-1000.0)*x168))+(((-1000.0)*x170))+(((-1.0)*x169*x176))+(((200.0)*x173))+(((200.0)*x171))));
j16eval[2]=((IKabs((((pz*x174))+((x172*x173))+(((400.0)*pz))+((x171*x172))+(((-32.1)*sj18)))))+(IKabs(((40.0)+((pz*x172))+(((-400.0)*x173))+(((-400.0)*x171))+(((32.1)*cj18))+(((-1.0)*x171*x174))+(((-1.0)*x173*x174))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x177=py*py;
IkReal x178=cj15*cj15;
IkReal x179=(py*sj15);
IkReal x180=((321.0)*sj18);
IkReal x181=(cj15*px);
IkReal x182=((321.0)*cj18);
IkReal x183=((1000.0)*x178);
CheckValue<IkReal> x184=IKPowWithIntegerCheck(IKsign(((-10.0)+((x177*x183))+(((-1.0)*x183*(px*px)))+(((-2000.0)*x179*x181))+(((-1000.0)*(pz*pz)))+(((-1000.0)*x177))+(((200.0)*x181))+(((200.0)*x179)))),-1);
if(!x184.valid){
continue;
}
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal((((pz*x182))+((x180*x181))+((x179*x180))+(((400.0)*pz))+(((-32.1)*sj18)))),((40.0)+((pz*x180))+(((-400.0)*x181))+(((-400.0)*x179))+(((32.1)*cj18))+(((-1.0)*x179*x182))+(((-1.0)*x181*x182))),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x184.value)))+(x185.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x186=IKsin(j16);
IkReal x187=IKcos(j16);
IkReal x188=((0.321)*sj18);
IkReal x189=((0.321)*cj18);
IkReal x190=(py*sj15);
IkReal x191=(cj15*px);
IkReal x192=(pz*x186);
IkReal x193=(x187*x191);
evalcond[0]=(((x186*x189))+(((0.4)*x186))+((x187*x188))+pz);
evalcond[1]=(((pz*x187))+((x186*x190))+((x186*x191))+x188+(((-0.1)*x186)));
evalcond[2]=((0.1)+(((0.4)*x187))+(((-1.0)*x186*x188))+((x187*x189))+(((-1.0)*x191))+(((-1.0)*x190)));
evalcond[3]=((0.4)+(((0.1)*x187))+(((-1.0)*x193))+x192+x189+(((-1.0)*x187*x190)));
evalcond[4]=((-0.066959)+(((0.2)*x191))+(((0.2)*x190))+(((-1.0)*pp))+(((0.8)*x187*x190))+(((0.8)*x193))+(((-0.08)*x187))+(((-0.8)*x192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x619=(cj15*px);
IkReal x620=((1000.0)*pz);
IkReal x621=((321.0)*cj18);
IkReal x622=(py*sj15);
CheckValue<IkReal> x623 = IKatan2WithCheck(IkReal(((((-100.0)*pz))+(((103.041)*cj18*sj18))+((x619*x620))+(((128.4)*sj18))+((x620*x622)))),((-160.0)+((pz*x620))+(((-256.8)*cj18))+(((-103.041)*(cj18*cj18)))),IKFAST_ATAN2_MAGTHRESH);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624=IKPowWithIntegerCheck(IKsign(((40.0)+(((-1.0)*x621*x622))+(((-400.0)*x622))+(((-321.0)*pz*sj18))+(((32.1)*cj18))+(((-1.0)*x619*x621))+(((-400.0)*x619)))),-1);
if(!x624.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x623.value)+(((1.5707963267949)*(x624.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x625=IKsin(j16);
IkReal x626=IKcos(j16);
IkReal x627=((0.321)*sj18);
IkReal x628=((0.321)*cj18);
IkReal x629=(py*sj15);
IkReal x630=(cj15*px);
IkReal x631=(pz*x625);
IkReal x632=(x626*x630);
evalcond[0]=(((x625*x628))+pz+(((0.4)*x625))+((x626*x627)));
evalcond[1]=(((pz*x626))+(((-0.1)*x625))+((x625*x630))+((x625*x629))+x627);
evalcond[2]=((0.1)+(((-1.0)*x625*x627))+(((-1.0)*x629))+(((-1.0)*x630))+(((0.4)*x626))+((x626*x628)));
evalcond[3]=((0.4)+x628+x631+(((0.1)*x626))+(((-1.0)*x632))+(((-1.0)*x626*x629)));
evalcond[4]=((-0.066959)+(((0.2)*x630))+(((0.2)*x629))+(((-0.08)*x626))+(((-1.0)*pp))+(((0.8)*x632))+(((-0.8)*x631))+(((0.8)*x626*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x633=((321000.0)*sj18);
IkReal x634=(py*sj15);
IkReal x635=((321000.0)*cj18);
IkReal x636=(cj15*px);
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign(((263041.0)+(((256800.0)*cj18)))),-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x635))+(((-1.0)*x633*x634))+(((-1.0)*x633*x636))+(((-400000.0)*pz))+(((32100.0)*sj18)))),((-40000.0)+(((-1.0)*pz*x633))+((x634*x635))+((x635*x636))+(((-32100.0)*cj18))+(((400000.0)*x636))+(((400000.0)*x634))),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x637.value)))+(x638.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x639=IKsin(j16);
IkReal x640=IKcos(j16);
IkReal x641=((0.321)*sj18);
IkReal x642=((0.321)*cj18);
IkReal x643=(py*sj15);
IkReal x644=(cj15*px);
IkReal x645=(pz*x639);
IkReal x646=(x640*x644);
evalcond[0]=(((x639*x642))+((x640*x641))+pz+(((0.4)*x639)));
evalcond[1]=((((-0.1)*x639))+((x639*x644))+((x639*x643))+((pz*x640))+x641);
evalcond[2]=((0.1)+(((-1.0)*x644))+(((-1.0)*x643))+(((-1.0)*x639*x641))+((x640*x642))+(((0.4)*x640)));
evalcond[3]=((0.4)+(((-1.0)*x646))+(((-1.0)*x640*x643))+(((0.1)*x640))+x645+x642);
evalcond[4]=((-0.066959)+(((-0.8)*x645))+(((-1.0)*pp))+(((-0.08)*x640))+(((0.2)*x643))+(((0.2)*x644))+(((0.8)*x646))+(((0.8)*x640*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x647=(cj15*py);
IkReal x648=(px*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x647))+x648);
evalcond[2]=((((-1.0)*x648))+x647);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal j16eval[3];
sj17=0;
cj17=-1.0;
j17=3.14159265358979;
IkReal x649=((321000.0)*pz);
IkReal x650=((321000.0)*py*sj15);
IkReal x651=((321000.0)*cj15*px);
j16eval[0]=((-1.02430295950156)+(((-1.0)*cj18)));
j16eval[1]=IKsign(((-263041.0)+(((-256800.0)*cj18))));
j16eval[2]=((IKabs(((40000.0)+(((32100.0)*cj18))+(((-1.0)*sj18*x649))+(((-400000.0)*cj15*px))+(((-400000.0)*py*sj15))+(((-1.0)*cj18*x650))+(((-1.0)*cj18*x651)))))+(IKabs((((cj18*x649))+(((-1.0)*sj18*x651))+(((-1.0)*sj18*x650))+(((400000.0)*pz))+(((32100.0)*sj18))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=0;
cj17=-1.0;
j17=3.14159265358979;
IkReal x652=(cj15*px);
IkReal x653=((1000.0)*pz);
IkReal x654=(py*sj15);
IkReal x655=((10.0)*cj18);
IkReal x656=((321.0)*cj18);
IkReal x657=(pz*sj18);
j16eval[0]=((-1.24610591900312)+(((-10.0)*x657))+(((12.4610591900312)*x654))+(((12.4610591900312)*x652))+((x652*x655))+((x654*x655))+(((-1.0)*cj18)));
j16eval[1]=((IKabs(((160.0)+(((256.8)*cj18))+(((-1.0)*pz*x653))+(((103.041)*(cj18*cj18))))))+(IKabs(((((100.0)*pz))+(((103.041)*cj18*sj18))+(((128.4)*sj18))+(((-1.0)*x653*x654))+(((-1.0)*x652*x653))))));
j16eval[2]=IKsign(((-40.0)+(((400.0)*x654))+(((400.0)*x652))+(((-321.0)*x657))+((x652*x656))+((x654*x656))+(((-32.1)*cj18))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj17=0;
cj17=-1.0;
j17=3.14159265358979;
IkReal x658=cj15*cj15;
IkReal x659=py*py;
IkReal x660=px*px;
IkReal x661=pz*pz;
IkReal x662=(py*sj15);
IkReal x663=((321.0)*cj18);
IkReal x664=(cj15*px);
IkReal x665=((321.0)*sj18);
IkReal x666=(x658*x660);
IkReal x667=(x658*x659);
j16eval[0]=((-1.0)+(((-200.0)*x662*x664))+(((100.0)*x667))+(((20.0)*x662))+(((20.0)*x664))+(((-100.0)*x659))+(((-100.0)*x666))+(((-100.0)*x661)));
j16eval[1]=IKsign(((-10.0)+(((-1000.0)*x661))+(((-1000.0)*x666))+(((1000.0)*x667))+(((200.0)*x664))+(((200.0)*x662))+(((-1000.0)*x659))+(((-2000.0)*x662*x664))));
j16eval[2]=((IKabs(((((32.1)*sj18))+(((-1.0)*x662*x665))+(((400.0)*pz))+((pz*x663))+(((-1.0)*x664*x665)))))+(IKabs(((40.0)+(((-1.0)*x662*x663))+(((-1.0)*x663*x664))+(((32.1)*cj18))+(((-1.0)*pz*x665))+(((-400.0)*x664))+(((-400.0)*x662))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x668=py*py;
IkReal x669=cj15*cj15;
IkReal x670=(py*sj15);
IkReal x671=((321.0)*sj18);
IkReal x672=(cj15*px);
IkReal x673=((321.0)*cj18);
IkReal x674=((1000.0)*x669);
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal((((pz*x673))+(((32.1)*sj18))+(((400.0)*pz))+(((-1.0)*x670*x671))+(((-1.0)*x671*x672)))),((40.0)+(((32.1)*cj18))+(((-1.0)*pz*x671))+(((-1.0)*x670*x673))+(((-1.0)*x672*x673))+(((-400.0)*x670))+(((-400.0)*x672))),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign(((-10.0)+(((-1000.0)*x668))+(((-1000.0)*(pz*pz)))+(((-2000.0)*x670*x672))+(((200.0)*x672))+(((200.0)*x670))+(((-1.0)*x674*(px*px)))+((x668*x674)))),-1);
if(!x676.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x675.value)+(((1.5707963267949)*(x676.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x677=IKsin(j16);
IkReal x678=IKcos(j16);
IkReal x679=((0.321)*sj18);
IkReal x680=((0.321)*cj18);
IkReal x681=(cj15*px);
IkReal x682=(py*sj15);
IkReal x683=(pz*x677);
IkReal x684=((1.0)*x677);
IkReal x685=((1.0)*x678);
IkReal x686=(x678*x681);
evalcond[0]=((((-1.0)*x678*x679))+(((0.4)*x677))+((x677*x680))+pz);
evalcond[1]=((0.1)+((x678*x680))+(((0.4)*x678))+((x677*x679))+(((-1.0)*x681))+(((-1.0)*x682)));
evalcond[2]=((0.4)+(((0.1)*x678))+(((-1.0)*x681*x685))+x683+x680+(((-1.0)*x682*x685)));
evalcond[3]=((((0.1)*x677))+(((-1.0)*x681*x684))+x679+(((-1.0)*x682*x684))+(((-1.0)*pz*x685)));
evalcond[4]=((-0.066959)+(((-0.08)*x678))+(((0.2)*x681))+(((0.2)*x682))+(((-1.0)*pp))+(((0.8)*x686))+(((0.8)*x678*x682))+(((-0.8)*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x687=(cj15*px);
IkReal x688=((1000.0)*pz);
IkReal x689=((321.0)*cj18);
IkReal x690=(py*sj15);
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(((-40.0)+(((400.0)*x690))+((x687*x689))+(((-321.0)*pz*sj18))+((x689*x690))+(((-32.1)*cj18))+(((400.0)*x687)))),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((((-1.0)*x687*x688))+(((100.0)*pz))+(((103.041)*cj18*sj18))+(((-1.0)*x688*x690))+(((128.4)*sj18)))),((160.0)+(((256.8)*cj18))+(((-1.0)*pz*x688))+(((103.041)*(cj18*cj18)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x691.value)))+(x692.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x693=IKsin(j16);
IkReal x694=IKcos(j16);
IkReal x695=((0.321)*sj18);
IkReal x696=((0.321)*cj18);
IkReal x697=(cj15*px);
IkReal x698=(py*sj15);
IkReal x699=(pz*x693);
IkReal x700=((1.0)*x693);
IkReal x701=((1.0)*x694);
IkReal x702=(x694*x697);
evalcond[0]=(((x693*x696))+(((0.4)*x693))+pz+(((-1.0)*x694*x695)));
evalcond[1]=((0.1)+((x694*x696))+((x693*x695))+(((0.4)*x694))+(((-1.0)*x698))+(((-1.0)*x697)));
evalcond[2]=((0.4)+(((0.1)*x694))+x696+x699+(((-1.0)*x698*x701))+(((-1.0)*x697*x701)));
evalcond[3]=((((-1.0)*pz*x701))+(((0.1)*x693))+x695+(((-1.0)*x698*x700))+(((-1.0)*x697*x700)));
evalcond[4]=((-0.066959)+(((0.8)*x694*x698))+(((-1.0)*pp))+(((-0.08)*x694))+(((-0.8)*x699))+(((0.8)*x702))+(((0.2)*x697))+(((0.2)*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x703=((321000.0)*pz);
IkReal x704=((321000.0)*py*sj15);
IkReal x705=((321000.0)*cj15*px);
CheckValue<IkReal> x706=IKPowWithIntegerCheck(IKsign(((-263041.0)+(((-256800.0)*cj18)))),-1);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal(((((-1.0)*sj18*x704))+(((-1.0)*sj18*x705))+((cj18*x703))+(((400000.0)*pz))+(((32100.0)*sj18)))),((40000.0)+(((32100.0)*cj18))+(((-1.0)*sj18*x703))+(((-400000.0)*cj15*px))+(((-400000.0)*py*sj15))+(((-1.0)*cj18*x704))+(((-1.0)*cj18*x705))),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x706.value)))+(x707.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x708=IKsin(j16);
IkReal x709=IKcos(j16);
IkReal x710=((0.321)*sj18);
IkReal x711=((0.321)*cj18);
IkReal x712=(cj15*px);
IkReal x713=(py*sj15);
IkReal x714=(pz*x708);
IkReal x715=((1.0)*x708);
IkReal x716=((1.0)*x709);
IkReal x717=(x709*x712);
evalcond[0]=((((0.4)*x708))+(((-1.0)*x709*x710))+pz+((x708*x711)));
evalcond[1]=((0.1)+(((0.4)*x709))+(((-1.0)*x713))+(((-1.0)*x712))+((x709*x711))+((x708*x710)));
evalcond[2]=((0.4)+(((0.1)*x709))+(((-1.0)*x712*x716))+x711+x714+(((-1.0)*x713*x716)));
evalcond[3]=((((-1.0)*pz*x716))+(((0.1)*x708))+(((-1.0)*x712*x715))+x710+(((-1.0)*x713*x715)));
evalcond[4]=((-0.066959)+(((0.8)*x709*x713))+(((-1.0)*pp))+(((-0.8)*x714))+(((0.2)*x712))+(((0.2)*x713))+(((0.8)*x717))+(((-0.08)*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16, j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(sj17,-1);
if(!x718.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x718.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x718.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))))+IKsqr(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x718.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))), ((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=(((px*sj15))+(((-1.0)*cj15*py))+(((0.321)*sj17*(IKsin(j18)))));
evalcond[1]=((0.253041)+(((0.2)*cj15*px))+(((0.2)*py*sj15))+(((-1.0)*pp))+(((0.2568)*(IKcos(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
IkReal x719=(cj15*px);
IkReal x720=((1000.0)*pz);
IkReal x721=(py*sj15);
IkReal x722=((10.0)*cj18);
IkReal x723=((321.0)*cj18);
IkReal x724=(cj17*sj18);
IkReal x725=(pz*x724);
j16eval[0]=((-1.24610591900312)+((x721*x722))+(((12.4610591900312)*x719))+(((12.4610591900312)*x721))+(((10.0)*x725))+((x719*x722))+(((-1.0)*cj18)));
j16eval[1]=((IKabs(((160.0)+(((256.8)*cj18))+(((-1.0)*pz*x720))+(((103.041)*(cj18*cj18))))))+(IKabs(((((-103.041)*cj18*x724))+(((100.0)*pz))+(((-1.0)*x720*x721))+(((-1.0)*x719*x720))+(((-128.4)*x724))))));
j16eval[2]=IKsign(((-40.0)+((x721*x723))+(((400.0)*x721))+(((321.0)*x725))+(((400.0)*x719))+(((-32.1)*cj18))+((x719*x723))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x726=cj17*cj17;
IkReal x727=cj18*cj18;
IkReal x728=(cj15*px);
IkReal x729=(py*sj15);
IkReal x730=((321000.0)*cj18);
IkReal x731=((321000.0)*cj17*sj18);
IkReal x732=((103041.0)*x727);
j16eval[0]=((1.5527799613746)+(((2.49221183800623)*cj18))+x726+x727+(((-1.0)*x726*x727)));
j16eval[1]=((IKabs(((-40000.0)+((x728*x730))+((x729*x730))+(((400000.0)*x729))+(((400000.0)*x728))+(((-32100.0)*cj18))+(((-1.0)*pz*x731)))))+(IKabs(((((32100.0)*cj17*sj18))+(((-400000.0)*pz))+(((-1.0)*pz*x730))+(((-1.0)*x728*x731))+(((-1.0)*x729*x731))))));
j16eval[2]=IKsign(((160000.0)+(((103041.0)*x726))+(((256800.0)*cj18))+x732+(((-1.0)*x726*x732))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x733=(cj17*sj18);
IkReal x734=(py*sj15);
IkReal x735=(cj18*pz);
IkReal x736=(cj15*px);
j16eval[0]=((((-10.0)*x733*x736))+(((-10.0)*x733*x734))+(((10.0)*x735))+x733+(((12.4610591900312)*pz)));
j16eval[1]=IKsign(((((321.0)*x735))+(((400.0)*pz))+(((-321.0)*x733*x734))+(((-321.0)*x733*x736))+(((32.1)*x733))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x737=(((px*sj15))+(((-1.0)*cj15*py))+(((0.321)*sj18)));
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j17), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=x737;
evalcond[2]=((0.253041)+(((0.2)*cj15*px))+(((0.2)*py*sj15))+(((-1.0)*pp))+(((0.2568)*cj18)));
evalcond[3]=x737;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x738=((-1.0)*py);
pz=0;
j17=1.5707963267949;
sj17=1.0;
cj17=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x738);
rxp0_1=(px*r20);
rxp1_0=(r21*x738);
rxp1_1=(px*r21);
rxp2_0=(r22*x738);
rxp2_1=(px*r22);
j16eval[0]=((1.0)+(((-10.0)*cj15*px))+(((-10.0)*py*sj15)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x739=((-1.0)*py);
pz=0;
j17=1.5707963267949;
sj17=1.0;
cj17=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x739);
rxp0_1=(px*r20);
rxp1_0=(r21*x739);
rxp1_1=(px*r21);
rxp2_0=(r22*x739);
rxp2_1=(px*r22);
j16eval[0]=((1.24610591900312)+cj18);
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x740=((((100.0)*(px*px)))+(((100.0)*(py*py))));
if((x740) < -0.00001)
continue;
IkReal x741=IKabs(IKsqrt(x740));
IkReal x747 = x740;
if(IKabs(x747)==0){
continue;
}
IkReal x742=pow(x747,-0.5);
CheckValue<IkReal> x748=IKPowWithIntegerCheck(x741,-1);
if(!x748.valid){
continue;
}
IkReal x743=x748.value;
IkReal x744=((10.0)*px*x742);
IkReal x745=((10.0)*py*x742);
if((((1.0)+(((-1.0)*(x743*x743))))) < -0.00001)
continue;
IkReal x746=IKsqrt(((1.0)+(((-1.0)*(x743*x743)))));
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
if( (x743) < -1-IKFAST_SINCOS_THRESH || (x743) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst24=((((-1.0)*(x749.value)))+(((-1.0)*(IKasin(x743)))));
IkReal gconst25=(((x744*x746))+((x743*x745)));
IkReal gconst26=((((-1.0)*x745*x746))+((x743*x744)));
if((((((100.0)*(px*px)))+(((100.0)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x750=IKPowWithIntegerCheck(IKabs(IKsqrt(((((100.0)*(px*px)))+(((100.0)*(py*py)))))),-1);
if(!x750.valid){
continue;
}
if( (x750.value) < -1-IKFAST_SINCOS_THRESH || (x750.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(x750.value))+j15+(x751.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x753=IKPowWithIntegerCheck(((0.1)+(((-1.0)*gconst25*py))+(((-1.0)*gconst26*px))),-1);
if(!x753.valid){
continue;
}
IkReal x752=x753.value;
cj16array[0]=((((-0.4)*x752))+(((-0.321)*cj18*x752)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x754=IKsin(j16);
IkReal x755=IKcos(j16);
IkReal x756=(gconst26*px);
IkReal x757=(gconst25*py);
IkReal x758=((0.321)*cj18);
IkReal x759=((0.8)*x755);
IkReal x760=((1.0)*x754);
evalcond[0]=((((0.4)*x754))+((x754*x758)));
evalcond[1]=((((-1.0)*x756*x760))+(((0.1)*x754))+(((-1.0)*x757*x760)));
evalcond[2]=((0.1)+(((-1.0)*x756))+(((-1.0)*x757))+((x755*x758))+(((0.4)*x755)));
evalcond[3]=((-0.066959)+((x756*x759))+(((-1.0)*(px*px)))+(((-0.08)*x755))+(((0.2)*x756))+(((0.2)*x757))+(((-1.0)*(py*py)))+((x757*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x761=((((100.0)*(px*px)))+(((100.0)*(py*py))));
IkReal x768 = x761;
if(IKabs(x768)==0){
continue;
}
IkReal x762=pow(x768,-0.5);
if((x761) < -0.00001)
continue;
IkReal x763=IKabs(IKsqrt(x761));
CheckValue<IkReal> x769=IKPowWithIntegerCheck(x763,-1);
if(!x769.valid){
continue;
}
IkReal x764=x769.value;
IkReal x765=((10.0)*px*x762);
IkReal x766=((10.0)*py*x762);
if((((1.0)+(((-1.0)*(x764*x764))))) < -0.00001)
continue;
IkReal x767=IKsqrt(((1.0)+(((-1.0)*(x764*x764)))));
if( (x764) < -1-IKFAST_SINCOS_THRESH || (x764) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(IKasin(x764))+(((-1.0)*(x770.value))));
IkReal gconst28=((((-1.0)*x765*x767))+((x764*x766)));
IkReal gconst29=(((x766*x767))+((x764*x765)));
if((((((100.0)*(px*px)))+(((100.0)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x771=IKPowWithIntegerCheck(IKabs(IKsqrt(((((100.0)*(px*px)))+(((100.0)*(py*py)))))),-1);
if(!x771.valid){
continue;
}
if( (x771.value) < -1-IKFAST_SINCOS_THRESH || (x771.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(x771.value))))+j15+(x772.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x774=IKPowWithIntegerCheck(((0.1)+(((-1.0)*gconst29*px))+(((-1.0)*gconst28*py))),-1);
if(!x774.valid){
continue;
}
IkReal x773=x774.value;
cj16array[0]=((((-0.4)*x773))+(((-0.321)*cj18*x773)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x775=IKsin(j16);
IkReal x776=IKcos(j16);
IkReal x777=(gconst29*px);
IkReal x778=((0.321)*cj18);
IkReal x779=(gconst28*py);
IkReal x780=((1.0)*x775);
IkReal x781=((0.8)*x776);
evalcond[0]=((((0.4)*x775))+((x775*x778)));
evalcond[1]=((((0.1)*x775))+(((-1.0)*x777*x780))+(((-1.0)*x779*x780)));
evalcond[2]=((0.1)+((x776*x778))+(((0.4)*x776))+(((-1.0)*x779))+(((-1.0)*x777)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+(((-0.08)*x776))+((x779*x781))+(((0.2)*x777))+(((0.2)*x779))+(((-1.0)*(py*py)))+((x777*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x783=IKPowWithIntegerCheck(((0.4)+(((0.321)*cj18))),-1);
if(!x783.valid){
continue;
}
IkReal x782=x783.value;
cj16array[0]=(((cj15*px*x782))+(((-0.1)*x782))+((py*sj15*x782)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x784=IKsin(j16);
IkReal x785=IKcos(j16);
IkReal x786=(cj15*px);
IkReal x787=((0.321)*cj18);
IkReal x788=(py*sj15);
IkReal x789=((1.0)*x788);
IkReal x790=((0.8)*x785);
evalcond[0]=(((x784*x787))+(((0.4)*x784)));
evalcond[1]=((((0.1)*x784))+(((-1.0)*x784*x786))+(((-1.0)*x784*x789)));
evalcond[2]=((0.4)+(((-1.0)*x785*x786))+(((0.1)*x785))+x787+(((-1.0)*x785*x789)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+((x786*x790))+((x788*x790))+(((-0.08)*x785))+(((0.2)*x786))+(((0.2)*x788))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x792=IKPowWithIntegerCheck(((0.1)+(((-1.0)*cj15*px))+(((-1.0)*py*sj15))),-1);
if(!x792.valid){
continue;
}
IkReal x791=x792.value;
cj16array[0]=((((-0.321)*cj18*x791))+(((-0.4)*x791)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x793=IKsin(j16);
IkReal x794=IKcos(j16);
IkReal x795=(py*sj15);
IkReal x796=((0.321)*cj18);
IkReal x797=(cj15*px);
IkReal x798=((1.0)*x793);
IkReal x799=((0.8)*x794);
evalcond[0]=(((x793*x796))+(((0.4)*x793)));
evalcond[1]=((((-1.0)*x795*x798))+(((-1.0)*x797*x798))+(((0.1)*x793)));
evalcond[2]=((0.1)+(((-1.0)*x795))+(((-1.0)*x797))+((x794*x796))+(((0.4)*x794)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+(((-0.08)*x794))+(((0.2)*x795))+(((0.2)*x797))+(((-1.0)*(py*py)))+((x797*x799))+((x795*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x800=((0.321)*sj18);
IkReal x801=(cj15*py);
IkReal x802=(px*sj15);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j17), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((((-1.0)*x801))+x802+(((-1.0)*x800)));
evalcond[2]=((0.253041)+(((0.2)*cj15*px))+(((0.2)*py*sj15))+(((-1.0)*pp))+(((0.2568)*cj18)));
evalcond[3]=((((-1.0)*x802))+x801+x800);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x803=((-1.0)*py);
pz=0;
j17=-1.5707963267949;
sj17=-1.0;
cj17=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x803);
rxp0_1=(px*r20);
rxp1_0=(r21*x803);
rxp1_1=(px*r21);
rxp2_0=(r22*x803);
rxp2_1=(px*r22);
j16eval[0]=((1.0)+(((-10.0)*cj15*px))+(((-10.0)*py*sj15)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x804=((-1.0)*py);
pz=0;
j17=-1.5707963267949;
sj17=-1.0;
cj17=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x804);
rxp0_1=(px*r20);
rxp1_0=(r21*x804);
rxp1_1=(px*r21);
rxp2_0=(r22*x804);
rxp2_1=(px*r22);
j16eval[0]=((1.24610591900312)+cj18);
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x805=((((100.0)*(px*px)))+(((100.0)*(py*py))));
if((x805) < -0.00001)
continue;
IkReal x806=IKabs(IKsqrt(x805));
IkReal x812 = x805;
if(IKabs(x812)==0){
continue;
}
IkReal x807=pow(x812,-0.5);
CheckValue<IkReal> x813=IKPowWithIntegerCheck(x806,-1);
if(!x813.valid){
continue;
}
IkReal x808=x813.value;
IkReal x809=((10.0)*px*x807);
IkReal x810=((10.0)*py*x807);
if((((1.0)+(((-1.0)*(x808*x808))))) < -0.00001)
continue;
IkReal x811=IKsqrt(((1.0)+(((-1.0)*(x808*x808)))));
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
if( (x808) < -1-IKFAST_SINCOS_THRESH || (x808) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst30=((((-1.0)*(x814.value)))+(((-1.0)*(IKasin(x808)))));
IkReal gconst31=(((x809*x811))+((x808*x810)));
IkReal gconst32=((((-1.0)*x810*x811))+((x808*x809)));
if((((((100.0)*(px*px)))+(((100.0)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x815=IKPowWithIntegerCheck(IKabs(IKsqrt(((((100.0)*(px*px)))+(((100.0)*(py*py)))))),-1);
if(!x815.valid){
continue;
}
if( (x815.value) < -1-IKFAST_SINCOS_THRESH || (x815.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(x815.value))+j15+(x816.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x818=IKPowWithIntegerCheck(((0.1)+(((-1.0)*gconst32*px))+(((-1.0)*gconst31*py))),-1);
if(!x818.valid){
continue;
}
IkReal x817=x818.value;
cj16array[0]=((((-0.321)*cj18*x817))+(((-0.4)*x817)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x819=IKsin(j16);
IkReal x820=IKcos(j16);
IkReal x821=(gconst32*px);
IkReal x822=(gconst31*py);
IkReal x823=((0.321)*cj18);
IkReal x824=((0.8)*x820);
evalcond[0]=(((x819*x823))+(((0.4)*x819)));
evalcond[1]=(((x819*x821))+((x819*x822))+(((-0.1)*x819)));
evalcond[2]=((0.1)+((x820*x823))+(((0.4)*x820))+(((-1.0)*x821))+(((-1.0)*x822)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+(((-0.08)*x820))+((x821*x824))+((x822*x824))+(((-1.0)*(py*py)))+(((0.2)*x821))+(((0.2)*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x825=((((100.0)*(px*px)))+(((100.0)*(py*py))));
IkReal x832 = x825;
if(IKabs(x832)==0){
continue;
}
IkReal x826=pow(x832,-0.5);
if((x825) < -0.00001)
continue;
IkReal x827=IKabs(IKsqrt(x825));
CheckValue<IkReal> x833=IKPowWithIntegerCheck(x827,-1);
if(!x833.valid){
continue;
}
IkReal x828=x833.value;
IkReal x829=((10.0)*px*x826);
IkReal x830=((10.0)*py*x826);
if((((1.0)+(((-1.0)*(x828*x828))))) < -0.00001)
continue;
IkReal x831=IKsqrt(((1.0)+(((-1.0)*(x828*x828)))));
if( (x828) < -1-IKFAST_SINCOS_THRESH || (x828) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(IKasin(x828))+(((-1.0)*(x834.value))));
IkReal gconst34=(((x828*x830))+(((-1.0)*x829*x831)));
IkReal gconst35=(((x830*x831))+((x828*x829)));
if((((((100.0)*(px*px)))+(((100.0)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(IKabs(IKsqrt(((((100.0)*(px*px)))+(((100.0)*(py*py)))))),-1);
if(!x835.valid){
continue;
}
if( (x835.value) < -1-IKFAST_SINCOS_THRESH || (x835.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal(((-10.0)*px)),((-10.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(x835.value))))+j15+(x836.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x838=IKPowWithIntegerCheck(((0.1)+(((-1.0)*gconst34*py))+(((-1.0)*gconst35*px))),-1);
if(!x838.valid){
continue;
}
IkReal x837=x838.value;
cj16array[0]=((((-0.4)*x837))+(((-0.321)*cj18*x837)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x839=IKsin(j16);
IkReal x840=IKcos(j16);
IkReal x841=(gconst34*py);
IkReal x842=(gconst35*px);
IkReal x843=((0.321)*cj18);
IkReal x844=((0.8)*x840);
evalcond[0]=(((x839*x843))+(((0.4)*x839)));
evalcond[1]=(((x839*x842))+((x839*x841))+(((-0.1)*x839)));
evalcond[2]=((0.1)+((x840*x843))+(((0.4)*x840))+(((-1.0)*x842))+(((-1.0)*x841)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+(((-0.08)*x840))+((x842*x844))+(((0.2)*x842))+(((0.2)*x841))+(((-1.0)*(py*py)))+((x841*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x846=IKPowWithIntegerCheck(((0.4)+(((0.321)*cj18))),-1);
if(!x846.valid){
continue;
}
IkReal x845=x846.value;
cj16array[0]=(((py*sj15*x845))+(((-0.1)*x845))+((cj15*px*x845)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x847=IKsin(j16);
IkReal x848=IKcos(j16);
IkReal x849=(cj15*px);
IkReal x850=(py*sj15);
IkReal x851=((0.321)*cj18);
IkReal x852=((1.0)*x848);
IkReal x853=((0.8)*x848);
evalcond[0]=((((0.4)*x847))+((x847*x851)));
evalcond[1]=(((x847*x850))+(((-0.1)*x847))+((x847*x849)));
evalcond[2]=((0.4)+(((-1.0)*x850*x852))+(((-1.0)*x849*x852))+(((0.1)*x848))+x851);
evalcond[3]=((-0.066959)+((x850*x853))+(((-1.0)*(px*px)))+(((-0.08)*x848))+(((0.2)*x849))+((x849*x853))+(((-1.0)*(py*py)))+(((0.2)*x850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x855=IKPowWithIntegerCheck(((0.1)+(((-1.0)*cj15*px))+(((-1.0)*py*sj15))),-1);
if(!x855.valid){
continue;
}
IkReal x854=x855.value;
cj16array[0]=((((-0.321)*cj18*x854))+(((-0.4)*x854)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x856=IKsin(j16);
IkReal x857=IKcos(j16);
IkReal x858=(py*sj15);
IkReal x859=((0.321)*cj18);
IkReal x860=(cj15*px);
IkReal x861=((0.8)*x857);
evalcond[0]=(((x856*x859))+(((0.4)*x856)));
evalcond[1]=((((-0.1)*x856))+((x856*x860))+((x856*x858)));
evalcond[2]=((0.1)+(((-1.0)*x858))+(((-1.0)*x860))+(((0.4)*x857))+((x857*x859)));
evalcond[3]=((-0.066959)+(((-1.0)*(px*px)))+(((0.2)*x860))+((x858*x861))+(((-0.08)*x857))+((x860*x861))+(((-1.0)*(py*py)))+(((0.2)*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j18), 6.28318530717959))))));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
evalcond[2]=((0.509841)+(((0.2)*cj15*px))+(((0.2)*py*sj15))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((-0.13869625520111)+(((1.3869625520111)*py*sj15))+(((1.3869625520111)*cj15*px)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x862=IKcos(j16);
IkReal x863=IKsin(j16);
CheckValue<IkReal> x873=IKPowWithIntegerCheck(px,-1);
if(!x873.valid){
continue;
}
IkReal x864=x873.value;
IkReal x865=py*py;
IkReal x866=((1.0)*cj15);
IkReal x867=(cj15*cj17);
IkReal x868=((0.8)*cj15);
IkReal x869=(px*x862);
IkReal x870=(px*x863);
IkReal x871=((0.1)*x863);
IkReal x872=(x863*x864*x865);
evalcond[0]=((0.721)*x863);
evalcond[1]=((0.721)+(((-1.0)*x866*x869))+(((0.1)*x862))+(((-1.0)*py*sj15*x862)));
evalcond[2]=((-0.5768)+((x868*x869))+((x862*x864*x865*x868))+(((-0.08)*x862)));
evalcond[3]=(((x867*x872))+((x867*x870))+(((-1.0)*cj17*x871)));
evalcond[4]=(((sj17*x871))+(((-1.0)*sj17*x866*x872))+(((-1.0)*sj17*x866*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j18, 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
evalcond[2]=((-0.003759)+(((0.2)*cj15*px))+(((0.2)*py*sj15))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((-1.26582278481013)+(((12.6582278481013)*cj15*px))+(((12.6582278481013)*py*sj15)));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x874=IKcos(j16);
IkReal x875=IKsin(j16);
CheckValue<IkReal> x885=IKPowWithIntegerCheck(px,-1);
if(!x885.valid){
continue;
}
IkReal x876=x885.value;
IkReal x877=py*py;
IkReal x878=((1.0)*cj15);
IkReal x879=(cj15*cj17);
IkReal x880=((0.8)*cj15);
IkReal x881=(px*x874);
IkReal x882=(px*x875);
IkReal x883=((0.1)*x875);
IkReal x884=(x875*x876*x877);
evalcond[0]=((0.079)*x875);
evalcond[1]=((0.079)+(((0.1)*x874))+(((-1.0)*py*sj15*x874))+(((-1.0)*x878*x881)));
evalcond[2]=((-0.0632)+((x880*x881))+((x874*x876*x877*x880))+(((-0.08)*x874)));
evalcond[3]=(((x879*x884))+((x879*x882))+(((-1.0)*cj17*x883)));
evalcond[4]=(((sj17*x883))+(((-1.0)*sj17*x878*x884))+(((-1.0)*sj17*x878*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x886=cj15*cj15;
IkReal x887=py*py;
IkReal x888=(py*sj15);
IkReal x889=(cj15*px);
IkReal x890=((1000.0)*pz);
IkReal x891=(cj17*sj18);
IkReal x892=((1000.0)*x886);
CheckValue<IkReal> x893=IKPowWithIntegerCheck(IKsign(((((-321.0)*x888*x891))+(((321.0)*cj18*pz))+(((400.0)*pz))+(((-321.0)*x889*x891))+(((32.1)*x891)))),-1);
if(!x893.valid){
continue;
}
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal(((-150.0)+((x892*(px*px)))+(((1000.0)*x887))+(((-256.8)*cj18))+(((2000.0)*x888*x889))+(((-200.0)*x889))+(((-200.0)*x888))+(((-103.041)*(cj18*cj18)))+(((-1.0)*x887*x892)))),((((-100.0)*pz))+((x889*x890))+(((-128.4)*x891))+(((-103.041)*cj18*x891))+((x888*x890))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x893.value)))+(x894.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x895=IKsin(j16);
IkReal x896=IKcos(j16);
IkReal x897=((0.321)*sj18);
IkReal x898=(cj15*px);
IkReal x899=(py*sj15);
IkReal x900=(px*sj15);
IkReal x901=((1.0)*sj17);
IkReal x902=(cj15*py);
IkReal x903=((0.321)*cj18);
IkReal x904=(pz*x896);
IkReal x905=((1.0)*x898);
IkReal x906=((0.321)*x896);
IkReal x907=(sj17*x895);
IkReal x908=(pz*x895);
IkReal x909=((0.8)*x896);
IkReal x910=(cj17*x895);
evalcond[0]=(((x895*x903))+((cj17*x896*x897))+(((0.4)*x895))+pz);
evalcond[1]=((0.1)+(((-1.0)*x905))+(((-1.0)*x897*x910))+(((0.4)*x896))+(((-1.0)*x899))+((x896*x903)));
evalcond[2]=((0.4)+(((-1.0)*x896*x905))+(((-1.0)*x896*x899))+x903+x908+(((0.1)*x896)));
evalcond[3]=((-0.066959)+(((-1.0)*pp))+((x899*x909))+(((-0.8)*x908))+(((0.2)*x899))+(((0.2)*x898))+((x898*x909))+(((-0.08)*x896)));
evalcond[4]=((((-1.0)*x895*x899*x901))+(((-1.0)*x895*x898*x901))+(((-1.0)*cj17*x902))+((cj17*x900))+(((-1.0)*x901*x904))+(((0.1)*x907)));
evalcond[5]=(((x898*x910))+((sj17*x900))+((x899*x910))+(((-0.1)*x910))+((cj17*x904))+(((-1.0)*x901*x902))+x897);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x911=cj17*cj17;
IkReal x912=cj18*cj18;
IkReal x913=(cj15*px);
IkReal x914=(py*sj15);
IkReal x915=((321000.0)*cj18);
IkReal x916=((321000.0)*cj17*sj18);
IkReal x917=((103041.0)*x912);
CheckValue<IkReal> x918=IKPowWithIntegerCheck(IKsign(((160000.0)+(((103041.0)*x911))+(((256800.0)*cj18))+x917+(((-1.0)*x911*x917)))),-1);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal(((((32100.0)*cj17*sj18))+(((-1.0)*x913*x916))+(((-1.0)*pz*x915))+(((-400000.0)*pz))+(((-1.0)*x914*x916)))),((-40000.0)+((x914*x915))+(((-1.0)*pz*x916))+(((-32100.0)*cj18))+((x913*x915))+(((400000.0)*x914))+(((400000.0)*x913))),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x918.value)))+(x919.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x920=IKsin(j16);
IkReal x921=IKcos(j16);
IkReal x922=((0.321)*sj18);
IkReal x923=(cj15*px);
IkReal x924=(py*sj15);
IkReal x925=(px*sj15);
IkReal x926=((1.0)*sj17);
IkReal x927=(cj15*py);
IkReal x928=((0.321)*cj18);
IkReal x929=(pz*x921);
IkReal x930=((1.0)*x923);
IkReal x931=((0.321)*x921);
IkReal x932=(sj17*x920);
IkReal x933=(pz*x920);
IkReal x934=((0.8)*x921);
IkReal x935=(cj17*x920);
evalcond[0]=(((x920*x928))+((cj17*x921*x922))+pz+(((0.4)*x920)));
evalcond[1]=((0.1)+((x921*x928))+(((-1.0)*x924))+(((0.4)*x921))+(((-1.0)*x922*x935))+(((-1.0)*x930)));
evalcond[2]=((0.4)+(((0.1)*x921))+(((-1.0)*x921*x930))+(((-1.0)*x921*x924))+x933+x928);
evalcond[3]=((-0.066959)+(((-0.08)*x921))+((x924*x934))+(((0.2)*x924))+(((0.2)*x923))+(((-0.8)*x933))+(((-1.0)*pp))+((x923*x934)));
evalcond[4]=((((-1.0)*x920*x923*x926))+((cj17*x925))+(((0.1)*x932))+(((-1.0)*x920*x924*x926))+(((-1.0)*x926*x929))+(((-1.0)*cj17*x927)));
evalcond[5]=((((-0.1)*x935))+((cj17*x929))+((x924*x935))+(((-1.0)*x926*x927))+((x923*x935))+((sj17*x925))+x922);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x936=(cj15*px);
IkReal x937=((1000.0)*pz);
IkReal x938=(cj17*sj18);
IkReal x939=((321.0)*cj18);
IkReal x940=(py*sj15);
CheckValue<IkReal> x941=IKPowWithIntegerCheck(IKsign(((-40.0)+((x936*x939))+(((400.0)*x936))+((x939*x940))+(((-32.1)*cj18))+(((321.0)*pz*x938))+(((400.0)*x940)))),-1);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal(((((100.0)*pz))+(((-128.4)*x938))+(((-103.041)*cj18*x938))+(((-1.0)*x936*x937))+(((-1.0)*x937*x940)))),((160.0)+(((256.8)*cj18))+(((-1.0)*pz*x937))+(((103.041)*(cj18*cj18)))),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x941.value)))+(x942.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x943=IKsin(j16);
IkReal x944=IKcos(j16);
IkReal x945=((0.321)*sj18);
IkReal x946=(cj15*px);
IkReal x947=(py*sj15);
IkReal x948=(px*sj15);
IkReal x949=((1.0)*sj17);
IkReal x950=(cj15*py);
IkReal x951=((0.321)*cj18);
IkReal x952=(pz*x944);
IkReal x953=((1.0)*x946);
IkReal x954=((0.321)*x944);
IkReal x955=(sj17*x943);
IkReal x956=(pz*x943);
IkReal x957=((0.8)*x944);
IkReal x958=(cj17*x943);
evalcond[0]=(((x943*x951))+pz+((cj17*x944*x945))+(((0.4)*x943)));
evalcond[1]=((0.1)+((x944*x951))+(((-1.0)*x947))+(((-1.0)*x945*x958))+(((0.4)*x944))+(((-1.0)*x953)));
evalcond[2]=((0.4)+(((-1.0)*x944*x953))+x956+x951+(((0.1)*x944))+(((-1.0)*x944*x947)));
evalcond[3]=((-0.066959)+(((-0.08)*x944))+(((-0.8)*x956))+(((0.2)*x946))+(((0.2)*x947))+(((-1.0)*pp))+((x947*x957))+((x946*x957)));
evalcond[4]=(((cj17*x948))+(((-1.0)*x943*x947*x949))+(((0.1)*x955))+(((-1.0)*x949*x952))+(((-1.0)*cj17*x950))+(((-1.0)*x943*x946*x949)));
evalcond[5]=((((-0.1)*x958))+((cj17*x952))+((x947*x958))+((sj17*x948))+((x946*x958))+(((-1.0)*x949*x950))+x945);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x959=py*py;
IkReal x960=cj15*cj15;
IkReal x961=px*px;
IkReal x962=((5.0)*pp);
IkReal x963=(py*sj15);
IkReal x964=(pz*sj17);
IkReal x965=(cj17*py);
IkReal x966=(cj15*px*sj17);
IkReal x967=((4.0)*x959);
IkReal x968=(cj15*cj17*sj15);
IkReal x969=(sj17*x960);
IkReal x970=((4.0)*x961);
IkReal x971=((4.0)*x965);
IkReal x972=(cj17*px*sj15);
CheckValue<IkReal> x973=IKPowWithIntegerCheck(IKsign(((((0.8)*x966))+(((-1.0)*x969*x970))+(((-4.0)*pz*x964))+(((-8.0)*x963*x966))+(((0.8)*sj17*x963))+((x967*x969))+(((-1.0)*sj17*x967))+(((-0.04)*sj17)))),-1);
if(!x973.valid){
continue;
}
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(((((-1.0)*px*x971))+(((-0.4)*cj15*x965))+(((0.334795)*x964))+(((-1.0)*cj15*px*x964))+(((-1.0)*x963*x964))+((x962*x964))+((x967*x968))+(((8.0)*px*x960*x965))+(((0.4)*x972))+(((-1.0)*x968*x970)))),((((-1.0)*sj17*x962*x963))+(((-4.0)*pz*x972))+((sj17*x959))+(((-0.434795)*sj17*x963))+(((-1.0)*x962*x966))+((cj15*pz*x971))+((x961*x969))+(((0.5)*pp*sj17))+(((-1.0)*x959*x969))+(((-0.434795)*x966))+(((2.0)*x963*x966))+(((0.0334795)*sj17))),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x973.value)))+(x974.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x975=IKcos(j16);
IkReal x976=IKsin(j16);
IkReal x977=((1.0)*py);
IkReal x978=(cj15*px);
IkReal x979=(py*sj15);
IkReal x980=(sj17*x976);
IkReal x981=((0.8)*x975);
evalcond[0]=((-0.066959)+((x979*x981))+(((-1.0)*pp))+(((0.2)*x978))+(((0.2)*x979))+(((-0.08)*x975))+(((-0.8)*pz*x976))+((x978*x981)));
evalcond[1]=((((-1.0)*sj15*x977*x980))+(((0.1)*x980))+(((-1.0)*cj15*cj17*x977))+(((-1.0)*x978*x980))+((cj17*px*sj15))+(((-1.0)*pz*sj17*x975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18eval[1];
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=cj16;
j18eval[1]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal j18eval[2];
j18eval[0]=sj17;
j18eval[1]=sj16;
if( IKabs(j18eval[0]) < 0.0000010000000000  || IKabs(j18eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x982=(py*sj15);
IkReal x983=((0.8)*cj16);
IkReal x984=(cj15*px);
IkReal x985=(((px*sj15))+(((-1.0)*cj15*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=x985;
evalcond[2]=((-0.066959)+((x983*x984))+(((-1.0)*pp))+((x982*x983))+(((-0.8)*pz*sj16))+(((-0.08)*cj16))+(((0.2)*x984))+(((0.2)*x982)));
evalcond[3]=x985;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x986=((3.11526479750779)*cj16);
IkReal x987=(py*sj15);
IkReal x988=((3.11526479750779)*sj16);
IkReal x989=(cj15*px);
if( IKabs(((((-1.0)*pz*x986))+(((0.311526479750779)*sj16))+(((-1.0)*x988*x989))+(((-1.0)*x987*x988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-1.0)*pz*x988))+((x986*x989))+((x986*x987))+(((-0.311526479750779)*cj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x986))+(((0.311526479750779)*sj16))+(((-1.0)*x988*x989))+(((-1.0)*x987*x988))))+IKsqr(((-1.24610591900312)+(((-1.0)*pz*x988))+((x986*x989))+((x986*x987))+(((-0.311526479750779)*cj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*pz*x986))+(((0.311526479750779)*sj16))+(((-1.0)*x988*x989))+(((-1.0)*x987*x988))), ((-1.24610591900312)+(((-1.0)*pz*x988))+((x986*x989))+((x986*x987))+(((-0.311526479750779)*cj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x990=IKcos(j18);
IkReal x991=IKsin(j18);
IkReal x992=(py*sj15);
IkReal x993=(cj15*px);
IkReal x994=((1.0)*cj16);
IkReal x995=((0.321)*x990);
IkReal x996=((0.321)*x991);
evalcond[0]=(((sj16*x995))+(((0.4)*sj16))+pz+((cj16*x996)));
evalcond[1]=((0.253041)+(((0.2568)*x990))+(((-1.0)*pp))+(((0.2)*x993))+(((0.2)*x992)));
evalcond[2]=((((-0.1)*sj16))+((sj16*x993))+((sj16*x992))+((cj16*pz))+x996);
evalcond[3]=((0.4)+(((-1.0)*x992*x994))+((pz*sj16))+(((-1.0)*x993*x994))+x995+(((0.1)*cj16)));
evalcond[4]=((0.1)+(((-1.0)*x993))+(((-1.0)*x992))+((cj16*x995))+(((0.4)*cj16))+(((-1.0)*sj16*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x997=(py*sj15);
IkReal x998=(cj15*py);
IkReal x999=((0.8)*cj16);
IkReal x1000=(cj15*px);
IkReal x1001=(px*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x998))+x1001);
evalcond[2]=((-0.066959)+(((0.2)*x1000))+((x1000*x999))+((x997*x999))+(((-1.0)*pp))+(((-0.8)*pz*sj16))+(((-0.08)*cj16))+(((0.2)*x997)));
evalcond[3]=((((-1.0)*x1001))+x998);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1002=((3.11526479750779)*cj16);
IkReal x1003=((3.11526479750779)*sj16);
IkReal x1004=(py*sj15);
IkReal x1005=(cj15*px);
if( IKabs(((((-0.311526479750779)*sj16))+((pz*x1002))+((x1003*x1004))+((x1003*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-1.0)*pz*x1003))+((x1002*x1004))+((x1002*x1005))+(((-0.311526479750779)*cj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.311526479750779)*sj16))+((pz*x1002))+((x1003*x1004))+((x1003*x1005))))+IKsqr(((-1.24610591900312)+(((-1.0)*pz*x1003))+((x1002*x1004))+((x1002*x1005))+(((-0.311526479750779)*cj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-0.311526479750779)*sj16))+((pz*x1002))+((x1003*x1004))+((x1003*x1005))), ((-1.24610591900312)+(((-1.0)*pz*x1003))+((x1002*x1004))+((x1002*x1005))+(((-0.311526479750779)*cj16))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1006=IKcos(j18);
IkReal x1007=IKsin(j18);
IkReal x1008=((1.0)*cj16);
IkReal x1009=(py*sj15);
IkReal x1010=(cj15*px);
IkReal x1011=((0.321)*x1006);
IkReal x1012=((1.0)*x1010);
IkReal x1013=((0.321)*x1007);
evalcond[0]=((((-1.0)*cj16*x1013))+(((0.4)*sj16))+pz+((sj16*x1011)));
evalcond[1]=((0.253041)+(((0.2)*x1009))+(((-1.0)*pp))+(((0.2568)*x1006))+(((0.2)*x1010)));
evalcond[2]=((0.4)+x1011+(((-1.0)*x1008*x1009))+(((-1.0)*x1008*x1010))+((pz*sj16))+(((0.1)*cj16)));
evalcond[3]=((((-1.0)*pz*x1008))+x1013+(((0.1)*sj16))+(((-1.0)*sj16*x1012))+(((-1.0)*sj16*x1009)));
evalcond[4]=((0.1)+(((-1.0)*x1009))+(((-1.0)*x1012))+(((0.4)*cj16))+((cj16*x1011))+((sj16*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=((-0.146959)+((py*sj15))+(((-1.0)*pp))+((cj15*px)));
evalcond[2]=((((-1.0)*cj15*cj17*py))+(((-1.0)*pz*sj17))+((cj17*px*sj15)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
sj16=0;
cj16=1.0;
j16=0;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=1.0;
j16=0;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-3.11526479750779)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.11526479750779)*pz))+IKsqr(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-3.11526479750779)*pz), ((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1014=IKcos(j18);
IkReal x1015=(py*sj15);
IkReal x1016=(cj15*px);
evalcond[0]=(pz+(((0.321)*(IKsin(j18)))));
evalcond[1]=((0.4)+(((0.2568)*x1014))+(((-0.8)*x1015))+(((-0.8)*x1016)));
evalcond[2]=((0.5)+(((0.321)*x1014))+(((-1.0)*x1016))+(((-1.0)*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((3.11526479750779)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.11526479750779)*pz))+IKsqr(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((3.11526479750779)*pz), ((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1017=IKcos(j18);
IkReal x1018=(py*sj15);
IkReal x1019=(cj15*px);
evalcond[0]=((((-0.321)*(IKsin(j18))))+pz);
evalcond[1]=((0.4)+(((0.2568)*x1017))+(((-0.8)*x1018))+(((-0.8)*x1019)));
evalcond[2]=((0.5)+(((0.321)*x1017))+(((-1.0)*x1018))+(((-1.0)*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1020=((3.11526479750779)*cj15);
IkReal x1021=((3.11526479750779)*sj15);
if( IKabs((((py*x1020))+(((-1.0)*px*x1021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+((py*x1021))+((px*x1020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1020))+(((-1.0)*px*x1021))))+IKsqr(((-1.55763239875389)+((py*x1021))+((px*x1020))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((py*x1020))+(((-1.0)*px*x1021))), ((-1.55763239875389)+((py*x1021))+((px*x1020))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1022=IKcos(j18);
IkReal x1023=(py*sj15);
IkReal x1024=(cj15*px);
evalcond[0]=(((px*sj15))+(((-1.0)*cj15*py))+(((0.321)*(IKsin(j18)))));
evalcond[1]=((0.4)+(((0.2568)*x1022))+(((-0.8)*x1023))+(((-0.8)*x1024)));
evalcond[2]=((0.5)+(((-1.0)*x1023))+(((-1.0)*x1024))+(((0.321)*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1025=((3.11526479750779)*cj15);
IkReal x1026=((3.11526479750779)*sj15);
if( IKabs(((((-1.0)*py*x1025))+((px*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+((py*x1026))+((px*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x1025))+((px*x1026))))+IKsqr(((-1.55763239875389)+((py*x1026))+((px*x1025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*py*x1025))+((px*x1026))), ((-1.55763239875389)+((py*x1026))+((px*x1025))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1027=IKcos(j18);
IkReal x1028=(py*sj15);
IkReal x1029=(cj15*px);
evalcond[0]=(((px*sj15))+(((-1.0)*cj15*py))+(((-0.321)*(IKsin(j18)))));
evalcond[1]=((0.4)+(((0.2568)*x1027))+(((-0.8)*x1029))+(((-0.8)*x1028)));
evalcond[2]=((0.5)+(((-1.0)*x1029))+(((-1.0)*x1028))+(((0.321)*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(sj17,-1);
if(!x1030.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1030.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1030.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))))+IKsqr(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1030.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))), ((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1031=IKsin(j18);
IkReal x1032=IKcos(j18);
IkReal x1033=(py*sj15);
IkReal x1034=(cj15*px);
IkReal x1035=(px*sj15);
IkReal x1036=((0.321)*x1031);
IkReal x1037=((1.0)*cj15*py);
evalcond[0]=(pz+((cj17*x1036)));
evalcond[1]=((((-1.0)*x1037))+x1035+((sj17*x1036)));
evalcond[2]=((0.4)+(((0.2568)*x1032))+(((-0.8)*x1033))+(((-0.8)*x1034)));
evalcond[3]=((0.5)+(((0.321)*x1032))+(((-1.0)*x1034))+(((-1.0)*x1033)));
evalcond[4]=(x1036+((sj17*x1035))+((cj17*pz))+(((-1.0)*sj17*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(cj17,-1);
if(!x1038.valid){
continue;
}
if( IKabs(((-3.11526479750779)*pz*(x1038.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.11526479750779)*pz*(x1038.value)))+IKsqr(((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-3.11526479750779)*pz*(x1038.value)), ((-1.55763239875389)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1039=IKsin(j18);
IkReal x1040=IKcos(j18);
IkReal x1041=(py*sj15);
IkReal x1042=(cj15*px);
IkReal x1043=(px*sj15);
IkReal x1044=((0.321)*x1039);
IkReal x1045=((1.0)*cj15*py);
evalcond[0]=(((cj17*x1044))+pz);
evalcond[1]=(x1043+((sj17*x1044))+(((-1.0)*x1045)));
evalcond[2]=((0.4)+(((0.2568)*x1040))+(((-0.8)*x1042))+(((-0.8)*x1041)));
evalcond[3]=((0.5)+(((0.321)*x1040))+(((-1.0)*x1042))+(((-1.0)*x1041)));
evalcond[4]=(x1044+(((-1.0)*sj17*x1045))+((sj17*x1043))+((cj17*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=((0.013041)+(((-0.6)*cj15*px))+(((-0.6)*py*sj15))+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*cj15*cj17*py))+((pz*sj17))+((cj17*px*sj15)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((3.11526479750779)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.11526479750779)*pz))+IKsqr(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((3.11526479750779)*pz), ((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1046=IKcos(j18);
IkReal x1047=(py*sj15);
IkReal x1048=(cj15*px);
evalcond[0]=((((-0.321)*(IKsin(j18))))+pz);
evalcond[1]=((0.3)+x1047+x1048+(((0.321)*x1046)));
evalcond[2]=((0.24)+(((0.8)*x1048))+(((0.8)*x1047))+(((0.2568)*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-3.11526479750779)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.11526479750779)*pz))+IKsqr(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-3.11526479750779)*pz), ((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1049=IKcos(j18);
IkReal x1050=(py*sj15);
IkReal x1051=(cj15*px);
evalcond[0]=(pz+(((0.321)*(IKsin(j18)))));
evalcond[1]=((0.3)+x1050+x1051+(((0.321)*x1049)));
evalcond[2]=((0.24)+(((0.8)*x1051))+(((0.8)*x1050))+(((0.2568)*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1052=((3.11526479750779)*cj15);
IkReal x1053=((3.11526479750779)*sj15);
if( IKabs(((((-1.0)*px*x1053))+((py*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-1.0)*px*x1052))+(((-1.0)*py*x1053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1053))+((py*x1052))))+IKsqr(((-0.934579439252336)+(((-1.0)*px*x1052))+(((-1.0)*py*x1053))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*px*x1053))+((py*x1052))), ((-0.934579439252336)+(((-1.0)*px*x1052))+(((-1.0)*py*x1053))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1054=IKcos(j18);
IkReal x1055=(py*sj15);
IkReal x1056=(cj15*px);
evalcond[0]=(((px*sj15))+(((-1.0)*cj15*py))+(((0.321)*(IKsin(j18)))));
evalcond[1]=((0.3)+x1055+x1056+(((0.321)*x1054)));
evalcond[2]=((0.24)+(((0.8)*x1055))+(((0.8)*x1056))+(((0.2568)*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1057=((3.11526479750779)*cj15);
IkReal x1058=((3.11526479750779)*sj15);
if( IKabs((((px*x1058))+(((-1.0)*py*x1057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-1.0)*px*x1057))+(((-1.0)*py*x1058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1058))+(((-1.0)*py*x1057))))+IKsqr(((-0.934579439252336)+(((-1.0)*px*x1057))+(((-1.0)*py*x1058))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((((px*x1058))+(((-1.0)*py*x1057))), ((-0.934579439252336)+(((-1.0)*px*x1057))+(((-1.0)*py*x1058))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1059=IKcos(j18);
IkReal x1060=(py*sj15);
IkReal x1061=(cj15*px);
evalcond[0]=(((px*sj15))+(((-1.0)*cj15*py))+(((-0.321)*(IKsin(j18)))));
evalcond[1]=((0.3)+x1061+x1060+(((0.321)*x1059)));
evalcond[2]=((0.24)+(((0.8)*x1060))+(((0.8)*x1061))+(((0.2568)*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(sj17,-1);
if(!x1062.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1062.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1062.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))))+IKsqr(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1062.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))), ((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1063=IKsin(j18);
IkReal x1064=IKcos(j18);
IkReal x1065=(py*sj15);
IkReal x1066=(cj15*px);
IkReal x1067=(px*sj15);
IkReal x1068=((0.321)*x1063);
IkReal x1069=((1.0)*cj15*py);
evalcond[0]=((((-1.0)*cj17*x1068))+pz);
evalcond[1]=((0.3)+x1065+x1066+(((0.321)*x1064)));
evalcond[2]=(x1067+(((-1.0)*x1069))+((sj17*x1068)));
evalcond[3]=((0.24)+(((0.8)*x1065))+(((0.8)*x1066))+(((0.2568)*x1064)));
evalcond[4]=(x1068+(((-1.0)*sj17*x1069))+(((-1.0)*cj17*pz))+((sj17*x1067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(cj17,-1);
if(!x1070.valid){
continue;
}
if( IKabs(((3.11526479750779)*pz*(x1070.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.11526479750779)*pz*(x1070.value)))+IKsqr(((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((3.11526479750779)*pz*(x1070.value)), ((-0.934579439252336)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1071=IKsin(j18);
IkReal x1072=IKcos(j18);
IkReal x1073=(py*sj15);
IkReal x1074=(cj15*px);
IkReal x1075=(px*sj15);
IkReal x1076=((0.321)*x1071);
IkReal x1077=((1.0)*cj15*py);
evalcond[0]=((((-1.0)*cj17*x1076))+pz);
evalcond[1]=((0.3)+x1074+x1073+(((0.321)*x1072)));
evalcond[2]=(x1075+(((-1.0)*x1077))+((sj17*x1076)));
evalcond[3]=((0.24)+(((0.8)*x1074))+(((0.8)*x1073))+(((0.2568)*x1072)));
evalcond[4]=(x1076+(((-1.0)*sj17*x1077))+(((-1.0)*cj17*pz))+((sj17*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1078=((1.0)*py);
IkReal x1079=(cj15*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=((-0.066959)+(((-0.8)*pz))+(((0.2)*x1079))+(((0.2)*py*sj15))+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*sj17*x1079))+((cj17*px*sj15))+(((0.1)*sj17))+(((-1.0)*sj15*sj17*x1078))+(((-1.0)*cj15*cj17*x1078)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1080=((3.11526479750779)*cj15);
IkReal x1081=((3.11526479750779)*sj15);
if( IKabs(((((-1.0)*cj17*py*x1081))+(((0.311526479750779)*cj17))+((py*sj17*x1080))+(((-1.0)*px*sj17*x1081))+(((-1.0)*cj17*px*x1080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj17*py*x1081))+(((0.311526479750779)*cj17))+((py*sj17*x1080))+(((-1.0)*px*sj17*x1081))+(((-1.0)*cj17*px*x1080))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.0)*cj17*py*x1081))+(((0.311526479750779)*cj17))+((py*sj17*x1080))+(((-1.0)*px*sj17*x1081))+(((-1.0)*cj17*px*x1080))), ((-1.24610591900312)+(((-3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1082=IKsin(j18);
IkReal x1083=IKcos(j18);
IkReal x1084=(py*sj15);
IkReal x1085=(px*sj15);
IkReal x1086=(cj15*px);
IkReal x1087=((0.321)*x1082);
IkReal x1088=((1.0)*cj15*py);
evalcond[0]=((0.4)+(((0.321)*x1083))+pz);
evalcond[1]=(((sj17*x1087))+x1085+(((-1.0)*x1088)));
evalcond[2]=((0.1)+(((-1.0)*x1086))+(((-1.0)*x1084))+(((-1.0)*cj17*x1087)));
evalcond[3]=((0.253041)+(((0.2)*x1086))+(((0.2)*x1084))+(((-1.0)*pp))+(((0.2568)*x1083)));
evalcond[4]=(((sj17*x1085))+x1087+(((-1.0)*sj17*x1088))+((cj17*x1086))+((cj17*x1084))+(((-0.1)*cj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1089=(cj15*px);
IkReal x1090=(py*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=((-0.066959)+(((0.8)*pz))+(((0.2)*x1089))+(((-1.0)*pp))+(((0.2)*x1090)));
evalcond[2]=(((sj17*x1089))+(((-1.0)*cj15*cj17*py))+(((-0.1)*sj17))+((sj17*x1090))+((cj17*px*sj15)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=sj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal j18eval[1];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j18eval[0]=cj17;
if( IKabs(j18eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=((0.1)+(((-1.0)*cj15*px))+(((-1.0)*py*sj15)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1091=IKcos(j18);
evalcond[0]=((-0.4)+(((-0.321)*x1091))+pz);
evalcond[1]=((0.273041)+(((0.2568)*x1091))+(((-1.0)*pp)));
evalcond[2]=(((px*sj15))+(((-1.0)*cj15*py))+(((0.321)*(IKsin(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=((0.1)+(((-1.0)*cj15*px))+(((-1.0)*py*sj15)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1092=IKcos(j18);
evalcond[0]=((-0.4)+(((-0.321)*x1092))+pz);
evalcond[1]=((0.273041)+(((0.2568)*x1092))+(((-1.0)*pp)));
evalcond[2]=(((px*sj15))+(((-1.0)*cj15*py))+(((-0.321)*(IKsin(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-0.311526479750779)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.311526479750779)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*py*sj15))+(((3.11526479750779)*cj15*px))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1093=IKcos(j18);
IkReal x1094=(cj15*px);
IkReal x1095=(py*sj15);
evalcond[0]=((-0.4)+(((-0.321)*x1093))+pz);
evalcond[1]=((0.1)+(((-1.0)*x1094))+(((-1.0)*x1095))+(((0.321)*(IKsin(j18)))));
evalcond[2]=((0.253041)+(((0.2568)*x1093))+(((-1.0)*pp))+(((0.2)*x1094))+(((0.2)*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
evalcond[1]=(((px*sj15))+(((-1.0)*cj15*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.311526479750779)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.311526479750779)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*py*sj15))+(((-3.11526479750779)*cj15*px))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1096=IKcos(j18);
IkReal x1097=(cj15*px);
IkReal x1098=(py*sj15);
evalcond[0]=((-0.4)+(((-0.321)*x1096))+pz);
evalcond[1]=((0.1)+(((-1.0)*x1098))+(((-1.0)*x1097))+(((-0.321)*(IKsin(j18)))));
evalcond[2]=((0.253041)+(((0.2568)*x1096))+(((-1.0)*pp))+(((0.2)*x1097))+(((0.2)*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(cj17,-1);
if(!x1099.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1099.value)*(((-100.0)+(((1000.0)*py*sj15))+(((1000.0)*cj15*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1099.value)*(((-100.0)+(((1000.0)*py*sj15))+(((1000.0)*cj15*px))))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1099.value)*(((-100.0)+(((1000.0)*py*sj15))+(((1000.0)*cj15*px))))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1100=IKsin(j18);
IkReal x1101=IKcos(j18);
IkReal x1102=(py*sj15);
IkReal x1103=((1.0)*cj15);
IkReal x1104=(px*sj15);
IkReal x1105=((0.321)*x1100);
evalcond[0]=((-0.4)+(((-0.321)*x1101))+pz);
evalcond[1]=(x1104+(((-1.0)*py*x1103))+((sj17*x1105)));
evalcond[2]=((0.1)+(((-1.0)*px*x1103))+(((-1.0)*x1102))+((cj17*x1105)));
evalcond[3]=((0.253041)+(((0.2)*cj15*px))+(((-1.0)*pp))+(((0.2)*x1102))+(((0.2568)*x1101)));
evalcond[4]=(x1105+(((-1.0)*py*sj17*x1103))+((sj17*x1104))+(((-1.0)*cj17*px*x1103))+(((-1.0)*cj17*x1102))+(((0.1)*cj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1106=IKPowWithIntegerCheck(sj17,-1);
if(!x1106.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1106.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1106.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1106.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))), ((-1.24610591900312)+(((3.11526479750779)*pz))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1107=IKsin(j18);
IkReal x1108=IKcos(j18);
IkReal x1109=(py*sj15);
IkReal x1110=((1.0)*cj15);
IkReal x1111=(px*sj15);
IkReal x1112=((0.321)*x1107);
evalcond[0]=((-0.4)+(((-0.321)*x1108))+pz);
evalcond[1]=(x1111+(((-1.0)*py*x1110))+((sj17*x1112)));
evalcond[2]=((0.1)+(((-1.0)*px*x1110))+(((-1.0)*x1109))+((cj17*x1112)));
evalcond[3]=((0.253041)+(((0.2)*cj15*px))+(((-1.0)*pp))+(((0.2)*x1109))+(((0.2568)*x1108)));
evalcond[4]=((((-1.0)*py*sj17*x1110))+x1112+((sj17*x1111))+(((-1.0)*cj17*px*x1110))+(((-1.0)*cj17*x1109))+(((0.1)*cj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1113=((1.0)*sj16);
IkReal x1114=(cj15*px);
IkReal x1115=(py*sj15);
IkReal x1116=((0.8)*cj16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=((-0.066959)+((x1114*x1116))+(((-1.0)*pp))+(((-0.8)*pz*sj16))+(((-0.08)*cj16))+((x1115*x1116))+(((0.2)*x1114))+(((0.2)*x1115)));
evalcond[2]=((((-1.0)*x1113*x1115))+(((-1.0)*x1113*x1114))+(((-1.0)*cj16*pz))+(((0.1)*sj16)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py))))+IKsqr(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-3.11526479750779)*px*sj15))+(((3.11526479750779)*cj15*py))), ((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1117=IKcos(j18);
IkReal x1118=(py*sj15);
IkReal x1119=((1.0)*cj16);
IkReal x1120=((1.0)*cj15);
IkReal x1121=(cj15*px);
IkReal x1122=((0.321)*x1117);
evalcond[0]=((((0.4)*sj16))+pz+((sj16*x1122)));
evalcond[1]=(((px*sj15))+(((-1.0)*py*x1120))+(((0.321)*(IKsin(j18)))));
evalcond[2]=((0.253041)+(((-1.0)*pp))+(((0.2)*x1121))+(((0.2)*x1118))+(((0.2568)*x1117)));
evalcond[3]=((0.1)+(((-1.0)*x1118))+((cj16*x1122))+(((0.4)*cj16))+(((-1.0)*px*x1120)));
evalcond[4]=((0.4)+x1122+((pz*sj16))+(((-1.0)*x1119*x1121))+(((-1.0)*x1118*x1119))+(((0.1)*cj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1123=(cj15*px);
IkReal x1124=((0.8)*cj16);
IkReal x1125=(py*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=((-0.066959)+((x1124*x1125))+(((-1.0)*pp))+(((-0.8)*pz*sj16))+(((-0.08)*cj16))+(((0.2)*x1125))+(((0.2)*x1123))+((x1123*x1124)));
evalcond[2]=((((-0.1)*sj16))+((sj16*x1125))+((sj16*x1123))+((cj16*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py))))+IKsqr(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((3.11526479750779)*px*sj15))+(((-3.11526479750779)*cj15*py))), ((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1126=IKcos(j18);
IkReal x1127=(py*sj15);
IkReal x1128=((1.0)*cj16);
IkReal x1129=((1.0)*cj15);
IkReal x1130=(cj15*px);
IkReal x1131=((0.321)*x1126);
evalcond[0]=((((0.4)*sj16))+pz+((sj16*x1131)));
evalcond[1]=(((px*sj15))+(((-0.321)*(IKsin(j18))))+(((-1.0)*py*x1129)));
evalcond[2]=((0.253041)+(((-1.0)*pp))+(((0.2)*x1130))+(((0.2)*x1127))+(((0.2568)*x1126)));
evalcond[3]=((0.1)+((cj16*x1131))+(((0.4)*cj16))+(((-1.0)*x1127))+(((-1.0)*px*x1129)));
evalcond[4]=((0.4)+x1131+((pz*sj16))+(((-1.0)*x1127*x1128))+(((-1.0)*x1128*x1130))+(((0.1)*cj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j18]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(sj17,-1);
if(!x1137.valid){
continue;
}
IkReal x1132=x1137.value;
IkReal x1133=((0.00311526479750779)*x1132);
IkReal x1134=(px*sj15);
IkReal x1135=(cj15*py);
IkReal x1136=((1000.0)*cj16*cj17);
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(sj16,-1);
if(!x1138.valid){
continue;
}
if( IKabs((x1133*(((((1000.0)*x1135))+(((-1000.0)*x1134)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1133*(x1138.value)*(((((-1000.0)*pz*sj17))+(((-400.0)*sj16*sj17))+((x1134*x1136))+(((-1.0)*x1135*x1136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1133*(((((1000.0)*x1135))+(((-1000.0)*x1134))))))+IKsqr((x1133*(x1138.value)*(((((-1000.0)*pz*sj17))+(((-400.0)*sj16*sj17))+((x1134*x1136))+(((-1.0)*x1135*x1136))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2((x1133*(((((1000.0)*x1135))+(((-1000.0)*x1134))))), (x1133*(x1138.value)*(((((-1000.0)*pz*sj17))+(((-400.0)*sj16*sj17))+((x1134*x1136))+(((-1.0)*x1135*x1136))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1139=IKcos(j18);
IkReal x1140=IKsin(j18);
IkReal x1141=(cj17*sj16);
IkReal x1142=(cj16*cj17);
IkReal x1143=(cj15*px);
IkReal x1144=((1.0)*cj16);
IkReal x1145=(py*sj15);
IkReal x1146=(px*sj15);
IkReal x1147=((0.321)*x1140);
IkReal x1148=((0.321)*x1139);
IkReal x1149=((1.0)*cj15*py);
evalcond[0]=(x1146+(((-1.0)*x1149))+((sj17*x1147)));
evalcond[1]=((0.253041)+(((-1.0)*pp))+(((0.2568)*x1139))+(((0.2)*x1145))+(((0.2)*x1143)));
evalcond[2]=(((x1142*x1147))+(((0.4)*sj16))+pz+((sj16*x1148)));
evalcond[3]=((0.4)+x1148+(((-1.0)*x1143*x1144))+((pz*sj16))+(((-1.0)*x1144*x1145))+(((0.1)*cj16)));
evalcond[4]=((0.1)+(((-1.0)*x1141*x1147))+(((-1.0)*x1145))+(((-1.0)*x1143))+(((0.4)*cj16))+((cj16*x1148)));
evalcond[5]=(x1147+((pz*x1142))+((x1141*x1145))+((x1141*x1143))+(((-0.1)*x1141))+(((-1.0)*sj17*x1149))+((sj17*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1150=((250.0)*sj16);
IkReal x1151=(py*sj15);
IkReal x1152=(cj15*px);
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(cj16,-1);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(cj17,-1);
if(!x1154.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1153.value)*(x1154.value)*(((((-1000.0)*pz))+((x1150*x1151))+((x1150*x1152))+(((-1250.0)*pp*sj16))+(((-83.69875)*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*x1152))+(((-0.778816199376947)*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1153.value)*(x1154.value)*(((((-1000.0)*pz))+((x1150*x1151))+((x1150*x1152))+(((-1250.0)*pp*sj16))+(((-83.69875)*sj16))))))+IKsqr(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*x1152))+(((-0.778816199376947)*x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1153.value)*(x1154.value)*(((((-1000.0)*pz))+((x1150*x1151))+((x1150*x1152))+(((-1250.0)*pp*sj16))+(((-83.69875)*sj16))))), ((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*x1152))+(((-0.778816199376947)*x1151))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1155=IKcos(j18);
IkReal x1156=IKsin(j18);
IkReal x1157=(cj17*sj16);
IkReal x1158=(cj16*cj17);
IkReal x1159=(cj15*px);
IkReal x1160=((1.0)*cj16);
IkReal x1161=(py*sj15);
IkReal x1162=(px*sj15);
IkReal x1163=((0.321)*x1156);
IkReal x1164=((0.321)*x1155);
IkReal x1165=((1.0)*cj15*py);
evalcond[0]=(x1162+((sj17*x1163))+(((-1.0)*x1165)));
evalcond[1]=((0.253041)+(((0.2)*x1159))+(((0.2568)*x1155))+(((-1.0)*pp))+(((0.2)*x1161)));
evalcond[2]=(((sj16*x1164))+(((0.4)*sj16))+pz+((x1158*x1163)));
evalcond[3]=((0.4)+x1164+(((-1.0)*x1159*x1160))+((pz*sj16))+(((-1.0)*x1160*x1161))+(((0.1)*cj16)));
evalcond[4]=((0.1)+((cj16*x1164))+(((-1.0)*x1159))+(((0.4)*cj16))+(((-1.0)*x1157*x1163))+(((-1.0)*x1161)));
evalcond[5]=(((pz*x1158))+x1163+((sj17*x1162))+(((-1.0)*sj17*x1165))+((x1157*x1161))+(((-0.1)*x1157))+((x1157*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(sj17,-1);
if(!x1166.valid){
continue;
}
if( IKabs(((0.00311526479750779)*(x1166.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(x1166.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))))+IKsqr(((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(x1166.value)*(((((-1000.0)*px*sj15))+(((1000.0)*cj15*py))))), ((-0.98536214953271)+(((3.89408099688474)*pp))+(((-0.778816199376947)*cj15*px))+(((-0.778816199376947)*py*sj15))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1167=IKcos(j18);
IkReal x1168=IKsin(j18);
IkReal x1169=(cj17*sj16);
IkReal x1170=(cj16*cj17);
IkReal x1171=(cj15*px);
IkReal x1172=((1.0)*cj16);
IkReal x1173=(py*sj15);
IkReal x1174=(px*sj15);
IkReal x1175=((0.321)*x1168);
IkReal x1176=((0.321)*x1167);
IkReal x1177=((1.0)*cj15*py);
evalcond[0]=(x1174+((sj17*x1175))+(((-1.0)*x1177)));
evalcond[1]=((0.253041)+(((0.2568)*x1167))+(((0.2)*x1171))+(((0.2)*x1173))+(((-1.0)*pp)));
evalcond[2]=(((sj16*x1176))+(((0.4)*sj16))+pz+((x1170*x1175)));
evalcond[3]=((0.4)+x1176+(((-1.0)*x1172*x1173))+((pz*sj16))+(((-1.0)*x1171*x1172))+(((0.1)*cj16)));
evalcond[4]=((0.1)+((cj16*x1176))+(((0.4)*cj16))+(((-1.0)*x1169*x1175))+(((-1.0)*x1171))+(((-1.0)*x1173)));
evalcond[5]=(x1175+((sj17*x1174))+(((-1.0)*sj17*x1177))+((pz*x1170))+(((-0.1)*x1169))+((x1169*x1173))+((x1169*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x194=((1.0)*cj17);
IkReal x195=(cj18*sj16);
IkReal x196=(cj16*sj17);
IkReal x197=(sj16*sj18);
IkReal x198=(sj16*sj17);
IkReal x199=(cj16*cj18);
IkReal x200=(sj17*sj18);
IkReal x201=(cj16*sj18);
IkReal x202=(cj18*sj15*sj17);
IkReal x203=((((-1.0)*x194*x199))+x197);
IkReal x204=(((sj15*x198))+((cj15*cj17)));
IkReal x205=(((cj15*x198))+(((-1.0)*sj15*x194)));
IkReal x206=((((-1.0)*x194*x197))+x199);
IkReal x207=(cj15*x206);
IkReal x208=((((-1.0)*x194*x195))+(((-1.0)*x201)));
IkReal x209=((((-1.0)*x194*x201))+(((-1.0)*x195)));
IkReal x210=(cj15*x208);
IkReal x211=(((cj15*x200))+((sj15*x206)));
IkReal x212=((((-1.0)*sj15*x200))+x207);
IkReal x213=(((cj15*cj18*sj17))+((sj15*x208)));
IkReal x214=(x210+(((-1.0)*x202)));
new_r00=(((r20*x203))+((r00*x214))+((r10*x213)));
new_r01=(((r11*x213))+((r21*x203))+((r01*x214)));
new_r02=(((r02*((x210+(((-1.0)*x202))))))+((r22*x203))+((r12*x213)));
new_r10=(((r20*x196))+((r00*x205))+((r10*x204)));
new_r11=(((r11*x204))+((r01*x205))+((r21*x196)));
new_r12=(((r22*x196))+((r12*x204))+((r02*x205)));
new_r20=(((r00*(((((-1.0)*sj15*x200))+x207))))+((r20*x209))+((r10*x211)));
new_r21=(((r11*x211))+((r21*x209))+((r01*x212)));
new_r22=(((r22*x209))+((r12*x211))+((r02*x212)));
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
cj20array[0]=new_r22;
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal j19eval[2];
IkReal x215=((1.0)*cj17);
IkReal x216=(cj18*sj16);
IkReal x217=(cj16*sj17);
IkReal x218=(sj16*sj18);
IkReal x219=(sj16*sj17);
IkReal x220=(cj16*cj18);
IkReal x221=(sj17*sj18);
IkReal x222=(cj16*sj18);
IkReal x223=(cj18*sj15*sj17);
IkReal x224=((((-1.0)*x215*x220))+x218);
IkReal x225=x204;
IkReal x226=x205;
IkReal x227=(x220+(((-1.0)*x215*x218)));
IkReal x228=(cj15*x227);
IkReal x229=x208;
IkReal x230=x209;
IkReal x231=(cj15*x229);
IkReal x232=(((cj15*x221))+((sj15*x227)));
IkReal x233=(x228+(((-1.0)*sj15*x221)));
IkReal x234=(((cj15*cj18*sj17))+((sj15*x229)));
IkReal x235=(x231+(((-1.0)*x223)));
new_r00=(((r20*x224))+((r10*x234))+((r00*x235)));
new_r01=(((r11*x234))+((r01*x235))+((r21*x224)));
new_r02=(((r02*((x231+(((-1.0)*x223))))))+((r22*x224))+((r12*x234)));
new_r10=(((r00*x226))+((r10*x225))+((r20*x217)));
new_r11=(((r21*x217))+((r01*x226))+((r11*x225)));
new_r12=(((r12*x225))+((r22*x217))+((r02*x226)));
new_r20=(((r10*x232))+((r00*((x228+(((-1.0)*sj15*x221))))))+((r20*x230)));
new_r21=(((r11*x232))+((r01*x233))+((r21*x230)));
new_r22=(((r02*x233))+((r12*x232))+((r22*x230)));
j19eval[0]=sj20;
j19eval[1]=IKsign(sj20);
if( IKabs(j19eval[0]) < 0.0000010000000000  || IKabs(j19eval[1]) < 0.0000010000000000  )
{
{
IkReal j19eval[1];
IkReal x236=((1.0)*cj17);
IkReal x237=(cj18*sj16);
IkReal x238=(cj16*sj17);
IkReal x239=(sj16*sj18);
IkReal x240=(sj16*sj17);
IkReal x241=(cj16*cj18);
IkReal x242=(sj17*sj18);
IkReal x243=(cj16*sj18);
IkReal x244=(cj18*sj15*sj17);
IkReal x245=((((-1.0)*x236*x241))+x239);
IkReal x246=x204;
IkReal x247=x205;
IkReal x248=(x241+(((-1.0)*x236*x239)));
IkReal x249=(cj15*x248);
IkReal x250=x208;
IkReal x251=x209;
IkReal x252=(cj15*x250);
IkReal x253=(((sj15*x248))+((cj15*x242)));
IkReal x254=(x249+(((-1.0)*sj15*x242)));
IkReal x255=(((cj15*cj18*sj17))+((sj15*x250)));
IkReal x256=((((-1.0)*x244))+x252);
new_r00=(((r00*x256))+((r10*x255))+((r20*x245)));
new_r01=(((r11*x255))+((r01*x256))+((r21*x245)));
new_r02=(((r22*x245))+((r12*x255))+((r02*(((((-1.0)*x244))+x252)))));
new_r10=(((r20*x238))+((r00*x247))+((r10*x246)));
new_r11=(((r01*x247))+((r11*x246))+((r21*x238)));
new_r12=(((r02*x247))+((r12*x246))+((r22*x238)));
new_r20=(((r20*x251))+((r10*x253))+((r00*((x249+(((-1.0)*sj15*x242)))))));
new_r21=(((r21*x251))+((r11*x253))+((r01*x254)));
new_r22=(((r12*x253))+((r22*x251))+((r02*x254)));
j19eval[0]=sj20;
if( IKabs(j19eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x258 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x258.valid){
continue;
}
IkReal x257=x258.value;
j19array[0]=((-1.0)*x257);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x257)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j19))))+((new_r12*(IKcos(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x259=((1.0)*sj19);
if( IKabs(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x259))+((cj19*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x259))))+IKsqr(((((-1.0)*new_r01*x259))+((cj19*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x259))), ((((-1.0)*new_r01*x259))+((cj19*new_r00))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x260=IKsin(j21);
IkReal x261=IKcos(j21);
IkReal x262=((1.0)*sj19);
IkReal x263=((1.0)*x261);
IkReal x264=(sj19*x260);
IkReal x265=((1.0)*x260);
IkReal x266=(cj19*x263);
evalcond[0]=(x260+((cj19*new_r01))+((new_r11*sj19)));
evalcond[1]=(((cj19*x260))+((sj19*x261))+new_r01);
evalcond[2]=((((-1.0)*x263))+((new_r10*sj19))+((cj19*new_r00)));
evalcond[3]=((((-1.0)*new_r00*x262))+((cj19*new_r10))+(((-1.0)*x265)));
evalcond[4]=((((-1.0)*new_r01*x262))+((cj19*new_r11))+(((-1.0)*x263)));
evalcond[5]=(x264+new_r00+(((-1.0)*x266)));
evalcond[6]=(x264+new_r11+(((-1.0)*x266)));
evalcond[7]=((((-1.0)*x261*x262))+new_r10+(((-1.0)*cj19*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x268 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x268.valid){
continue;
}
IkReal x267=x268.value;
j19array[0]=((-1.0)*x267);
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.0)*x267)));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j19))))+((new_r12*(IKcos(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x269=((1.0)*sj19);
if( IKabs(((((-1.0)*new_r00*x269))+((cj19*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x269))+(((-1.0)*cj19*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x269))+((cj19*new_r01))))+IKsqr(((((-1.0)*new_r01*x269))+(((-1.0)*cj19*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*new_r00*x269))+((cj19*new_r01))), ((((-1.0)*new_r01*x269))+(((-1.0)*cj19*new_r00))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x270=IKsin(j21);
IkReal x271=IKcos(j21);
IkReal x272=((1.0)*cj19);
IkReal x273=((1.0)*sj19);
IkReal x274=((1.0)*x270);
IkReal x275=(sj19*x271);
IkReal x276=(sj19*x270);
IkReal x277=(x270*x272);
evalcond[0]=(x271+((new_r10*sj19))+((cj19*new_r00)));
evalcond[1]=((((-1.0)*x274))+((cj19*new_r01))+((new_r11*sj19)));
evalcond[2]=(x276+((cj19*x271))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x273))+(((-1.0)*x274))+((cj19*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x273))+(((-1.0)*x271))+((cj19*new_r11)));
evalcond[5]=(x275+(((-1.0)*x277))+new_r01);
evalcond[6]=(x275+(((-1.0)*x277))+new_r10);
evalcond[7]=((((-1.0)*x271*x272))+(((-1.0)*x270*x273))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j19, j21]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x279=IKPowWithIntegerCheck(sj20,-1);
if(!x279.valid){
continue;
}
IkReal x278=x279.value;
CheckValue<IkReal> x280=IKPowWithIntegerCheck(new_r12,-1);
if(!x280.valid){
continue;
}
if( IKabs((x278*(x280.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj20*cj20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x278)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x278*(x280.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj20*cj20)))))))+IKsqr((new_r02*x278))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19array[0]=IKatan2((x278*(x280.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj20*cj20)))))), (new_r02*x278));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x281=IKcos(j19);
IkReal x282=IKsin(j19);
IkReal x283=((1.0)*sj20);
IkReal x284=(new_r02*x281);
IkReal x285=(new_r12*x282);
IkReal x286=(sj20*x281);
IkReal x287=(sj20*x282);
evalcond[0]=((((-1.0)*x281*x283))+new_r02);
evalcond[1]=((((-1.0)*x282*x283))+new_r12);
evalcond[2]=(((new_r12*x281))+(((-1.0)*new_r02*x282)));
evalcond[3]=(x285+x284+(((-1.0)*x283)));
evalcond[4]=(((cj20*new_r20))+((new_r00*x286))+((new_r10*x287)));
evalcond[5]=(((cj20*new_r21))+((new_r11*x287))+((new_r01*x286)));
evalcond[6]=((-1.0)+((sj20*x285))+((sj20*x284))+((cj20*new_r22)));
evalcond[7]=(((cj20*x284))+((cj20*x285))+(((-1.0)*new_r22*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j21eval[2];
IkReal x288=((1.0)*cj17);
IkReal x289=(cj18*sj16);
IkReal x290=(cj16*sj17);
IkReal x291=(sj16*sj18);
IkReal x292=(sj16*sj17);
IkReal x293=(cj16*cj18);
IkReal x294=(sj17*sj18);
IkReal x295=(cj16*sj18);
IkReal x296=(cj18*sj15*sj17);
IkReal x297=(x291+(((-1.0)*x288*x293)));
IkReal x298=x204;
IkReal x299=x205;
IkReal x300=(x293+(((-1.0)*x288*x291)));
IkReal x301=(cj15*x300);
IkReal x302=x208;
IkReal x303=x209;
IkReal x304=(cj15*x302);
IkReal x305=(((sj15*x300))+((cj15*x294)));
IkReal x306=((((-1.0)*sj15*x294))+x301);
IkReal x307=(((cj15*cj18*sj17))+((sj15*x302)));
IkReal x308=((((-1.0)*x296))+x304);
new_r00=(((r20*x297))+((r10*x307))+((r00*x308)));
new_r01=(((r11*x307))+((r01*x308))+((r21*x297)));
new_r02=(((r02*(((((-1.0)*x296))+x304))))+((r22*x297))+((r12*x307)));
new_r10=(((r20*x290))+((r00*x299))+((r10*x298)));
new_r11=(((r01*x299))+((r21*x290))+((r11*x298)));
new_r12=(((r12*x298))+((r02*x299))+((r22*x290)));
new_r20=(((r00*(((((-1.0)*sj15*x294))+x301))))+((r20*x303))+((r10*x305)));
new_r21=(((r11*x305))+((r21*x303))+((r01*x306)));
new_r22=(((r22*x303))+((r02*x306))+((r12*x305)));
j21eval[0]=sj20;
j21eval[1]=IKsign(sj20);
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j21eval[2];
IkReal x309=((1.0)*cj17);
IkReal x310=(cj18*sj16);
IkReal x311=(cj16*sj17);
IkReal x312=(sj16*sj18);
IkReal x313=(sj16*sj17);
IkReal x314=(cj16*cj18);
IkReal x315=(sj17*sj18);
IkReal x316=(cj16*sj18);
IkReal x317=(cj18*sj15*sj17);
IkReal x318=(x312+(((-1.0)*x309*x314)));
IkReal x319=x204;
IkReal x320=x205;
IkReal x321=(x314+(((-1.0)*x309*x312)));
IkReal x322=(cj15*x321);
IkReal x323=x208;
IkReal x324=x209;
IkReal x325=(cj15*x323);
IkReal x326=(((cj15*x315))+((sj15*x321)));
IkReal x327=(x322+(((-1.0)*sj15*x315)));
IkReal x328=(((cj15*cj18*sj17))+((sj15*x323)));
IkReal x329=(x325+(((-1.0)*x317)));
new_r00=(((r00*x329))+((r20*x318))+((r10*x328)));
new_r01=(((r11*x328))+((r01*x329))+((r21*x318)));
new_r02=(((r02*((x325+(((-1.0)*x317))))))+((r12*x328))+((r22*x318)));
new_r10=(((r00*x320))+((r20*x311))+((r10*x319)));
new_r11=(((r11*x319))+((r01*x320))+((r21*x311)));
new_r12=(((r02*x320))+((r12*x319))+((r22*x311)));
new_r20=(((r20*x324))+((r10*x326))+((r00*((x322+(((-1.0)*sj15*x315)))))));
new_r21=(((r21*x324))+((r11*x326))+((r01*x327)));
new_r22=(((r02*x327))+((r12*x326))+((r22*x324)));
j21eval[0]=sj20;
j21eval[1]=sj19;
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x330=((1.0)*cj17);
IkReal x331=(cj18*sj16);
IkReal x332=(cj16*sj17);
IkReal x333=(sj16*sj18);
IkReal x334=(sj16*sj17);
IkReal x335=(cj16*cj18);
IkReal x336=(sj17*sj18);
IkReal x337=(cj16*sj18);
IkReal x338=(cj18*sj15*sj17);
IkReal x339=(x333+(((-1.0)*x330*x335)));
IkReal x340=x204;
IkReal x341=x205;
IkReal x342=(x335+(((-1.0)*x330*x333)));
IkReal x343=(cj15*x342);
IkReal x344=x208;
IkReal x345=x209;
IkReal x346=(cj15*x344);
IkReal x347=(((sj15*x342))+((cj15*x336)));
IkReal x348=(x343+(((-1.0)*sj15*x336)));
IkReal x349=(((cj15*cj18*sj17))+((sj15*x344)));
IkReal x350=(x346+(((-1.0)*x338)));
new_r00=(((r00*x350))+((r20*x339))+((r10*x349)));
new_r01=(((r01*x350))+((r21*x339))+((r11*x349)));
new_r02=(((r22*x339))+((r02*((x346+(((-1.0)*x338))))))+((r12*x349)));
new_r10=(((r00*x341))+((r20*x332))+((r10*x340)));
new_r11=(((r01*x341))+((r21*x332))+((r11*x340)));
new_r12=(((r22*x332))+((r02*x341))+((r12*x340)));
new_r20=(((r00*((x343+(((-1.0)*sj15*x336))))))+((r20*x345))+((r10*x347)));
new_r21=(((r01*x348))+((r21*x345))+((r11*x347)));
new_r22=(((r22*x345))+((r02*x348))+((r12*x347)));
j21eval[0]=cj20;
j21eval[1]=sj19;
j21eval[2]=sj20;
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x351=((1.0)*sj19);
IkReal x352=((((-1.0)*new_r02*x351))+((cj19*new_r12)));
IkReal x353=(((new_r10*sj19))+((cj19*new_r00)));
IkReal x354=(((cj19*new_r01))+((new_r11*sj19)));
IkReal x355=((-1.0)+((cj19*new_r02))+((new_r12*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*cj19))+new_r02);
evalcond[3]=((((-1.0)*x351))+new_r12);
evalcond[4]=x352;
evalcond[5]=x352;
evalcond[6]=x355;
evalcond[7]=x354;
evalcond[8]=x353;
evalcond[9]=x353;
evalcond[10]=x354;
evalcond[11]=x355;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x356=IKcos(j21);
IkReal x357=IKsin(j21);
IkReal x358=((1.0)*new_r12);
IkReal x359=((1.0)*x357);
IkReal x360=((1.0)*x356);
evalcond[0]=(x356+new_r20);
evalcond[1]=((((-1.0)*x359))+new_r21);
evalcond[2]=(new_r01+((new_r12*x356)));
evalcond[3]=(new_r00+((new_r12*x357)));
evalcond[4]=(new_r11+(((-1.0)*new_r02*x360)));
evalcond[5]=((((-1.0)*new_r02*x359))+new_r10);
evalcond[6]=((((-1.0)*x359))+((new_r02*new_r10))+(((-1.0)*new_r00*x358)));
evalcond[7]=((((-1.0)*x360))+(((-1.0)*new_r01*x358))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x361=(new_r12*sj19);
IkReal x362=((1.0)*sj19);
IkReal x363=(cj19*new_r00);
IkReal x364=((1.0)*cj19);
IkReal x365=(((cj19*new_r12))+(((-1.0)*new_r02*x362)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj19+new_r02);
evalcond[3]=(sj19+new_r12);
evalcond[4]=x365;
evalcond[5]=x365;
evalcond[6]=((1.0)+x361+((cj19*new_r02)));
evalcond[7]=(((cj19*new_r01))+((new_r11*sj19)));
evalcond[8]=(x363+((new_r10*sj19)));
evalcond[9]=((((-1.0)*x363))+(((-1.0)*new_r10*x362)));
evalcond[10]=((((-1.0)*new_r11*x362))+(((-1.0)*new_r01*x364)));
evalcond[11]=((-1.0)+(((-1.0)*x361))+(((-1.0)*new_r02*x364)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x366=IKcos(j21);
IkReal x367=IKsin(j21);
IkReal x368=((1.0)*new_r02);
IkReal x369=((1.0)*x366);
IkReal x370=((1.0)*x367);
evalcond[0]=(x367+new_r21);
evalcond[1]=((((-1.0)*x369))+new_r20);
evalcond[2]=(new_r11+((new_r02*x366)));
evalcond[3]=(new_r10+((new_r02*x367)));
evalcond[4]=((((-1.0)*new_r12*x369))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x370))+new_r00);
evalcond[6]=((((-1.0)*x370))+((new_r00*new_r12))+(((-1.0)*new_r10*x368)));
evalcond[7]=((((-1.0)*x369))+((new_r01*new_r12))+(((-1.0)*new_r11*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x371=((((-1.0)*cj20))+new_r22);
IkReal x372=((((-1.0)*sj20))+new_r02);
IkReal x373=((1.0)*sj20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j19))), 6.28318530717959)));
evalcond[1]=x371;
evalcond[2]=x371;
evalcond[3]=x372;
evalcond[4]=new_r12;
evalcond[5]=x372;
evalcond[6]=(((new_r00*sj20))+((cj20*new_r20)));
evalcond[7]=(((new_r01*sj20))+((cj20*new_r21)));
evalcond[8]=((-1.0)+((cj20*new_r22))+((new_r02*sj20)));
evalcond[9]=(((cj20*new_r02))+(((-1.0)*new_r22*x373)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x374=IKcos(j21);
IkReal x375=IKsin(j21);
IkReal x376=((1.0)*new_r02);
IkReal x377=((1.0)*x374);
evalcond[0]=(new_r20+((new_r02*x374)));
evalcond[1]=((((-1.0)*x375))+new_r10);
evalcond[2]=((((-1.0)*x377))+new_r11);
evalcond[3]=(new_r01+((new_r22*x375)));
evalcond[4]=(new_r21+(((-1.0)*x375*x376)));
evalcond[5]=((((-1.0)*new_r22*x377))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x376))+((new_r01*new_r22))+x375);
evalcond[7]=((((-1.0)*new_r20*x376))+((new_r00*new_r22))+(((-1.0)*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x378=((((-1.0)*cj20))+new_r22);
IkReal x379=((1.0)*sj20);
IkReal x380=((1.0)*cj20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j19)))), 6.28318530717959)));
evalcond[1]=x378;
evalcond[2]=x378;
evalcond[3]=(sj20+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x379))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r00*x379))+((cj20*new_r20)));
evalcond[7]=(((cj20*new_r21))+(((-1.0)*new_r01*x379)));
evalcond[8]=((-1.0)+((cj20*new_r22))+(((-1.0)*new_r02*x379)));
evalcond[9]=((((-1.0)*new_r22*x379))+(((-1.0)*new_r02*x380)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x381=IKsin(j21);
IkReal x382=IKcos(j21);
IkReal x383=((1.0)*new_r22);
IkReal x384=((1.0)*x382);
evalcond[0]=(((new_r02*x381))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x384))+new_r20);
evalcond[2]=((((-1.0)*x381))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x384))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x381))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*x382*x383)));
evalcond[6]=((((-1.0)*new_r01*x383))+x381+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r00*x383))+(((-1.0)*x384))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x385=((((-1.0)*new_r02*sj19))+((cj19*new_r12)));
IkReal x386=(((cj19*new_r02))+((new_r12*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x385;
evalcond[7]=x385;
evalcond[8]=x386;
evalcond[9]=x386;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x387=((1.0)*sj19);
if( IKabs(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x387))+((cj19*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x387))))+IKsqr(((((-1.0)*new_r01*x387))+((cj19*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x387))), ((((-1.0)*new_r01*x387))+((cj19*new_r00))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x388=IKsin(j21);
IkReal x389=IKcos(j21);
IkReal x390=((1.0)*sj19);
IkReal x391=((1.0)*x389);
IkReal x392=(sj19*x388);
IkReal x393=((1.0)*x388);
IkReal x394=(cj19*x391);
evalcond[0]=(x388+((cj19*new_r01))+((new_r11*sj19)));
evalcond[1]=(((cj19*x388))+new_r01+((sj19*x389)));
evalcond[2]=((((-1.0)*x391))+((new_r10*sj19))+((cj19*new_r00)));
evalcond[3]=((((-1.0)*x393))+((cj19*new_r10))+(((-1.0)*new_r00*x390)));
evalcond[4]=((((-1.0)*new_r01*x390))+(((-1.0)*x391))+((cj19*new_r11)));
evalcond[5]=((((-1.0)*x394))+x392+new_r00);
evalcond[6]=((((-1.0)*x394))+x392+new_r11);
evalcond[7]=((((-1.0)*cj19*x393))+(((-1.0)*x389*x390))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x395=(new_r12*sj19);
IkReal x396=((1.0)*new_r02);
IkReal x397=((((-1.0)*sj19*x396))+((cj19*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x397;
evalcond[7]=x397;
evalcond[8]=(x395+((cj19*new_r02)));
evalcond[9]=((((-1.0)*cj19*x396))+(((-1.0)*x395)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x398=((1.0)*sj19);
if( IKabs(((((-1.0)*new_r00*x398))+((cj19*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x398))+(((-1.0)*cj19*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x398))+((cj19*new_r01))))+IKsqr(((((-1.0)*new_r01*x398))+(((-1.0)*cj19*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*new_r00*x398))+((cj19*new_r01))), ((((-1.0)*new_r01*x398))+(((-1.0)*cj19*new_r00))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x399=IKsin(j21);
IkReal x400=IKcos(j21);
IkReal x401=((1.0)*cj19);
IkReal x402=((1.0)*sj19);
IkReal x403=((1.0)*x399);
IkReal x404=(sj19*x400);
IkReal x405=(sj19*x399);
IkReal x406=(x399*x401);
evalcond[0]=(x400+((new_r10*sj19))+((cj19*new_r00)));
evalcond[1]=(((cj19*new_r01))+((new_r11*sj19))+(((-1.0)*x403)));
evalcond[2]=(x405+new_r00+((cj19*x400)));
evalcond[3]=((((-1.0)*new_r00*x402))+((cj19*new_r10))+(((-1.0)*x403)));
evalcond[4]=(((cj19*new_r11))+(((-1.0)*new_r01*x402))+(((-1.0)*x400)));
evalcond[5]=(x404+new_r01+(((-1.0)*x406)));
evalcond[6]=(x404+new_r10+(((-1.0)*x406)));
evalcond[7]=((((-1.0)*x400*x401))+(((-1.0)*x399*x402))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j21]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x408=IKPowWithIntegerCheck(sj20,-1);
if(!x408.valid){
continue;
}
IkReal x407=x408.value;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(cj20,-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410=IKPowWithIntegerCheck(sj19,-1);
if(!x410.valid){
continue;
}
if( IKabs((x407*(x409.value)*(x410.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x407)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x407*(x409.value)*(x410.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20))))))+IKsqr(((-1.0)*new_r20*x407))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2((x407*(x409.value)*(x410.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20))))), ((-1.0)*new_r20*x407));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x411=IKsin(j21);
IkReal x412=IKcos(j21);
IkReal x413=(cj20*sj19);
IkReal x414=(cj19*new_r01);
IkReal x415=((1.0)*sj20);
IkReal x416=(cj19*new_r00);
IkReal x417=((1.0)*sj19);
IkReal x418=((1.0)*x412);
IkReal x419=(cj20*x411);
IkReal x420=((1.0)*x411);
IkReal x421=(cj19*x418);
evalcond[0]=(((sj20*x412))+new_r20);
evalcond[1]=((((-1.0)*x411*x415))+new_r21);
evalcond[2]=(x414+x419+((new_r11*sj19)));
evalcond[3]=((((-1.0)*x420))+((cj19*new_r10))+(((-1.0)*new_r00*x417)));
evalcond[4]=(((cj19*new_r11))+(((-1.0)*x418))+(((-1.0)*new_r01*x417)));
evalcond[5]=(((cj19*x419))+new_r01+((sj19*x412)));
evalcond[6]=((((-1.0)*cj20*x418))+x416+((new_r10*sj19)));
evalcond[7]=((((-1.0)*cj20*x421))+new_r00+((sj19*x411)));
evalcond[8]=(((x411*x413))+(((-1.0)*x421))+new_r11);
evalcond[9]=((((-1.0)*x413*x418))+new_r10+(((-1.0)*cj19*x420)));
evalcond[10]=(((cj20*x414))+x411+(((-1.0)*new_r21*x415))+((new_r11*x413)));
evalcond[11]=((((-1.0)*new_r20*x415))+((cj20*x416))+((new_r10*x413))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x423=IKPowWithIntegerCheck(sj20,-1);
if(!x423.valid){
continue;
}
IkReal x422=x423.value;
CheckValue<IkReal> x424=IKPowWithIntegerCheck(sj19,-1);
if(!x424.valid){
continue;
}
if( IKabs((new_r21*x422)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x422*(x424.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*x422))+IKsqr((x422*(x424.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2((new_r21*x422), (x422*(x424.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x425=IKsin(j21);
IkReal x426=IKcos(j21);
IkReal x427=(cj20*sj19);
IkReal x428=(cj19*new_r01);
IkReal x429=((1.0)*sj20);
IkReal x430=(cj19*new_r00);
IkReal x431=((1.0)*sj19);
IkReal x432=((1.0)*x426);
IkReal x433=(cj20*x425);
IkReal x434=((1.0)*x425);
IkReal x435=(cj19*x432);
evalcond[0]=(((sj20*x426))+new_r20);
evalcond[1]=((((-1.0)*x425*x429))+new_r21);
evalcond[2]=(x428+x433+((new_r11*sj19)));
evalcond[3]=((((-1.0)*new_r00*x431))+(((-1.0)*x434))+((cj19*new_r10)));
evalcond[4]=((((-1.0)*x432))+(((-1.0)*new_r01*x431))+((cj19*new_r11)));
evalcond[5]=(((cj19*x433))+((sj19*x426))+new_r01);
evalcond[6]=((((-1.0)*cj20*x432))+x430+((new_r10*sj19)));
evalcond[7]=(((sj19*x425))+(((-1.0)*cj20*x435))+new_r00);
evalcond[8]=((((-1.0)*x435))+((x425*x427))+new_r11);
evalcond[9]=((((-1.0)*x427*x432))+(((-1.0)*cj19*x434))+new_r10);
evalcond[10]=(((new_r11*x427))+x425+(((-1.0)*new_r21*x429))+((cj20*x428)));
evalcond[11]=((((-1.0)*x432))+((new_r10*x427))+(((-1.0)*new_r20*x429))+((cj20*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(sj20),-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x436.value)))+(x437.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x438=IKsin(j21);
IkReal x439=IKcos(j21);
IkReal x440=(cj20*sj19);
IkReal x441=(cj19*new_r01);
IkReal x442=((1.0)*sj20);
IkReal x443=(cj19*new_r00);
IkReal x444=((1.0)*sj19);
IkReal x445=((1.0)*x439);
IkReal x446=(cj20*x438);
IkReal x447=((1.0)*x438);
IkReal x448=(cj19*x445);
evalcond[0]=(((sj20*x439))+new_r20);
evalcond[1]=((((-1.0)*x438*x442))+new_r21);
evalcond[2]=(x446+x441+((new_r11*sj19)));
evalcond[3]=((((-1.0)*x447))+(((-1.0)*new_r00*x444))+((cj19*new_r10)));
evalcond[4]=((((-1.0)*x445))+(((-1.0)*new_r01*x444))+((cj19*new_r11)));
evalcond[5]=(((cj19*x446))+((sj19*x439))+new_r01);
evalcond[6]=((((-1.0)*cj20*x445))+x443+((new_r10*sj19)));
evalcond[7]=(((sj19*x438))+(((-1.0)*cj20*x448))+new_r00);
evalcond[8]=((((-1.0)*x448))+((x438*x440))+new_r11);
evalcond[9]=((((-1.0)*cj19*x447))+new_r10+(((-1.0)*x440*x445)));
evalcond[10]=(((new_r11*x440))+x438+((cj20*x441))+(((-1.0)*new_r21*x442)));
evalcond[11]=((((-1.0)*x445))+((new_r10*x440))+(((-1.0)*new_r20*x442))+((cj20*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(IKsign(sj20),-1);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
j19array[0]=((-1.5707963267949)+(((1.5707963267949)*(x449.value)))+(x450.value));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x451=IKcos(j19);
IkReal x452=IKsin(j19);
IkReal x453=((1.0)*sj20);
IkReal x454=(new_r02*x451);
IkReal x455=(new_r12*x452);
IkReal x456=(sj20*x451);
IkReal x457=(sj20*x452);
evalcond[0]=((((-1.0)*x451*x453))+new_r02);
evalcond[1]=((((-1.0)*x452*x453))+new_r12);
evalcond[2]=(((new_r12*x451))+(((-1.0)*new_r02*x452)));
evalcond[3]=((((-1.0)*x453))+x454+x455);
evalcond[4]=(((new_r10*x457))+((new_r00*x456))+((cj20*new_r20)));
evalcond[5]=(((new_r11*x457))+((new_r01*x456))+((cj20*new_r21)));
evalcond[6]=((-1.0)+((sj20*x454))+((sj20*x455))+((cj20*new_r22)));
evalcond[7]=(((cj20*x455))+((cj20*x454))+(((-1.0)*new_r22*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j21eval[2];
IkReal x458=((1.0)*cj17);
IkReal x459=(cj18*sj16);
IkReal x460=(cj16*sj17);
IkReal x461=(sj16*sj18);
IkReal x462=(sj16*sj17);
IkReal x463=(cj16*cj18);
IkReal x464=(sj17*sj18);
IkReal x465=(cj16*sj18);
IkReal x466=(cj18*sj15*sj17);
IkReal x467=(x461+(((-1.0)*x458*x463)));
IkReal x468=x204;
IkReal x469=x205;
IkReal x470=(x463+(((-1.0)*x458*x461)));
IkReal x471=(cj15*x470);
IkReal x472=x208;
IkReal x473=x209;
IkReal x474=(cj15*x472);
IkReal x475=(((cj15*x464))+((sj15*x470)));
IkReal x476=(x471+(((-1.0)*sj15*x464)));
IkReal x477=(((cj15*cj18*sj17))+((sj15*x472)));
IkReal x478=((((-1.0)*x466))+x474);
new_r00=(((r10*x477))+((r20*x467))+((r00*x478)));
new_r01=(((r11*x477))+((r21*x467))+((r01*x478)));
new_r02=(((r22*x467))+((r02*(((((-1.0)*x466))+x474))))+((r12*x477)));
new_r10=(((r20*x460))+((r00*x469))+((r10*x468)));
new_r11=(((r11*x468))+((r01*x469))+((r21*x460)));
new_r12=(((r22*x460))+((r12*x468))+((r02*x469)));
new_r20=(((r10*x475))+((r20*x473))+((r00*((x471+(((-1.0)*sj15*x464)))))));
new_r21=(((r21*x473))+((r11*x475))+((r01*x476)));
new_r22=(((r02*x476))+((r12*x475))+((r22*x473)));
j21eval[0]=sj20;
j21eval[1]=IKsign(sj20);
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j21eval[2];
IkReal x479=((1.0)*cj17);
IkReal x480=(cj18*sj16);
IkReal x481=(cj16*sj17);
IkReal x482=(sj16*sj18);
IkReal x483=(sj16*sj17);
IkReal x484=(cj16*cj18);
IkReal x485=(sj17*sj18);
IkReal x486=(cj16*sj18);
IkReal x487=(cj18*sj15*sj17);
IkReal x488=(x482+(((-1.0)*x479*x484)));
IkReal x489=x204;
IkReal x490=x205;
IkReal x491=(x484+(((-1.0)*x479*x482)));
IkReal x492=(cj15*x491);
IkReal x493=x208;
IkReal x494=x209;
IkReal x495=(cj15*x493);
IkReal x496=(((cj15*x485))+((sj15*x491)));
IkReal x497=((((-1.0)*sj15*x485))+x492);
IkReal x498=(((cj15*cj18*sj17))+((sj15*x493)));
IkReal x499=((((-1.0)*x487))+x495);
new_r00=(((r20*x488))+((r10*x498))+((r00*x499)));
new_r01=(((r11*x498))+((r21*x488))+((r01*x499)));
new_r02=(((r02*(((((-1.0)*x487))+x495))))+((r12*x498))+((r22*x488)));
new_r10=(((r20*x481))+((r10*x489))+((r00*x490)));
new_r11=(((r11*x489))+((r21*x481))+((r01*x490)));
new_r12=(((r02*x490))+((r12*x489))+((r22*x481)));
new_r20=(((r10*x496))+((r00*(((((-1.0)*sj15*x485))+x492))))+((r20*x494)));
new_r21=(((r11*x496))+((r21*x494))+((r01*x497)));
new_r22=(((r02*x497))+((r22*x494))+((r12*x496)));
j21eval[0]=sj20;
j21eval[1]=sj19;
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  )
{
{
IkReal j21eval[3];
IkReal x500=((1.0)*cj17);
IkReal x501=(cj18*sj16);
IkReal x502=(cj16*sj17);
IkReal x503=(sj16*sj18);
IkReal x504=(sj16*sj17);
IkReal x505=(cj16*cj18);
IkReal x506=(sj17*sj18);
IkReal x507=(cj16*sj18);
IkReal x508=(cj18*sj15*sj17);
IkReal x509=(x503+(((-1.0)*x500*x505)));
IkReal x510=x204;
IkReal x511=x205;
IkReal x512=(x505+(((-1.0)*x500*x503)));
IkReal x513=(cj15*x512);
IkReal x514=x208;
IkReal x515=x209;
IkReal x516=(cj15*x514);
IkReal x517=(((cj15*x506))+((sj15*x512)));
IkReal x518=((((-1.0)*sj15*x506))+x513);
IkReal x519=(((cj15*cj18*sj17))+((sj15*x514)));
IkReal x520=(x516+(((-1.0)*x508)));
new_r00=(((r20*x509))+((r10*x519))+((r00*x520)));
new_r01=(((r11*x519))+((r21*x509))+((r01*x520)));
new_r02=(((r22*x509))+((r02*((x516+(((-1.0)*x508))))))+((r12*x519)));
new_r10=(((r20*x502))+((r10*x510))+((r00*x511)));
new_r11=(((r01*x511))+((r11*x510))+((r21*x502)));
new_r12=(((r22*x502))+((r02*x511))+((r12*x510)));
new_r20=(((r00*(((((-1.0)*sj15*x506))+x513))))+((r20*x515))+((r10*x517)));
new_r21=(((r01*x518))+((r11*x517))+((r21*x515)));
new_r22=(((r02*x518))+((r22*x515))+((r12*x517)));
j21eval[0]=cj20;
j21eval[1]=sj19;
j21eval[2]=sj20;
if( IKabs(j21eval[0]) < 0.0000010000000000  || IKabs(j21eval[1]) < 0.0000010000000000  || IKabs(j21eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x521=((1.0)*sj19);
IkReal x522=((((-1.0)*new_r02*x521))+((cj19*new_r12)));
IkReal x523=(((new_r10*sj19))+((cj19*new_r00)));
IkReal x524=(((cj19*new_r01))+((new_r11*sj19)));
IkReal x525=((-1.0)+((cj19*new_r02))+((new_r12*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*cj19))+new_r02);
evalcond[3]=((((-1.0)*x521))+new_r12);
evalcond[4]=x522;
evalcond[5]=x522;
evalcond[6]=x525;
evalcond[7]=x524;
evalcond[8]=x523;
evalcond[9]=x523;
evalcond[10]=x524;
evalcond[11]=x525;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x526=IKcos(j21);
IkReal x527=IKsin(j21);
IkReal x528=((1.0)*new_r12);
IkReal x529=((1.0)*x527);
IkReal x530=((1.0)*x526);
evalcond[0]=(x526+new_r20);
evalcond[1]=((((-1.0)*x529))+new_r21);
evalcond[2]=(((new_r12*x526))+new_r01);
evalcond[3]=(((new_r12*x527))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x530)));
evalcond[5]=((((-1.0)*new_r02*x529))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x528))+(((-1.0)*x529))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x530))+(((-1.0)*new_r01*x528))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x531=(new_r12*sj19);
IkReal x532=((1.0)*sj19);
IkReal x533=(cj19*new_r00);
IkReal x534=((1.0)*cj19);
IkReal x535=(((cj19*new_r12))+(((-1.0)*new_r02*x532)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j20)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj19+new_r02);
evalcond[3]=(sj19+new_r12);
evalcond[4]=x535;
evalcond[5]=x535;
evalcond[6]=((1.0)+x531+((cj19*new_r02)));
evalcond[7]=(((cj19*new_r01))+((new_r11*sj19)));
evalcond[8]=(x533+((new_r10*sj19)));
evalcond[9]=((((-1.0)*x533))+(((-1.0)*new_r10*x532)));
evalcond[10]=((((-1.0)*new_r11*x532))+(((-1.0)*new_r01*x534)));
evalcond[11]=((-1.0)+(((-1.0)*x531))+(((-1.0)*new_r02*x534)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x536=IKcos(j21);
IkReal x537=IKsin(j21);
IkReal x538=((1.0)*new_r02);
IkReal x539=((1.0)*x536);
IkReal x540=((1.0)*x537);
evalcond[0]=(x537+new_r21);
evalcond[1]=((((-1.0)*x539))+new_r20);
evalcond[2]=(((new_r02*x536))+new_r11);
evalcond[3]=(((new_r02*x537))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x539))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x540))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*x540))+(((-1.0)*new_r10*x538)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*x539))+(((-1.0)*new_r11*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x541=((((-1.0)*cj20))+new_r22);
IkReal x542=((((-1.0)*sj20))+new_r02);
IkReal x543=((1.0)*sj20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j19))), 6.28318530717959)));
evalcond[1]=x541;
evalcond[2]=x541;
evalcond[3]=x542;
evalcond[4]=new_r12;
evalcond[5]=x542;
evalcond[6]=(((new_r00*sj20))+((cj20*new_r20)));
evalcond[7]=(((new_r01*sj20))+((cj20*new_r21)));
evalcond[8]=((-1.0)+((cj20*new_r22))+((new_r02*sj20)));
evalcond[9]=((((-1.0)*new_r22*x543))+((cj20*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x544=IKcos(j21);
IkReal x545=IKsin(j21);
IkReal x546=((1.0)*new_r02);
IkReal x547=((1.0)*x544);
evalcond[0]=(((new_r02*x544))+new_r20);
evalcond[1]=((((-1.0)*x545))+new_r10);
evalcond[2]=((((-1.0)*x547))+new_r11);
evalcond[3]=(((new_r22*x545))+new_r01);
evalcond[4]=((((-1.0)*x545*x546))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x547))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x546))+x545);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x546))+(((-1.0)*x547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x548=((((-1.0)*cj20))+new_r22);
IkReal x549=((1.0)*sj20);
IkReal x550=((1.0)*cj20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j19)))), 6.28318530717959)));
evalcond[1]=x548;
evalcond[2]=x548;
evalcond[3]=(sj20+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x549))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r00*x549))+((cj20*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x549))+((cj20*new_r21)));
evalcond[8]=((-1.0)+((cj20*new_r22))+(((-1.0)*new_r02*x549)));
evalcond[9]=((((-1.0)*new_r22*x549))+(((-1.0)*new_r02*x550)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x551=IKsin(j21);
IkReal x552=IKcos(j21);
IkReal x553=((1.0)*new_r22);
IkReal x554=((1.0)*x552);
evalcond[0]=(((new_r02*x551))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x554)));
evalcond[2]=((((-1.0)*x551))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x554))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x551)));
evalcond[5]=((((-1.0)*x552*x553))+(((-1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r01*x553))+x551+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r00*x553))+(((-1.0)*x554))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x555=((((-1.0)*new_r02*sj19))+((cj19*new_r12)));
IkReal x556=(((cj19*new_r02))+((new_r12*sj19)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j20))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x555;
evalcond[7]=x555;
evalcond[8]=x556;
evalcond[9]=x556;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x557=((1.0)*sj19);
if( IKabs(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x557))+((cj19*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x557))))+IKsqr(((((-1.0)*new_r01*x557))+((cj19*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*cj19*new_r01))+(((-1.0)*new_r00*x557))), ((((-1.0)*new_r01*x557))+((cj19*new_r00))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x558=IKsin(j21);
IkReal x559=IKcos(j21);
IkReal x560=((1.0)*sj19);
IkReal x561=((1.0)*x559);
IkReal x562=(sj19*x558);
IkReal x563=((1.0)*x558);
IkReal x564=(cj19*x561);
evalcond[0]=(x558+((cj19*new_r01))+((new_r11*sj19)));
evalcond[1]=(((cj19*x558))+new_r01+((sj19*x559)));
evalcond[2]=(((new_r10*sj19))+((cj19*new_r00))+(((-1.0)*x561)));
evalcond[3]=((((-1.0)*new_r00*x560))+((cj19*new_r10))+(((-1.0)*x563)));
evalcond[4]=(((cj19*new_r11))+(((-1.0)*x561))+(((-1.0)*new_r01*x560)));
evalcond[5]=(x562+new_r00+(((-1.0)*x564)));
evalcond[6]=(x562+new_r11+(((-1.0)*x564)));
evalcond[7]=((((-1.0)*x559*x560))+(((-1.0)*cj19*x563))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x565=(new_r12*sj19);
IkReal x566=((1.0)*new_r02);
IkReal x567=((((-1.0)*sj19*x566))+((cj19*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j20)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x567;
evalcond[7]=x567;
evalcond[8]=(x565+((cj19*new_r02)));
evalcond[9]=((((-1.0)*x565))+(((-1.0)*cj19*x566)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x568=((1.0)*sj19);
if( IKabs(((((-1.0)*new_r00*x568))+((cj19*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj19*new_r00))+(((-1.0)*new_r01*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x568))+((cj19*new_r01))))+IKsqr(((((-1.0)*cj19*new_r00))+(((-1.0)*new_r01*x568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.0)*new_r00*x568))+((cj19*new_r01))), ((((-1.0)*cj19*new_r00))+(((-1.0)*new_r01*x568))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x569=IKsin(j21);
IkReal x570=IKcos(j21);
IkReal x571=((1.0)*cj19);
IkReal x572=((1.0)*sj19);
IkReal x573=((1.0)*x569);
IkReal x574=(sj19*x570);
IkReal x575=(sj19*x569);
IkReal x576=(x569*x571);
evalcond[0]=(x570+((new_r10*sj19))+((cj19*new_r00)));
evalcond[1]=((((-1.0)*x573))+((cj19*new_r01))+((new_r11*sj19)));
evalcond[2]=(((cj19*x570))+x575+new_r00);
evalcond[3]=((((-1.0)*x573))+(((-1.0)*new_r00*x572))+((cj19*new_r10)));
evalcond[4]=((((-1.0)*x570))+(((-1.0)*new_r01*x572))+((cj19*new_r11)));
evalcond[5]=((((-1.0)*x576))+x574+new_r01);
evalcond[6]=((((-1.0)*x576))+x574+new_r10);
evalcond[7]=((((-1.0)*x569*x572))+(((-1.0)*x570*x571))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j21]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x578=IKPowWithIntegerCheck(sj20,-1);
if(!x578.valid){
continue;
}
IkReal x577=x578.value;
CheckValue<IkReal> x579=IKPowWithIntegerCheck(cj20,-1);
if(!x579.valid){
continue;
}
CheckValue<IkReal> x580=IKPowWithIntegerCheck(sj19,-1);
if(!x580.valid){
continue;
}
if( IKabs((x577*(x579.value)*(x580.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x577)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x577*(x579.value)*(x580.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20))))))+IKsqr(((-1.0)*new_r20*x577))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2((x577*(x579.value)*(x580.value)*(((((-1.0)*new_r11*sj20))+(((-1.0)*cj19*new_r20))))), ((-1.0)*new_r20*x577));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x581=IKsin(j21);
IkReal x582=IKcos(j21);
IkReal x583=(cj20*sj19);
IkReal x584=(cj19*new_r01);
IkReal x585=((1.0)*sj20);
IkReal x586=(cj19*new_r00);
IkReal x587=((1.0)*sj19);
IkReal x588=((1.0)*x582);
IkReal x589=(cj20*x581);
IkReal x590=((1.0)*x581);
IkReal x591=(cj19*x588);
evalcond[0]=(((sj20*x582))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x581*x585)));
evalcond[2]=(x584+x589+((new_r11*sj19)));
evalcond[3]=((((-1.0)*x590))+((cj19*new_r10))+(((-1.0)*new_r00*x587)));
evalcond[4]=((((-1.0)*new_r01*x587))+((cj19*new_r11))+(((-1.0)*x588)));
evalcond[5]=(((sj19*x582))+((cj19*x589))+new_r01);
evalcond[6]=(x586+((new_r10*sj19))+(((-1.0)*cj20*x588)));
evalcond[7]=((((-1.0)*cj20*x591))+((sj19*x581))+new_r00);
evalcond[8]=(((x581*x583))+(((-1.0)*x591))+new_r11);
evalcond[9]=((((-1.0)*cj19*x590))+(((-1.0)*x583*x588))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x585))+((cj20*x584))+x581+((new_r11*x583)));
evalcond[11]=((((-1.0)*new_r20*x585))+((cj20*x586))+(((-1.0)*x588))+((new_r10*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x593=IKPowWithIntegerCheck(sj20,-1);
if(!x593.valid){
continue;
}
IkReal x592=x593.value;
CheckValue<IkReal> x594=IKPowWithIntegerCheck(sj19,-1);
if(!x594.valid){
continue;
}
if( IKabs((new_r21*x592)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x592*(x594.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*x592))+IKsqr((x592*(x594.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2((new_r21*x592), (x592*(x594.value)*(((((-1.0)*new_r01*sj20))+(((-1.0)*cj19*cj20*new_r21))))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x595=IKsin(j21);
IkReal x596=IKcos(j21);
IkReal x597=(cj20*sj19);
IkReal x598=(cj19*new_r01);
IkReal x599=((1.0)*sj20);
IkReal x600=(cj19*new_r00);
IkReal x601=((1.0)*sj19);
IkReal x602=((1.0)*x596);
IkReal x603=(cj20*x595);
IkReal x604=((1.0)*x595);
IkReal x605=(cj19*x602);
evalcond[0]=(((sj20*x596))+new_r20);
evalcond[1]=((((-1.0)*x595*x599))+new_r21);
evalcond[2]=(x598+x603+((new_r11*sj19)));
evalcond[3]=((((-1.0)*x604))+((cj19*new_r10))+(((-1.0)*new_r00*x601)));
evalcond[4]=((((-1.0)*x602))+((cj19*new_r11))+(((-1.0)*new_r01*x601)));
evalcond[5]=(((sj19*x596))+((cj19*x603))+new_r01);
evalcond[6]=((((-1.0)*cj20*x602))+x600+((new_r10*sj19)));
evalcond[7]=(((sj19*x595))+(((-1.0)*cj20*x605))+new_r00);
evalcond[8]=(((x595*x597))+(((-1.0)*x605))+new_r11);
evalcond[9]=((((-1.0)*cj19*x604))+(((-1.0)*x597*x602))+new_r10);
evalcond[10]=(((cj20*x598))+(((-1.0)*new_r21*x599))+((new_r11*x597))+x595);
evalcond[11]=((((-1.0)*new_r20*x599))+((new_r10*x597))+((cj20*x600))+(((-1.0)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(IKsign(sj20),-1);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
j21array[0]=((-1.5707963267949)+(((1.5707963267949)*(x606.value)))+(x607.value));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x608=IKsin(j21);
IkReal x609=IKcos(j21);
IkReal x610=(cj20*sj19);
IkReal x611=(cj19*new_r01);
IkReal x612=((1.0)*sj20);
IkReal x613=(cj19*new_r00);
IkReal x614=((1.0)*sj19);
IkReal x615=((1.0)*x609);
IkReal x616=(cj20*x608);
IkReal x617=((1.0)*x608);
IkReal x618=(cj19*x615);
evalcond[0]=(((sj20*x609))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x608*x612)));
evalcond[2]=(x616+x611+((new_r11*sj19)));
evalcond[3]=((((-1.0)*x617))+(((-1.0)*new_r00*x614))+((cj19*new_r10)));
evalcond[4]=((((-1.0)*x615))+((cj19*new_r11))+(((-1.0)*new_r01*x614)));
evalcond[5]=(((sj19*x609))+((cj19*x616))+new_r01);
evalcond[6]=((((-1.0)*cj20*x615))+x613+((new_r10*sj19)));
evalcond[7]=(((sj19*x608))+(((-1.0)*cj20*x618))+new_r00);
evalcond[8]=(((x608*x610))+(((-1.0)*x618))+new_r11);
evalcond[9]=((((-1.0)*x610*x615))+(((-1.0)*cj19*x617))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x612))+((new_r11*x610))+((cj20*x611))+x608);
evalcond[11]=(((new_r10*x610))+((cj20*x613))+(((-1.0)*x615))+(((-1.0)*new_r20*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j15;
vinfos[1].indices[0] = _ij15[0];
vinfos[1].indices[1] = _ij15[1];
vinfos[1].maxsolutions = _nj15;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j16;
vinfos[2].indices[0] = _ij16[0];
vinfos[2].indices[1] = _ij16[1];
vinfos[2].maxsolutions = _nj16;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j17;
vinfos[3].indices[0] = _ij17[0];
vinfos[3].indices[1] = _ij17[1];
vinfos[3].maxsolutions = _nj17;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j18;
vinfos[4].indices[0] = _ij18[0];
vinfos[4].indices[1] = _ij18[1];
vinfos[4].maxsolutions = _nj18;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j19;
vinfos[5].indices[0] = _ij19[0];
vinfos[5].indices[1] = _ij19[1];
vinfos[5].maxsolutions = _nj19;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j20;
vinfos[6].indices[0] = _ij20[0];
vinfos[6].indices[1] = _ij20[1];
vinfos[6].maxsolutions = _nj20;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j21;
vinfos[7].indices[0] = _ij21[0];
vinfos[7].indices[1] = _ij21[1];
vinfos[7].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "72948cfc3ff77d3858ae895ad25226f4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
