#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2014-10-08 15:55:30.561085
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.139)*x3);
x11=((0.273)*x0);
x12=((0.273)*x6);
x13=((1.0)*x5);
x14=((1.0)*x7);
x15=((0.19)*x1);
x16=(x0*x2);
x17=(x1*x3);
x18=(x2*x4);
x19=(x1*x4);
x20=(x2*x3);
eetrans[0]=((((0.139)*x0*x19))+((x0*x15))+((x7*((((x11*x20))+((x11*x19))))))+((x5*(((((-1.0)*x11*x18))+((x11*x17))))))+((x10*x16)));
IkReal x21=((1.0)*x6);
IkReal x22=((1.0)*x12);
eetrans[1]=(((x5*(((((-1.0)*x17*x22))+((x12*x18))))))+(((-0.139)*x19*x6))+(((-1.0)*x10*x2*x21))+((x7*(((((-1.0)*x19*x22))+(((-1.0)*x20*x22))))))+(((-1.0)*x15*x21)));
eetrans[2]=((0.2015)+((x7*(((((-0.273)*x17))+(((0.273)*x18))))))+(((-1.0)*x1*x10))+(((0.19)*x2))+(((0.139)*x18))+((x5*(((((0.273)*x20))+(((0.273)*x19)))))));
eerot[0]=(((x9*((((x7*(((((-1.0)*x0*x17))+((x16*x4))))))+((x5*((((x0*x19))+((x16*x3))))))))))+((x6*x8)));
eerot[1]=(((x0*x8))+(((-1.0)*x9*((((x14*((((x18*x6))+(((-1.0)*x17*x6))))))+((x13*((((x19*x6))+((x20*x6)))))))))));
eerot[2]=((-1.0)*x9*((((x13*(((((-1.0)*x18))+x17))))+((x14*((x19+x20)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.2015)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x23=x24.value;
j0array[0]=((-1.0)*x23);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x23)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x25=py*py;
IkReal x26=r00*r00;
IkReal x27=pz*pz;
IkReal x28=r01*r01;
IkReal x29=px*px;
IkReal x30=r02*r02;
IkReal x31=py*py*py;
IkReal x32=px*px*px;
IkReal x33=(r00*r01);
IkReal x34=((3.86132994635594e-6)*px);
IkReal x35=((8.45781299854546e-5)*pz);
IkReal x36=(cj0*r01);
IkReal x37=((1.60698446972364e-5)*r00);
IkReal x38=(r00*r02);
IkReal x39=((4.22890649927273e-5)*cj0);
IkReal x40=(px*sj0);
IkReal x41=((1.60698446972364e-5)*pz);
IkReal x42=((6.30352344968594e-6)*pz);
IkReal x43=((3.86132994635594e-6)*py);
IkReal x44=(cj0*x41);
IkReal x45=(r01*r02*sj0);
IkReal x46=(cj0*x26);
IkReal x47=((4.22890649927273e-5)*x32);
IkReal x48=(px*x30);
IkReal x49=(px*py*r02);
IkReal x50=(py*x27);
IkReal x51=(cj0*x25);
IkReal x52=(sj0*x30);
IkReal x53=(py*x29);
IkReal x54=((4.22890649927273e-5)*x27);
IkReal x55=(sj0*x28);
IkReal x56=((1.19766945544033e-6)*cj0*x38);
IkReal x57=((1.19766945544033e-6)*x45);
IkReal x58=((4.22890649927273e-5)*x55);
IkReal x59=(sj0*x33*x34);
IkReal x60=(x34*x46);
IkReal x61=(cj0*x38*x42);
IkReal x62=(cj0*x33*x43);
IkReal x63=(x42*x45);
IkReal x64=(x43*x55);
IkReal x65=((2.44219350333e-6)*cj0*x48);
IkReal x66=((2.44219350333e-6)*py*x52);
IkReal x67=(x26*x32*x39);
IkReal x68=(py*x41*x52);
IkReal x69=(py*x33*x44);
IkReal x70=(x44*x48);
IkReal x71=(py*r02*x37*x40);
IkReal x72=(x31*x58);
IkReal x73=((4.22890649927273e-5)*x31*x52);
IkReal x74=(x30*x32*x39);
IkReal x75=(x33*x40*x41);
IkReal x76=(px*x26*x44);
IkReal x77=((1.60698446972364e-5)*x36*x49);
IkReal x78=(py*x41*x55);
IkReal x79=(r02*x37*x51);
IkReal x80=(sj0*x33*x47);
IkReal x81=((1.60698446972364e-5)*x29*x45);
IkReal x82=(x31*x33*x39);
IkReal x83=((4.22890649927273e-5)*x50*x52);
IkReal x84=((8.45781299854546e-5)*sj0*x26*x53);
IkReal x85=((8.45781299854546e-5)*px*x28*x51);
IkReal x86=((0.000126867194978182)*x25*x33*x40);
IkReal x87=(x35*x36*x49);
IkReal x88=(x50*x58);
IkReal x89=(py*x35*x38*x40);
IkReal x90=((4.22890649927273e-5)*x52*x53);
IkReal x91=((0.000126867194978182)*cj0*x33*x53);
IkReal x92=(x33*x39*x50);
IkReal x93=(x33*x40*x54);
IkReal x94=(px*x26*x27*x39);
IkReal x95=(x25*x39*x48);
IkReal x96=(x27*x39*x48);
IkReal x97=(px*x25*x26*x39);
IkReal x98=(x29*x35*x45);
IkReal x99=(x53*x58);
IkReal x100=(x35*x38*x51);
IkReal x101=(x79+x81);
IkReal x102=(x100+x65+x66+x82+x80+x99+x98+x97);
IkReal x103=(x77+x76+x75+x71+x70+x78+x57+x56+x68+x69);
IkReal x104=(x74+x73+x72+x59+x60+x61+x62+x63+x64+x67+x88+x89+x83+x86+x87+x84+x85+x91+x90+x93+x92+x95+x94+x96);
op[0]=((((4.22890649927273e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.000333861039416268)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-6.34335974890909e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((5.5643506569378e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((5.5643506569378e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*px*pz*r00*r02*(py*py)))+(((-0.000111287013138756)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((4.22890649927273e-5)*pz*(py*py)*(r01*r01)))+(((0.000111287013138756)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((2.11445324963636e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.7821753284689e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.000111287013138756)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.000111287013138756)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-2.7821753284689e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-2.7821753284689e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.12647224705535e-6)*cj0*px*py*sj0*(r01*r01)))+(((2.11445324963636e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((5.5643506569378e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-0.000222574026277512)*px*py*r00*r01*(pz*pz)))+(((-6.34335974890909e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-2.7821753284689e-5)*(py*py*py*py)*(r02*r02)))+(((1.221096751665e-6)*cj0*px*r01*r02*sj0))+(((-2.12647224705535e-6)*cj0*px*py*sj0*(r00*r00)))+(((-1.60809733985502e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((5.08069729783677e-6)*(px*px)*(r02*r02)))+(((-2.3195415443544e-7)*(r02*r02)))+(((-5.5643506569378e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000222574026277512)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.000111287013138756)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((0.000111287013138756)*pz*r00*r02*(px*px*px)))+(((-2.11445324963636e-5)*r01*r02*(py*py*py)))+(((-2.7821753284689e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000111287013138756)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((1.93066497317797e-6)*px*r00*r02))+(((1.93066497317797e-6)*py*r01*r02))+(((-4.01746117430909e-6)*(py*py)*(r01*r01)))+(((-6.34335974890909e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-1.86728479345519e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((2.11445324963636e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((8.45781299854546e-5)*px*py*pz*r00*r01))+(((5.5643506569378e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-2.11445324963636e-5)*py*r01*r02*(px*px)))+(((2.11445324963636e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((4.22890649927273e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-9.09815847214586e-6)*(pz*pz)*(r02*r02)))+(((-0.000111287013138756)*(px*px)*(pz*pz)*(r00*r00)))+(((4.22890649927273e-5)*pz*(px*px)*(r00*r00)))+(((6.34335974890909e-5)*py*r01*r02*(pz*pz)))+(((5.5643506569378e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.7821753284689e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.000111287013138756)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.22890649927273e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.000222574026277512)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((1.93066497317797e-6)*pz*(r02*r02)))+(((-0.000333861039416268)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-2.11445324963636e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((-0.000111287013138756)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.000111287013138756)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((0.000111287013138756)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-2.7821753284689e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-2.7821753284689e-5)*(px*px*px*px)*(r02*r02)))+(((8.45781299854546e-5)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.000111287013138756)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.06323612352767e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-4.01746117430909e-6)*(px*px)*(r00*r00)))+(((-0.000111287013138756)*py*r01*r02*(pz*pz*pz)))+(((-0.000111287013138756)*px*r00*r02*(pz*pz*pz)))+(((-4.22890649927273e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((-6.34335974890909e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((1.221096751665e-6)*cj0*py*r00*r02*sj0))+(((-0.000111287013138756)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-2.11445324963636e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-2.11445324963636e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.81963169442917e-5)*px*pz*r00*r02))+(((1.221096751665e-6)*py*r01*r02*(sj0*sj0)))+(((-1.221096751665e-6)*pz*(cj0*cj0)*(r00*r00)))+(((-2.11445324963636e-5)*r00*r02*(px*px*px)))+(((2.11445324963636e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((4.22890649927273e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.000111287013138756)*py*pz*r01*r02*(px*px)))+(((-2.11445324963636e-5)*px*r00*r02*(py*py)))+(((0.000111287013138756)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-2.11445324963636e-5)*pz*(py*py)*(r02*r02)))+(((-4.22890649927273e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((-4.22890649927273e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((-1.81963169442917e-5)*py*pz*r01*r02))+(((6.34335974890909e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.000111287013138756)*(py*py)*(pz*pz)*(r01*r01)))+(((-2.11445324963636e-5)*pz*(px*px)*(r02*r02)))+(((1.60809733985502e-6)*py*pz*r01*r02*(sj0*sj0)))+(((6.34335974890909e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((2.11445324963636e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((5.5643506569378e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((4.22890649927273e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-2.12647224705535e-6)*px*py*r00*r01*(cj0*cj0)))+(((1.06323612352767e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.06323612352767e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((6.74632094246426e-8)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-4.22890649927273e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-2.44219350333e-6)*cj0*pz*r00*r01*sj0))+(((1.60809733985502e-6)*px*pz*r00*r02*(cj0*cj0)))+(((-8.04048669927512e-7)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.000222574026277512)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-5.5643506569378e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((6.74632094246426e-8)*(cj0*cj0)*(r00*r00)))+(((-0.000111287013138756)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.000111287013138756)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((1.221096751665e-6)*px*r00*r02*(cj0*cj0)))+(((-2.7821753284689e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.000111287013138756)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-2.11445324963636e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((5.5643506569378e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-2.11445324963636e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-5.5643506569378e-5)*(px*px)*(py*py)*(r02*r02)))+(((6.34335974890909e-5)*px*r00*r02*(pz*pz)))+(((1.60809733985502e-6)*cj0*px*pz*r01*r02*sj0))+(((2.11445324963636e-5)*(pz*pz*pz)*(r02*r02)))+(((-2.11445324963636e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((5.08069729783677e-6)*(py*py)*(r02*r02)))+(((0.000111287013138756)*pz*r01*r02*(py*py*py)))+(((-1.06323612352767e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.000333861039416268)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((0.000111287013138756)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-8.03492234861818e-6)*px*py*r00*r01))+(((-1.221096751665e-6)*pz*(r01*r01)*(sj0*sj0)))+(((-0.000111287013138756)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((1.34926418849285e-7)*cj0*r00*r01*sj0))+(((0.000111287013138756)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((5.5643506569378e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.000111287013138756)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.000111287013138756)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.000111287013138756)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-5.5643506569378e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-1.86728479345519e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-3.73456958691037e-6)*cj0*px*py*sj0*(r02*r02)))+(((-2.12647224705535e-6)*px*py*r00*r01*(sj0*sj0)))+(((1.60809733985502e-6)*cj0*py*pz*r00*r02*sj0))+(((-8.04048669927512e-7)*(pz*pz)*(r01*r01)*(sj0*sj0))));
op[1]=((((-1.0)*x103))+(((-1.0)*x102))+x104+x101);
op[2]=((((1.44617473573813e-5)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-3.63926338885834e-5)*cj0*px*py*sj0*(r01*r01)))+(((2.89234947147627e-5)*cj0*r00*r01*sj0*(pz*pz)))+(((0.000111287013138756)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-2.12548607318209e-6)*cj0*r00*r01*sj0))+(((-1.81963169442917e-5)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.000111287013138756)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000222574026277512)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-5.5643506569378e-5)*(px*px*px*px)*(r02*r02)))+(((-1.06274303659104e-6)*(cj0*cj0)*(r00*r00)))+(((0.000222574026277512)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((0.000222574026277512)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-3.63926338885834e-5)*cj0*px*py*sj0*(r00*r00)))+(((-2.12647224705535e-6)*(pz*pz)*(r02*r02)))+(((-1.81963169442917e-5)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.000222574026277512)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.000222574026277512)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.000222574026277512)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.000222574026277512)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.000222574026277512)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-2.89234947147627e-5)*py*pz*r01*r02*(sj0*sj0)))+(((7.3376114656945e-7)*(r02*r02)))+(((-0.000222574026277512)*py*r01*r02*(pz*pz*pz)))+(((-0.000667722078832536)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((1.81963169442917e-5)*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.000222574026277512)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-4.2529444941107e-6)*px*pz*r00*r02))+(((-7.46913917382075e-6)*cj0*px*py*sj0*(r02*r02)))+(((0.000222574026277512)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((0.000222574026277512)*px*pz*r00*r02*(py*py)))+(((0.000111287013138756)*(py*py)*(pz*pz)*(r02*r02)))+(((-3.73456958691037e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.000222574026277512)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-5.5643506569378e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.000111287013138756)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-3.63926338885834e-5)*px*py*r00*r01*(cj0*cj0)))+(((-0.000445148052555024)*px*py*r00*r01*(pz*pz)))+(((0.000222574026277512)*pz*r00*r02*(px*px*px)))+(((0.000111287013138756)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-5.90845010156283e-6)*(px*px)*(r02*r02)))+(((-5.5643506569378e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-0.000222574026277512)*px*r00*r02*(pz*pz*pz)))+(((-5.90845010156283e-6)*(py*py)*(r02*r02)))+(((-4.2529444941107e-6)*py*pz*r01*r02))+(((-0.000667722078832536)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.000667722078832536)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-0.000445148052555024)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.81963169442917e-5)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000222574026277512)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.000222574026277512)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.000111287013138756)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.06274303659104e-6)*(r01*r01)*(sj0*sj0)))+(((0.000222574026277512)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-5.5643506569378e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((0.000222574026277512)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.000222574026277512)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((1.44617473573813e-5)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000222574026277512)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-0.000222574026277512)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.000111287013138756)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-8.03492234861818e-6)*(px*px)*(r00*r00)))+(((-5.5643506569378e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.000222574026277512)*(py*py)*(pz*pz)*(r01*r01)))+(((-3.73456958691037e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.000445148052555024)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.000222574026277512)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-5.5643506569378e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-2.89234947147627e-5)*cj0*py*pz*r00*r02*sj0))+(((-5.5643506569378e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.000222574026277512)*(px*px)*(pz*pz)*(r00*r00)))+(((0.000222574026277512)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.000222574026277512)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.000222574026277512)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.000222574026277512)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.000111287013138756)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.000222574026277512)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-2.89234947147627e-5)*cj0*px*pz*r01*r02*sj0))+(((-0.000111287013138756)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((-0.000111287013138756)*(px*px)*(py*py)*(r02*r02)))+(((-3.63926338885834e-5)*px*py*r00*r01*(sj0*sj0)))+(((-0.000222574026277512)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-5.5643506569378e-5)*(py*py*py*py)*(r02*r02)))+(((-2.89234947147627e-5)*px*pz*r00*r02*(cj0*cj0)))+(((-1.60698446972364e-5)*px*py*r00*r01))+(((0.000111287013138756)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-5.5643506569378e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.000445148052555024)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.000111287013138756)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.000222574026277512)*pz*r01*r02*(py*py*py)))+(((-0.000222574026277512)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-8.03492234861818e-6)*(py*py)*(r01*r01)))+(((0.000222574026277512)*py*pz*r01*r02*(px*px))));
op[3]=((((-1.0)*x101))+(((-1.0)*x102))+x104+x103);
op[4]=((((2.11445324963636e-5)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((2.11445324963636e-5)*cj0*r00*r02*sj0*(py*py*py)))+(((2.11445324963636e-5)*pz*(py*py)*(r02*r02)))+(((-0.000333861039416268)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-1.221096751665e-6)*cj0*px*r01*r02*sj0))+(((5.5643506569378e-5)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((5.5643506569378e-5)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.11445324963636e-5)*r00*r02*(px*px*px)))+(((-1.93066497317797e-6)*pz*(r02*r02)))+(((0.000111287013138756)*px*pz*r00*r02*(py*py)))+(((-8.45781299854546e-5)*px*py*pz*r00*r01))+(((-0.000111287013138756)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-4.22890649927273e-5)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.000111287013138756)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-2.11445324963636e-5)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-2.7821753284689e-5)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.000111287013138756)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((0.000111287013138756)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-2.7821753284689e-5)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-2.7821753284689e-5)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-2.12647224705535e-6)*cj0*px*py*sj0*(r01*r01)))+(((2.11445324963636e-5)*px*r00*r02*(cj0*cj0)*(py*py)))+(((4.22890649927273e-5)*cj0*px*py*pz*sj0*(r00*r00)))+(((5.5643506569378e-5)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((-0.000222574026277512)*px*py*r00*r01*(pz*pz)))+(((-2.7821753284689e-5)*(py*py*py*py)*(r02*r02)))+(((-2.12647224705535e-6)*cj0*px*py*sj0*(r00*r00)))+(((2.11445324963636e-5)*px*r00*r02*(py*py)))+(((-2.11445324963636e-5)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.60809733985502e-6)*cj0*r00*r01*sj0*(pz*pz)))+(((5.08069729783677e-6)*(px*px)*(r02*r02)))+(((-2.3195415443544e-7)*(r02*r02)))+(((-5.5643506569378e-5)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((2.44219350333e-6)*cj0*pz*r00*r01*sj0))+(((-0.000222574026277512)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((4.22890649927273e-5)*cj0*px*py*pz*sj0*(r01*r01)))+(((-2.11445324963636e-5)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((0.000111287013138756)*pz*r00*r02*(px*px*px)))+(((-2.11445324963636e-5)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-2.7821753284689e-5)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-0.000111287013138756)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-1.93066497317797e-6)*px*r00*r02))+(((-1.93066497317797e-6)*py*r01*r02))+(((-2.11445324963636e-5)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-4.01746117430909e-6)*(py*py)*(r01*r01)))+(((2.11445324963636e-5)*py*r01*r02*(px*px)))+(((-1.86728479345519e-6)*(py*py)*(r02*r02)*(sj0*sj0)))+(((5.5643506569378e-5)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-9.09815847214586e-6)*(pz*pz)*(r02*r02)))+(((-0.000111287013138756)*(px*px)*(pz*pz)*(r00*r00)))+(((5.5643506569378e-5)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.7821753284689e-5)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((0.000111287013138756)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-4.22890649927273e-5)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-0.000222574026277512)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.000333861039416268)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.000111287013138756)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.000111287013138756)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((2.11445324963636e-5)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.000111287013138756)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-6.34335974890909e-5)*py*r01*r02*(pz*pz)))+(((-2.7821753284689e-5)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-1.221096751665e-6)*px*r00*r02*(cj0*cj0)))+(((-2.7821753284689e-5)*(px*px*px*px)*(r02*r02)))+(((-0.000111287013138756)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.06323612352767e-6)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-4.01746117430909e-6)*(px*px)*(r00*r00)))+(((4.22890649927273e-5)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.000111287013138756)*py*r01*r02*(pz*pz*pz)))+(((-0.000111287013138756)*px*r00*r02*(pz*pz*pz)))+(((-0.000111287013138756)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-2.11445324963636e-5)*(pz*pz*pz)*(r02*r02)))+(((-1.81963169442917e-5)*px*pz*r00*r02))+(((6.34335974890909e-5)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-6.34335974890909e-5)*px*r00*r02*(pz*pz)))+(((0.000111287013138756)*py*pz*r01*r02*(px*px)))+(((0.000111287013138756)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((6.34335974890909e-5)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-1.81963169442917e-5)*py*pz*r01*r02))+(((-0.000111287013138756)*(py*py)*(pz*pz)*(r01*r01)))+(((1.60809733985502e-6)*py*pz*r01*r02*(sj0*sj0)))+(((5.5643506569378e-5)*(py*py)*(pz*pz)*(r02*r02)))+(((-4.22890649927273e-5)*pz*(py*py)*(r01*r01)))+(((-2.12647224705535e-6)*px*py*r00*r01*(cj0*cj0)))+(((-6.34335974890909e-5)*cj0*py*r00*r02*sj0*(px*px)))+(((-8.45781299854546e-5)*cj0*px*py*pz*sj0*(r02*r02)))+(((1.06323612352767e-6)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.06323612352767e-6)*(py*py)*(r01*r01)*(sj0*sj0)))+(((1.221096751665e-6)*pz*(cj0*cj0)*(r00*r00)))+(((6.74632094246426e-8)*(r01*r01)*(sj0*sj0)))+(((0.000111287013138756)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-4.22890649927273e-5)*py*r01*r02*(cj0*cj0)*(px*px)))+(((1.60809733985502e-6)*px*pz*r00*r02*(cj0*cj0)))+(((-8.04048669927512e-7)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.000222574026277512)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-5.5643506569378e-5)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((4.22890649927273e-5)*px*py*pz*r00*r01*(sj0*sj0)))+(((6.74632094246426e-8)*(cj0*cj0)*(r00*r00)))+(((-0.000111287013138756)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((0.000111287013138756)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((2.11445324963636e-5)*py*r01*r02*(px*px)*(sj0*sj0)))+(((2.11445324963636e-5)*pz*(px*px)*(r02*r02)))+(((-4.22890649927273e-5)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-2.7821753284689e-5)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-0.000111287013138756)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((5.5643506569378e-5)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-5.5643506569378e-5)*(px*px)*(py*py)*(r02*r02)))+(((1.60809733985502e-6)*cj0*px*pz*r01*r02*sj0))+(((2.11445324963636e-5)*cj0*r01*r02*sj0*(px*px*px)))+(((-4.22890649927273e-5)*pz*(px*px)*(r00*r00)))+(((-1.221096751665e-6)*cj0*py*r00*r02*sj0))+(((5.08069729783677e-6)*(py*py)*(r02*r02)))+(((0.000111287013138756)*pz*r01*r02*(py*py*py)))+(((6.34335974890909e-5)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-1.06323612352767e-6)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.000333861039416268)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-1.221096751665e-6)*py*r01*r02*(sj0*sj0)))+(((-2.11445324963636e-5)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.000111287013138756)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-4.22890649927273e-5)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-8.03492234861818e-6)*px*py*r00*r01))+(((2.11445324963636e-5)*r01*r02*(py*py*py)))+(((1.221096751665e-6)*pz*(r01*r01)*(sj0*sj0)))+(((-0.000111287013138756)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((1.34926418849285e-7)*cj0*r00*r01*sj0))+(((0.000111287013138756)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((5.5643506569378e-5)*cj0*r00*r01*sj0*(px*px*px*px)))+(((-0.000111287013138756)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.000111287013138756)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.000111287013138756)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-5.5643506569378e-5)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-1.86728479345519e-6)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-3.73456958691037e-6)*cj0*px*py*sj0*(r02*r02)))+(((-2.12647224705535e-6)*px*py*r00*r01*(sj0*sj0)))+(((-6.34335974890909e-5)*cj0*px*r01*r02*sj0*(py*py)))+(((6.34335974890909e-5)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((1.60809733985502e-6)*cj0*py*pz*r00*r02*sj0))+(((-8.04048669927512e-7)*(pz*pz)*(r01*r01)*(sj0*sj0))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x105=pz*pz;
IkReal x106=py*py;
IkReal x107=px*px;
IkReal x108=(r01*sj0);
IkReal x109=((0.19)*cj1);
IkReal x110=(cj0*r00);
IkReal x111=((1.0)*cj1);
IkReal x112=((1.0)*pz);
IkReal x113=(px*sj0);
IkReal x114=(py*r01);
IkReal x115=(cj1*r02);
IkReal x116=((0.0361)*sj1);
IkReal x117=((1.0)*r02);
IkReal x118=((2.0)*sj1);
IkReal x119=(py*r00);
IkReal x120=((0.19)*sj1);
IkReal x121=(cj0*px);
IkReal x122=((2.0)*cj1);
IkReal x123=(px*r00);
IkReal x124=((0.0361)*cj1);
IkReal x125=((0.38)*pz);
IkReal x126=(sj1*x105);
IkReal x127=(py*r02*sj0);
IkReal x128=(pz*x122);
IkReal x129=(r02*x121);
IkReal x130=(pz*x118);
IkReal x131=(sj1*x107);
IkReal x132=((1.0)*sj1*x106);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x113))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x110))+((sj1*x108))+(((-1.0)*r02*x111)));
evalcond[4]=((((-1.0)*sj1*x117))+(((-1.0)*x110*x111))+(((-1.0)*x108*x111)));
evalcond[5]=(((x108*x120))+(((-1.0)*r02*x109))+(((-1.0)*r02*x112))+(((-1.0)*x123))+(((-1.0)*x114))+((x110*x120)));
evalcond[6]=((((-1.0)*x110*x112))+x127+x129+(((-1.0)*x108*x112))+(((-1.0)*r02*x120))+(((-1.0)*x109*x110))+(((-1.0)*x108*x109)));
evalcond[7]=((((-1.0)*x110*x131))+(((-1.0)*r02*x106*x111))+(((-1.0)*r02*x107*x111))+(((0.0361)*x115))+((r02*x125))+((x114*x128))+(((-1.0)*x114*x118*x121))+((x108*x126))+(((-1.0)*x110*x116))+((x108*x131))+(((-1.0)*x113*x118*x119))+(((-1.0)*x108*x116))+((x123*x128))+(((-1.0)*x108*x132))+((sj1*x106*x110))+(((-1.0)*x129*x130))+((x105*x115))+((x110*x126))+(((-1.0)*x127*x130))+(((0.38)*x114))+(((0.38)*x123)));
evalcond[8]=(((x113*x119*x122))+(((-1.0)*x110*x125))+(((-1.0)*x110*x124))+((r02*x126))+(((-1.0)*x107*x108*x111))+(((-1.0)*sj1*x106*x117))+((cj1*x107*x110))+(((-1.0)*x105*x108*x111))+(((2.0)*pz*x115*x121))+(((2.0)*py*pz*sj0*x115))+(((-1.0)*x117*x131))+((x114*x130))+((x114*x121*x122))+((cj1*x106*x108))+((x123*x130))+(((-1.0)*x108*x125))+(((-1.0)*x108*x124))+(((-1.0)*r02*x116))+(((-1.0)*x106*x110*x111))+(((-1.0)*x105*x110*x111))+(((0.38)*x127))+(((0.38)*x129)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x133=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((-1.0)*py*sj0*x133))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x133)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x134=px*px;
IkReal x135=pz*pz;
IkReal x136=py*py;
IkReal x137=(px*sj0);
IkReal x138=((2.0)*py);
IkReal x139=(r00*sj0);
IkReal x140=(cj0*r01);
IkReal x141=((0.38)*cj1);
IkReal x142=(pz*r02);
IkReal x143=((0.38)*sj1);
IkReal x144=((1.0)*x136);
evalcond[0]=((0.09385)+((pz*x140*x141))+(((-1.0)*cj0*x138*x142))+(((-1.0)*x140*x144))+(((-1.0)*x135*x139))+(((-0.0361)*x139))+((r01*x137*x138))+(((-1.0)*cj0*py*r02*x141))+(((-1.0)*pz*x139*x141))+((x135*x140))+(((-1.0)*x139*x144))+((x134*x139))+((py*r00*x143))+((x134*x140))+(((-1.0)*cj0*px*r00*x138))+(((2.0)*x137*x142))+(((0.075894)*(IKcos(j3))))+((r02*x137*x141))+(((-1.0)*px*r01*x143))+(((0.0361)*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x145=((139000.0)*cj1);
IkReal x146=(py*sj0);
IkReal x147=(cj0*px);
IkReal x148=((273000.0)*cj3);
IkReal x149=((139000.0)*sj1);
IkReal x150=((273000.0)*cj1*sj3);
IkReal x151=((273000.0)*sj1*sj3);
CheckValue<IkReal> x152 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x149))+(((51870.0)*sj3))+(((-1.0)*cj1*x146*x148))+(((-1.0)*x147*x151))+(((-1.0)*x145*x146))+(((-1.0)*x145*x147))+(((-1.0)*x146*x151))+(((-1.0)*cj1*x147*x148))+(((-1.0)*pz*sj1*x148))+((pz*x150)))),((26410.0)+(((-1.0)*sj1*x146*x148))+((pz*x145))+(((-1.0)*sj1*x147*x148))+((cj1*pz*x148))+(((51870.0)*cj3))+(((-1.0)*x147*x149))+((x146*x150))+(((-1.0)*x146*x149))+((x147*x150))+((pz*x151))),IKFAST_ATAN2_MAGTHRESH);
if(!x152.valid){
continue;
}
CheckValue<IkReal> x153=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x153.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x152.value)+(((1.5707963267949)*(x153.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x154=IKcos(j2);
IkReal x155=IKsin(j2);
IkReal x156=(px*sj1);
IkReal x157=((0.273)*cj3);
IkReal x158=(py*sj1);
IkReal x159=((1.0)*r00);
IkReal x160=(cj1*sj0);
IkReal x161=((1.0)*px);
IkReal x162=((1.0)*pz);
IkReal x163=(cj0*r01);
IkReal x164=(pz*sj1);
IkReal x165=((0.273)*sj3);
IkReal x166=(cj0*cj1);
IkReal x167=((0.139)*x155);
IkReal x168=((0.139)*x154);
IkReal x169=(x155*x157);
IkReal x170=(x154*x165);
IkReal x171=(x155*x165);
IkReal x172=(x154*x157);
IkReal x173=(x169+x167);
IkReal x174=(x171+x172+x168);
evalcond[0]=((-0.19)+((cj0*x156))+(((-1.0)*x174))+((sj0*x158))+(((-1.0)*cj1*x162)));
evalcond[1]=((((-1.0)*x170))+(((-1.0)*py*x160))+(((-1.0)*x161*x166))+x173+(((-1.0)*sj1*x162)));
evalcond[2]=((((-1.0)*cj1*py*x159))+(((-1.0)*x170))+x173+(((-1.0)*sj0*x159*x164))+(((-1.0)*cj0*r02*x158))+((r02*sj0*x156))+((cj1*px*r01))+((x163*x164)));
evalcond[3]=((((-1.0)*cj1*x162*x163))+((pz*r00*x160))+((r01*x156))+(((-0.19)*x163))+(((-1.0)*x158*x159))+x174+((py*r02*x166))+(((0.19)*r00*sj0))+(((-1.0)*r02*x160*x161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x175=pz*pz;
IkReal x176=py*py;
IkReal x177=px*px;
IkReal x178=(r01*sj0);
IkReal x179=((0.19)*cj1);
IkReal x180=(cj0*r00);
IkReal x181=((1.0)*cj1);
IkReal x182=((1.0)*pz);
IkReal x183=(px*sj0);
IkReal x184=(py*r01);
IkReal x185=(cj1*r02);
IkReal x186=((0.0361)*sj1);
IkReal x187=((1.0)*r02);
IkReal x188=((2.0)*sj1);
IkReal x189=(py*r00);
IkReal x190=((0.19)*sj1);
IkReal x191=(cj0*px);
IkReal x192=((2.0)*cj1);
IkReal x193=(px*r00);
IkReal x194=((0.0361)*cj1);
IkReal x195=((0.38)*pz);
IkReal x196=(sj1*x175);
IkReal x197=(py*r02*sj0);
IkReal x198=(pz*x192);
IkReal x199=(r02*x191);
IkReal x200=(pz*x188);
IkReal x201=(sj1*x177);
IkReal x202=((1.0)*sj1*x176);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x183))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x178))+((sj1*x180))+(((-1.0)*r02*x181)));
evalcond[4]=((((-1.0)*x178*x181))+(((-1.0)*x180*x181))+(((-1.0)*sj1*x187)));
evalcond[5]=(((x178*x190))+((x180*x190))+(((-1.0)*r02*x179))+(((-1.0)*x193))+(((-1.0)*r02*x182))+(((-1.0)*x184)));
evalcond[6]=((((-1.0)*x178*x182))+(((-1.0)*x180*x182))+x199+x197+(((-1.0)*r02*x190))+(((-1.0)*x178*x179))+(((-1.0)*x179*x180)));
evalcond[7]=((((-1.0)*x178*x186))+((x193*x198))+((sj1*x176*x180))+((x178*x196))+((x180*x196))+(((-1.0)*x197*x200))+(((0.38)*x184))+((x184*x198))+(((0.38)*x193))+(((-1.0)*x180*x186))+((x175*x185))+(((-1.0)*r02*x177*x181))+(((-1.0)*x178*x202))+((x178*x201))+(((-1.0)*r02*x176*x181))+(((0.0361)*x185))+(((-1.0)*x199*x200))+(((-1.0)*x183*x188*x189))+(((-1.0)*x184*x188*x191))+((r02*x195))+(((-1.0)*x180*x201)));
evalcond[8]=((((-1.0)*x178*x194))+(((-1.0)*x178*x195))+(((2.0)*pz*x185*x191))+((x183*x189*x192))+(((-1.0)*x187*x201))+(((-1.0)*x175*x180*x181))+(((-1.0)*x180*x195))+(((-1.0)*x180*x194))+(((-1.0)*r02*x186))+((cj1*x176*x178))+(((0.38)*x197))+(((0.38)*x199))+((x184*x200))+(((-1.0)*sj1*x176*x187))+(((2.0)*py*pz*sj0*x185))+(((-1.0)*x175*x178*x181))+((x184*x191*x192))+((cj1*x177*x180))+((r02*x196))+((x193*x200))+(((-1.0)*x177*x178*x181))+(((-1.0)*x176*x180*x181)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x203=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((-1.0)*py*sj0*x203))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x203)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x204=px*px;
IkReal x205=pz*pz;
IkReal x206=py*py;
IkReal x207=(px*sj0);
IkReal x208=((2.0)*py);
IkReal x209=(r00*sj0);
IkReal x210=(cj0*r01);
IkReal x211=((0.38)*cj1);
IkReal x212=(pz*r02);
IkReal x213=((0.38)*sj1);
IkReal x214=((1.0)*x206);
evalcond[0]=((-0.09385)+((x204*x210))+(((-1.0)*cj0*x208*x212))+(((-1.0)*px*r01*x213))+(((-1.0)*cj0*py*r02*x211))+(((-0.0361)*x209))+(((-1.0)*x205*x209))+((x205*x210))+((py*r00*x213))+(((-1.0)*cj0*px*r00*x208))+((x204*x209))+(((-1.0)*x210*x214))+((r01*x207*x208))+((r02*x207*x211))+(((-1.0)*pz*x209*x211))+(((-0.075894)*(IKcos(j3))))+(((2.0)*x207*x212))+(((-1.0)*x209*x214))+(((0.0361)*x210))+((pz*x210*x211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x215=((139000.0)*cj1);
IkReal x216=(py*sj0);
IkReal x217=(cj0*px);
IkReal x218=((273000.0)*cj3);
IkReal x219=((139000.0)*sj1);
IkReal x220=((273000.0)*cj1*sj3);
IkReal x221=((273000.0)*sj1*sj3);
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(((((-1.0)*x216*x221))+(((-1.0)*pz*x219))+(((-1.0)*cj1*x217*x218))+((pz*x220))+(((51870.0)*sj3))+(((-1.0)*cj1*x216*x218))+(((-1.0)*x217*x221))+(((-1.0)*pz*sj1*x218))+(((-1.0)*x215*x216))+(((-1.0)*x215*x217)))),((26410.0)+((x216*x220))+((pz*x215))+((pz*x221))+(((-1.0)*x217*x219))+(((51870.0)*cj3))+(((-1.0)*sj1*x216*x218))+((x217*x220))+(((-1.0)*sj1*x217*x218))+(((-1.0)*x216*x219))+((cj1*pz*x218))),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x223.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x222.value)+(((1.5707963267949)*(x223.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x224=IKcos(j2);
IkReal x225=IKsin(j2);
IkReal x226=(px*sj1);
IkReal x227=((0.273)*cj3);
IkReal x228=(py*sj1);
IkReal x229=((1.0)*r00);
IkReal x230=(cj1*sj0);
IkReal x231=((1.0)*px);
IkReal x232=((1.0)*pz);
IkReal x233=(cj0*r01);
IkReal x234=(pz*sj1);
IkReal x235=((0.273)*sj3);
IkReal x236=(cj0*cj1);
IkReal x237=((0.139)*x225);
IkReal x238=((0.139)*x224);
IkReal x239=(x224*x235);
IkReal x240=(x225*x227);
IkReal x241=(x225*x235);
IkReal x242=(x224*x227);
IkReal x243=(x237+x240);
IkReal x244=(x238+x242+x241);
evalcond[0]=((-0.19)+((sj0*x228))+((cj0*x226))+(((-1.0)*x244))+(((-1.0)*cj1*x232)));
evalcond[1]=((((-1.0)*py*x230))+(((-1.0)*x239))+x243+(((-1.0)*x231*x236))+(((-1.0)*sj1*x232)));
evalcond[2]=((((-1.0)*sj0*x229*x234))+((x233*x234))+x239+((r02*sj0*x226))+(((-1.0)*x243))+(((-1.0)*cj1*py*x229))+((cj1*px*r01))+(((-1.0)*cj0*r02*x228)));
evalcond[3]=(((pz*r00*x230))+((r01*x226))+(((-1.0)*r02*x230*x231))+(((-1.0)*x228*x229))+(((-1.0)*cj1*x232*x233))+(((0.19)*r00*sj0))+(((-0.19)*x233))+(((-1.0)*x244))+((py*r02*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x245=py*py;
IkReal x246=px*px;
IkReal x247=pz*pz;
IkReal x248=(r01*sj1);
IkReal x249=((190000.0)*px);
IkReal x250=(cj1*r02);
IkReal x251=(cj0*py);
IkReal x252=(px*sj0);
IkReal x253=(cj0*r01);
IkReal x254=(r00*sj1);
IkReal x255=(px*r00);
IkReal x256=(py*r01);
IkReal x257=(r00*sj0);
IkReal x258=((500000.0)*x257);
IkReal x259=((1000000.0)*pz*r02);
IkReal x260=((190000.0)*cj1*pz);
CheckValue<IkReal> x261=IKPowWithIntegerCheck(cj4,-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(sj4,-1);
if(!x262.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x261.value)*(((((-190.0)*cj0*x254))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x248))+(((1000.0)*x256))+(((1000.0)*x255))+(((190.0)*x250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63525443381559e-5)*(x262.value)*(((((-1.0)*x252*x259))+((x245*x258))+(((-46925.0)*sj4))+(((190000.0)*x250*x251))+((x248*x249))+(((-500000.0)*x247*x253))+(((-500000.0)*x246*x253))+(((-1000000.0)*x252*x256))+(((-1.0)*sj0*x249*x250))+((x251*x259))+(((-190000.0)*py*x254))+(((-1.0)*x253*x260))+(((1000000.0)*x251*x255))+(((-1.0)*x246*x258))+(((-18050.0)*x253))+((x257*x260))+(((500000.0)*x245*x253))+(((18050.0)*x257))+((x247*x258)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x261.value)*(((((-190.0)*cj0*x254))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x248))+(((1000.0)*x256))+(((1000.0)*x255))+(((190.0)*x250))))))+IKsqr(((2.63525443381559e-5)*(x262.value)*(((((-1.0)*x252*x259))+((x245*x258))+(((-46925.0)*sj4))+(((190000.0)*x250*x251))+((x248*x249))+(((-500000.0)*x247*x253))+(((-500000.0)*x246*x253))+(((-1000000.0)*x252*x256))+(((-1.0)*sj0*x249*x250))+((x251*x259))+(((-190000.0)*py*x254))+(((-1.0)*x253*x260))+(((1000000.0)*x251*x255))+(((-1.0)*x246*x258))+(((-18050.0)*x253))+((x257*x260))+(((500000.0)*x245*x253))+(((18050.0)*x257))+((x247*x258))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x261.value)*(((((-190.0)*cj0*x254))+(((1000.0)*pz*r02))+(((-190.0)*sj0*x248))+(((1000.0)*x256))+(((1000.0)*x255))+(((190.0)*x250))))), ((2.63525443381559e-5)*(x262.value)*(((((-1.0)*x252*x259))+((x245*x258))+(((-46925.0)*sj4))+(((190000.0)*x250*x251))+((x248*x249))+(((-500000.0)*x247*x253))+(((-500000.0)*x246*x253))+(((-1000000.0)*x252*x256))+(((-1.0)*sj0*x249*x250))+((x251*x259))+(((-190000.0)*py*x254))+(((-1.0)*x253*x260))+(((1000000.0)*x251*x255))+(((-1.0)*x246*x258))+(((-18050.0)*x253))+((x257*x260))+(((500000.0)*x245*x253))+(((18050.0)*x257))+((x247*x258))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x263=IKcos(j3);
IkReal x264=px*px;
IkReal x265=pz*pz;
IkReal x266=py*py;
IkReal x267=(r01*sj0);
IkReal x268=((2.0)*py);
IkReal x269=(r00*sj0);
IkReal x270=((0.19)*cj1);
IkReal x271=(py*r02);
IkReal x272=((0.38)*cj1);
IkReal x273=((1.0)*pz);
IkReal x274=(cj0*r01);
IkReal x275=((0.19)*sj1);
IkReal x276=((0.139)*cj4);
IkReal x277=(cj0*r00);
IkReal x278=(cj0*r02);
IkReal x279=((1.0)*x265);
IkReal x280=((0.38)*py*sj1);
IkReal x281=((1.0)*x266);
IkReal x282=((0.075894)*x263);
IkReal x283=((0.38)*px*sj1);
IkReal x284=(px*r02*sj0);
evalcond[0]=(((x276*(IKsin(j3))))+((x275*x277))+(((-1.0)*px*r00))+(((-1.0)*r02*x270))+(((-1.0)*r02*x273))+(((-1.0)*py*r01))+((x267*x275)));
evalcond[1]=((0.05775)+(((-1.0)*pz*x272))+(((-1.0)*x264))+((cj0*x283))+x282+(((-1.0)*x279))+(((-1.0)*x281))+((sj0*x280)));
evalcond[2]=((((-1.0)*x273*x277))+((px*x278))+(((-1.0)*x263*x276))+(((-1.0)*r02*x275))+(((-1.0)*x270*x277))+(((-0.273)*cj4))+(((-1.0)*x267*x273))+(((-1.0)*x267*x270))+((sj0*x271)));
evalcond[3]=(((px*x267*x268))+((r00*x280))+(((-1.0)*px*x268*x277))+(((0.09385)*sj4))+((x264*x269))+(((-1.0)*pz*x268*x278))+(((-1.0)*x269*x279))+(((-1.0)*pz*x269*x272))+(((-1.0)*cj0*x271*x272))+(((-0.0361)*x269))+((x264*x274))+((x272*x284))+(((0.0361)*x274))+(((-1.0)*r01*x283))+(((-1.0)*x269*x281))+((x265*x274))+((sj4*x282))+(((-1.0)*x274*x281))+(((2.0)*pz*x284))+((pz*x272*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x285=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x285)));
j2eval[1]=IKsign(((((-273.0)*cj4))+(((-139.0)*x285))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x286=px*px;
IkReal x287=((0.075894)*cj3);
IkReal x288=pz*pz;
IkReal x289=py*py;
IkReal x290=(r01*sj0);
IkReal x291=((0.19)*cj1);
IkReal x292=((1.0)*cj1);
IkReal x293=(py*r02);
IkReal x294=((1.0)*sj1);
IkReal x295=((0.38)*cj0);
IkReal x296=(px*r02);
IkReal x297=(py*r01);
IkReal x298=((1.0)*sj0);
IkReal x299=(cj1*r02);
IkReal x300=((0.38)*sj1);
IkReal x301=(r00*sj0);
IkReal x302=(cj0*r01);
IkReal x303=((1.0)*pz);
IkReal x304=((0.0361)*cj1);
IkReal x305=(cj0*r00);
IkReal x306=((0.38)*sj0);
IkReal x307=(r02*sj1);
IkReal x308=(pz*r00);
IkReal x309=(px*r00);
IkReal x310=((0.19)*sj1);
IkReal x311=((2.0)*cj1);
IkReal x312=(pz*sj0);
IkReal x313=(cj0*sj1);
IkReal x314=((0.0361)*sj1);
IkReal x315=((0.38)*pz);
IkReal x316=(cj0*pz);
IkReal x317=(r00*x289);
IkReal x318=((2.0)*pz*sj1);
IkReal x319=(cj0*x288);
IkReal x320=((2.0)*px*py);
IkReal x321=(cj1*x315);
IkReal x322=(r02*x286);
IkReal x323=((1.0)*x289);
IkReal x324=(r02*x289);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x298)));
evalcond[2]=((1.0)+(((-1.0)*r00*x298))+x302);
evalcond[3]=(((sj1*x290))+(((-1.0)*r02*x292))+((sj1*x305)));
evalcond[4]=((((-1.0)*x292*x305))+(((-1.0)*x290*x292))+(((-1.0)*r02*x294)));
evalcond[5]=(((x305*x310))+(((-1.0)*x297))+(((-1.0)*x309))+(((-1.0)*r02*x291))+(((-1.0)*r02*x303))+((x290*x310)));
evalcond[6]=((0.05775)+((px*sj1*x295))+(((-1.0)*x323))+(((-1.0)*x321))+x287+(((-1.0)*x288))+(((-1.0)*x286))+((py*sj0*x300)));
evalcond[7]=((((-0.19)*x307))+(((-1.0)*x290*x291))+((sj0*x293))+(((-1.0)*x303*x305))+((cj0*x296))+(((-1.0)*x290*x303))+(((-1.0)*x291*x305)));
evalcond[8]=((0.09385)+((x290*x320))+((x286*x301))+((x286*x302))+((cj1*x296*x306))+(((2.0)*x296*x312))+(((-1.0)*px*r01*x300))+(((0.0361)*x302))+x287+(((-1.0)*x301*x321))+(((-1.0)*cj1*x293*x295))+((x288*x302))+((py*r00*x300))+(((-0.0361)*x301))+((cj1*pz*r01*x295))+(((-2.0)*x293*x316))+(((-1.0)*x298*x317))+(((-1.0)*r00*x288*x298))+(((-1.0)*x305*x320))+(((-1.0)*x302*x323)));
evalcond[9]=((((-1.0)*x292*x324))+(((-1.0)*x292*x322))+((sj1*x286*x290))+(((-1.0)*x290*x314))+(((-2.0)*px*x297*x313))+(((-2.0)*sj1*x293*x312))+((r02*x315))+((sj1*x288*x305))+(((-2.0)*pz*x296*x313))+((pz*x297*x311))+(((-1.0)*x289*x290*x294))+(((0.38)*x297))+((sj1*x289*x305))+((px*x308*x311))+(((-1.0)*sj1*x301*x320))+(((0.0361)*x299))+(((-1.0)*x305*x314))+((sj1*x288*x290))+(((-1.0)*x286*x294*x305))+(((0.38)*x309))+((x288*x299)));
evalcond[10]=(((cj0*px*x297*x311))+(((2.0)*px*sj1*x308))+(((-1.0)*x290*x315))+((x293*x311*x312))+((cj1*x289*x290))+((x297*x318))+((x296*x311*x316))+((px*py*x301*x311))+(((-1.0)*x289*x292*x305))+(((-1.0)*x295*x308))+(((-1.0)*x288*x292*x305))+(((-1.0)*x286*x290*x292))+((x293*x306))+(((-1.0)*x294*x322))+(((-1.0)*x294*x324))+((x295*x296))+((x288*x307))+(((-1.0)*x304*x305))+(((-0.0361)*x307))+(((-1.0)*x288*x290*x292))+((cj1*x286*x305))+(((-1.0)*x290*x304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x325=((139000.0)*cj1);
IkReal x326=(py*sj0);
IkReal x327=(cj0*px);
IkReal x328=((273000.0)*cj3);
IkReal x329=((139000.0)*sj1);
IkReal x330=((273000.0)*cj1*sj3);
IkReal x331=((273000.0)*sj1*sj3);
CheckValue<IkReal> x332=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333 = IKatan2WithCheck(IkReal(((((-1.0)*x325*x327))+(((-1.0)*x325*x326))+(((51870.0)*sj3))+(((-1.0)*cj1*x326*x328))+(((-1.0)*cj1*x327*x328))+(((-1.0)*pz*sj1*x328))+((pz*x330))+(((-1.0)*x327*x331))+(((-1.0)*pz*x329))+(((-1.0)*x326*x331)))),((26410.0)+(((-1.0)*sj1*x327*x328))+((cj1*pz*x328))+(((-1.0)*sj1*x326*x328))+(((-1.0)*x326*x329))+((pz*x325))+(((-1.0)*x327*x329))+(((51870.0)*cj3))+((x327*x330))+((pz*x331))+((x326*x330))),IKFAST_ATAN2_MAGTHRESH);
if(!x333.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x332.value)))+(x333.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x334=IKcos(j2);
IkReal x335=IKsin(j2);
IkReal x336=(px*sj1);
IkReal x337=((0.273)*cj3);
IkReal x338=(py*sj1);
IkReal x339=((1.0)*r00);
IkReal x340=(cj1*sj0);
IkReal x341=((1.0)*px);
IkReal x342=((1.0)*pz);
IkReal x343=(cj0*r01);
IkReal x344=(pz*sj1);
IkReal x345=((0.273)*sj3);
IkReal x346=(cj0*cj1);
IkReal x347=((0.139)*x335);
IkReal x348=((0.139)*x334);
IkReal x349=(x335*x337);
IkReal x350=(x334*x345);
IkReal x351=(x335*x345);
IkReal x352=(x334*x337);
IkReal x353=(x347+x349);
IkReal x354=(x351+x352+x348);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x342))+(((-1.0)*x354))+((cj0*x336))+((sj0*x338)));
evalcond[1]=((((-1.0)*x350))+x353+(((-1.0)*x341*x346))+(((-1.0)*sj1*x342))+(((-1.0)*py*x340)));
evalcond[2]=((((-1.0)*x350))+x353+(((-1.0)*sj0*x339*x344))+(((-1.0)*cj1*py*x339))+(((-1.0)*cj0*r02*x338))+((cj1*px*r01))+((x343*x344))+((r02*sj0*x336)));
evalcond[3]=(((r01*x336))+(((-0.19)*x343))+(((-1.0)*r02*x340*x341))+(((-1.0)*x338*x339))+((pz*r00*x340))+x354+(((-1.0)*cj1*x342*x343))+(((0.19)*r00*sj0))+((py*r02*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x355=px*px;
IkReal x356=pz*pz;
IkReal x357=py*py;
IkReal x358=((0.075894)*cj3);
IkReal x359=(r01*sj0);
IkReal x360=((0.19)*cj1);
IkReal x361=((1.0)*cj1);
IkReal x362=(py*r02);
IkReal x363=((1.0)*sj1);
IkReal x364=((0.38)*cj0);
IkReal x365=(px*r02);
IkReal x366=(py*r01);
IkReal x367=((1.0)*sj0);
IkReal x368=(cj1*r02);
IkReal x369=((0.38)*sj1);
IkReal x370=(r00*sj0);
IkReal x371=(cj0*r01);
IkReal x372=((1.0)*pz);
IkReal x373=((0.0361)*cj1);
IkReal x374=(cj0*r00);
IkReal x375=((0.38)*sj0);
IkReal x376=(r02*sj1);
IkReal x377=(pz*r00);
IkReal x378=(px*r00);
IkReal x379=((0.19)*sj1);
IkReal x380=((2.0)*cj1);
IkReal x381=(pz*sj0);
IkReal x382=(cj0*sj1);
IkReal x383=((0.0361)*sj1);
IkReal x384=((0.38)*pz);
IkReal x385=(cj0*pz);
IkReal x386=(r00*x357);
IkReal x387=((2.0)*pz*sj1);
IkReal x388=(cj0*x356);
IkReal x389=((2.0)*px*py);
IkReal x390=(cj1*x384);
IkReal x391=(r02*x355);
IkReal x392=((1.0)*x357);
IkReal x393=(r02*x357);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x367)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x367))+x371);
evalcond[3]=((((-1.0)*r02*x361))+((sj1*x374))+((sj1*x359)));
evalcond[4]=((((-1.0)*r02*x363))+(((-1.0)*x361*x374))+(((-1.0)*x359*x361)));
evalcond[5]=((((-1.0)*x378))+(((-1.0)*x366))+(((-1.0)*r02*x360))+(((-1.0)*r02*x372))+((x359*x379))+((x374*x379)));
evalcond[6]=((0.05775)+(((-1.0)*x392))+(((-1.0)*x390))+(((-1.0)*x356))+(((-1.0)*x355))+x358+((py*sj0*x369))+((px*sj1*x364)));
evalcond[7]=((((-1.0)*x360*x374))+(((-1.0)*x372*x374))+((sj0*x362))+(((-1.0)*x359*x372))+(((-0.19)*x376))+(((-1.0)*x359*x360))+((cj0*x365)));
evalcond[8]=((-0.09385)+(((-2.0)*x362*x385))+(((-1.0)*x367*x386))+(((-1.0)*px*r01*x369))+((cj1*x365*x375))+((x359*x389))+(((-1.0)*x370*x390))+(((-1.0)*x358))+(((-1.0)*x374*x389))+((x356*x371))+((x355*x370))+((x355*x371))+(((-0.0361)*x370))+(((-1.0)*x371*x392))+(((-1.0)*cj1*x362*x364))+((py*r00*x369))+(((-1.0)*r00*x356*x367))+(((2.0)*x365*x381))+((cj1*pz*r01*x364))+(((0.0361)*x371)));
evalcond[9]=((((0.0361)*x368))+(((-1.0)*x361*x391))+(((-1.0)*x361*x393))+(((-1.0)*sj1*x370*x389))+((sj1*x356*x374))+((sj1*x357*x374))+(((-2.0)*pz*x365*x382))+(((-1.0)*x374*x383))+(((0.38)*x366))+((sj1*x355*x359))+((pz*x366*x380))+((r02*x384))+(((0.38)*x378))+(((-2.0)*px*x366*x382))+((x356*x368))+(((-1.0)*x357*x359*x363))+(((-2.0)*sj1*x362*x381))+((sj1*x356*x359))+((px*x377*x380))+(((-1.0)*x359*x383))+(((-1.0)*x355*x363*x374)));
evalcond[10]=((((-1.0)*x356*x361*x374))+(((-1.0)*x356*x359*x361))+((x364*x365))+(((-1.0)*x355*x359*x361))+(((-1.0)*x363*x393))+(((-1.0)*x363*x391))+(((2.0)*px*sj1*x377))+((cj1*x357*x359))+((x356*x376))+(((-0.0361)*x376))+((x362*x380*x381))+(((-1.0)*x359*x373))+((cj0*px*x366*x380))+(((-1.0)*x373*x374))+(((-1.0)*x357*x361*x374))+((cj1*x355*x374))+((x366*x387))+((px*py*x370*x380))+(((-1.0)*x364*x377))+((x365*x380*x385))+(((-1.0)*x359*x384))+((x362*x375)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=((139000.0)*cj1);
IkReal x395=(py*sj0);
IkReal x396=(cj0*px);
IkReal x397=((273000.0)*cj3);
IkReal x398=((139000.0)*sj1);
IkReal x399=((273000.0)*cj1*sj3);
IkReal x400=((273000.0)*sj1*sj3);
CheckValue<IkReal> x401 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x396*x397))+(((-1.0)*x394*x395))+(((-1.0)*x394*x396))+(((-1.0)*cj1*x395*x397))+((pz*x399))+(((-1.0)*x395*x400))+(((-1.0)*pz*sj1*x397))+(((51870.0)*sj3))+(((-1.0)*pz*x398))+(((-1.0)*x396*x400)))),((26410.0)+(((-1.0)*sj1*x395*x397))+((pz*x400))+((x395*x399))+(((-1.0)*x395*x398))+((pz*x394))+((x396*x399))+(((51870.0)*cj3))+((cj1*pz*x397))+(((-1.0)*x396*x398))+(((-1.0)*sj1*x396*x397))),IKFAST_ATAN2_MAGTHRESH);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x402.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x401.value)+(((1.5707963267949)*(x402.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x403=IKcos(j2);
IkReal x404=IKsin(j2);
IkReal x405=(px*sj1);
IkReal x406=((0.273)*cj3);
IkReal x407=(py*sj1);
IkReal x408=((1.0)*r00);
IkReal x409=(cj1*sj0);
IkReal x410=((1.0)*px);
IkReal x411=((1.0)*pz);
IkReal x412=(cj0*r01);
IkReal x413=(pz*sj1);
IkReal x414=((0.273)*sj3);
IkReal x415=(cj0*cj1);
IkReal x416=((0.139)*x404);
IkReal x417=((0.139)*x403);
IkReal x418=(x403*x414);
IkReal x419=(x404*x406);
IkReal x420=(x404*x414);
IkReal x421=(x403*x406);
IkReal x422=(x416+x419);
IkReal x423=(x417+x421+x420);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x411))+(((-1.0)*x423))+((sj0*x407))+((cj0*x405)));
evalcond[1]=((((-1.0)*py*x409))+x422+(((-1.0)*x410*x415))+(((-1.0)*x418))+(((-1.0)*sj1*x411)));
evalcond[2]=((((-1.0)*cj0*r02*x407))+(((-1.0)*x422))+((r02*sj0*x405))+x418+((x412*x413))+((cj1*px*r01))+(((-1.0)*sj0*x408*x413))+(((-1.0)*cj1*py*x408)));
evalcond[3]=(((py*r02*x415))+(((-1.0)*x423))+(((-1.0)*r02*x409*x410))+(((-1.0)*cj1*x411*x412))+((pz*r00*x409))+((r01*x405))+(((-0.19)*x412))+(((-1.0)*x407*x408))+(((0.19)*r00*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x424=px*px;
IkReal x425=pz*pz;
IkReal x426=py*py;
IkReal x427=(r01*sj0);
IkReal x428=((2.0)*py);
IkReal x429=(r00*sj0);
IkReal x430=((0.19)*cj1);
IkReal x431=(py*r02);
IkReal x432=((0.38)*cj1);
IkReal x433=((1.0)*pz);
IkReal x434=(cj0*r01);
IkReal x435=(px*sj0);
IkReal x436=((0.19)*sj1);
IkReal x437=(cj0*r00);
IkReal x438=(cj0*r02);
IkReal x439=((1.0)*x425);
IkReal x440=((0.38)*py*sj1);
IkReal x441=((1.0)*x426);
IkReal x442=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x435))+((cj0*py)));
evalcond[2]=((((-1.0)*x429))+sj4+x434);
evalcond[3]=(((x436*x437))+(((-1.0)*px*r00))+(((-1.0)*r02*x433))+(((-1.0)*r02*x430))+(((-1.0)*py*r01))+((x427*x436)));
evalcond[4]=((0.133644)+((sj0*x440))+(((-1.0)*x424))+(((-1.0)*x441))+(((-1.0)*x439))+((cj0*x442))+(((-1.0)*pz*x432)));
evalcond[5]=((((-1.0)*x430*x437))+((sj0*x431))+((px*x438))+(((-1.0)*x427*x433))+(((-1.0)*x427*x430))+(((-1.0)*x433*x437))+(((-1.0)*r02*x436))+(((-0.412)*cj4)));
evalcond[6]=((((2.0)*pz*r02*x435))+(((-1.0)*pz*x428*x438))+((x424*x434))+((x424*x429))+(((-1.0)*pz*x429*x432))+((pz*x432*x434))+(((-1.0)*px*x428*x437))+((r02*x432*x435))+((x425*x434))+(((0.169744)*sj4))+(((-1.0)*x434*x441))+(((0.0361)*x434))+(((-1.0)*x429*x439))+((px*x427*x428))+(((-1.0)*x429*x441))+(((-1.0)*r01*x442))+(((-1.0)*cj0*x431*x432))+((r00*x440))+(((-0.0361)*x429)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x443=((2.42718446601942)*pz);
IkReal x444=((2.42718446601942)*cj0*px);
IkReal x445=((2.42718446601942)*py*sj0);
if( IKabs((((sj1*x443))+((cj1*x445))+((cj1*x444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+((sj1*x444))+((sj1*x445))+(((-1.0)*cj1*x443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x443))+((cj1*x445))+((cj1*x444))))+IKsqr(((-0.461165048543689)+((sj1*x444))+((sj1*x445))+(((-1.0)*cj1*x443))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x443))+((cj1*x445))+((cj1*x444))), ((-0.461165048543689)+((sj1*x444))+((sj1*x445))+(((-1.0)*cj1*x443))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x446=IKcos(j2);
IkReal x447=IKsin(j2);
IkReal x448=pz*pz;
IkReal x449=py*py;
IkReal x450=px*px;
IkReal x451=(cj0*sj1);
IkReal x452=(sj0*sj1);
IkReal x453=((0.169744)*cj4);
IkReal x454=((2.0)*pz);
IkReal x455=(py*r02);
IkReal x456=(r02*sj1);
IkReal x457=(r00*sj1);
IkReal x458=((1.0)*py);
IkReal x459=(cj0*cj1);
IkReal x460=(r01*sj1);
IkReal x461=(px*r02);
IkReal x462=((1.0)*pz);
IkReal x463=(pz*r00);
IkReal x464=(cj1*sj0);
IkReal x465=(cj1*r02);
IkReal x466=((0.38)*pz);
IkReal x467=((0.0361)*r01);
IkReal x468=((1.0)*r00);
IkReal x469=((0.38)*cj0);
IkReal x470=((0.0361)*r00);
IkReal x471=(cj1*r01);
IkReal x472=((1.0)*r01);
IkReal x473=(px*r00);
IkReal x474=(r00*x448);
IkReal x475=((0.412)*x447);
IkReal x476=((1.0)*x449);
IkReal x477=((2.0)*px*py);
IkReal x478=(r01*x450);
IkReal x479=((1.0)*x450);
IkReal x480=((0.412)*x446);
evalcond[0]=(((cj4*x447))+(((-1.0)*x465))+((r00*x451))+((r01*x452)));
evalcond[1]=((-0.19)+(((-1.0)*x480))+(((-1.0)*cj1*x462))+((px*x451))+((py*x452)));
evalcond[2]=(((cj4*x446))+(((-1.0)*x456))+(((-1.0)*x459*x468))+(((-1.0)*x464*x472)));
evalcond[3]=((((-1.0)*px*x459))+(((-1.0)*sj1*x462))+x475+(((-1.0)*x458*x464)));
evalcond[4]=(((pz*r01*x451))+((x452*x461))+((sj4*x475))+(((-1.0)*r00*x452*x462))+((px*x471))+(((-1.0)*cj1*r00*x458))+(((-1.0)*x451*x455)));
evalcond[5]=((((-1.0)*x461*x464))+((x455*x459))+((sj4*x480))+((x463*x464))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+((px*x460))+(((-1.0)*x457*x458))+(((-1.0)*r01*x459*x462)));
evalcond[6]=((((-2.0)*py*x452*x473))+(((-1.0)*x449*x452*x472))+((x452*x478))+(((-1.0)*r01*x451*x477))+(((-1.0)*x450*x451*x468))+(((-1.0)*x452*x454*x455))+((x447*x453))+(((0.0361)*x465))+((py*x454*x471))+((r02*x466))+((x448*x465))+((r00*x449*x451))+(((-1.0)*x451*x470))+(((-1.0)*x452*x467))+((x451*x474))+((cj1*x454*x473))+((r01*x448*x452))+(((0.38)*x473))+(((-1.0)*x451*x454*x461))+(((-1.0)*x465*x479))+(((-1.0)*x465*x476))+(((0.38)*py*r01)));
evalcond[7]=(((r01*x459*x477))+((x454*x455*x464))+(((-1.0)*x459*x470))+((x461*x469))+(((-1.0)*x448*x459*x468))+(((-0.0361)*x456))+(((-1.0)*x463*x469))+(((0.38)*sj0*x455))+(((-1.0)*x456*x476))+(((-1.0)*x456*x479))+(((-1.0)*x449*x459*x468))+((x454*x459*x461))+(((-1.0)*x464*x467))+((py*x454*x460))+((r00*x450*x459))+((r01*x449*x464))+(((-1.0)*x450*x464*x472))+((x446*x453))+(((-1.0)*r01*sj0*x466))+(((2.0)*py*x464*x473))+((x448*x456))+((px*x454*x457))+(((-1.0)*x448*x464*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x481=px*px;
IkReal x482=pz*pz;
IkReal x483=py*py;
IkReal x484=(r01*sj0);
IkReal x485=((2.0)*py);
IkReal x486=(r00*sj0);
IkReal x487=((0.19)*cj1);
IkReal x488=(py*r02);
IkReal x489=((0.38)*cj1);
IkReal x490=((1.0)*pz);
IkReal x491=(cj0*r01);
IkReal x492=(px*sj0);
IkReal x493=((0.19)*sj1);
IkReal x494=(cj0*r00);
IkReal x495=(cj0*r02);
IkReal x496=((1.0)*x482);
IkReal x497=((0.38)*py*sj1);
IkReal x498=((1.0)*x483);
IkReal x499=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x492))+((cj0*py)));
evalcond[2]=(sj4+(((-1.0)*x486))+x491);
evalcond[3]=((((-1.0)*px*r00))+(((-1.0)*r02*x490))+((x493*x494))+(((-1.0)*py*r01))+((x484*x493))+(((-1.0)*r02*x487)));
evalcond[4]=((-0.018144)+(((-1.0)*pz*x489))+(((-1.0)*x498))+(((-1.0)*x496))+((cj0*x499))+(((-1.0)*x481))+((sj0*x497)));
evalcond[5]=((((-1.0)*x484*x487))+(((-0.134)*cj4))+(((-1.0)*r02*x493))+((sj0*x488))+(((-1.0)*x490*x494))+((px*x495))+(((-1.0)*x487*x494))+(((-1.0)*x484*x490)));
evalcond[6]=((((-0.0361)*x486))+(((-1.0)*r01*x499))+(((-1.0)*pz*x485*x495))+(((0.017956)*sj4))+(((-1.0)*x491*x498))+(((-1.0)*x486*x498))+(((-1.0)*x486*x496))+(((-1.0)*cj0*x488*x489))+(((-1.0)*pz*x486*x489))+((px*x484*x485))+((pz*x489*x491))+((x481*x486))+(((-1.0)*px*x485*x494))+((x481*x491))+((r02*x489*x492))+((r00*x497))+(((0.0361)*x491))+(((2.0)*pz*r02*x492))+((x482*x491)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x500=((7.46268656716418)*cj1);
IkReal x501=(py*sj0);
IkReal x502=(cj0*px);
IkReal x503=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*pz*x503))+(((-1.0)*x500*x501))+(((-1.0)*x500*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+(((-1.0)*x502*x503))+(((-1.0)*x501*x503))+((pz*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x503))+(((-1.0)*x500*x501))+(((-1.0)*x500*x502))))+IKsqr(((1.41791044776119)+(((-1.0)*x502*x503))+(((-1.0)*x501*x503))+((pz*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x503))+(((-1.0)*x500*x501))+(((-1.0)*x500*x502))), ((1.41791044776119)+(((-1.0)*x502*x503))+(((-1.0)*x501*x503))+((pz*x500))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x504=IKsin(j2);
IkReal x505=IKcos(j2);
IkReal x506=pz*pz;
IkReal x507=py*py;
IkReal x508=px*px;
IkReal x509=(cj0*sj1);
IkReal x510=(r01*sj0);
IkReal x511=((1.0)*cj1);
IkReal x512=(r02*sj1);
IkReal x513=(cj1*r02);
IkReal x514=((1.0)*sj1);
IkReal x515=(py*sj1);
IkReal x516=(py*r00);
IkReal x517=(px*sj1);
IkReal x518=((2.0)*pz);
IkReal x519=(px*r02);
IkReal x520=(r00*sj0);
IkReal x521=((2.0)*px);
IkReal x522=((0.38)*r02);
IkReal x523=(cj0*r00);
IkReal x524=(py*sj0);
IkReal x525=(pz*r01);
IkReal x526=(py*r01);
IkReal x527=(cj0*px);
IkReal x528=((0.0361)*cj1);
IkReal x529=((0.38)*pz);
IkReal x530=(cj1*px);
IkReal x531=(r00*x506);
IkReal x532=(r00*x507);
IkReal x533=((0.134)*x505);
IkReal x534=(cj4*x505);
IkReal x535=((0.134)*x504);
IkReal x536=((1.0)*x508);
IkReal x537=(cj4*x504);
IkReal x538=(x518*x524);
evalcond[0]=((((-1.0)*x537))+((r00*x509))+(((-1.0)*r02*x511))+((sj1*x510)));
evalcond[1]=((-0.19)+x533+((px*x509))+(((-1.0)*pz*x511))+((sj0*x515)));
evalcond[2]=((((-1.0)*x511*x527))+(((-1.0)*x511*x524))+(((-1.0)*x535))+(((-1.0)*pz*x514)));
evalcond[3]=((((-1.0)*x511*x523))+(((-1.0)*x534))+(((-1.0)*x512))+(((-1.0)*x510*x511)));
evalcond[4]=((((-1.0)*x511*x516))+(((-1.0)*py*r02*x509))+((px*sj0*x512))+(((-1.0)*sj4*x535))+((x509*x525))+(((-1.0)*pz*x514*x520))+((r01*x530)));
evalcond[5]=(((r01*x517))+((cj1*pz*x520))+(((0.19)*x520))+(((-1.0)*cj0*x511*x525))+(((-1.0)*x514*x516))+(((-1.0)*sj0*x511*x519))+(((-1.0)*sj4*x533))+(((-0.19)*cj0*r01))+((cj0*py*x513)));
evalcond[6]=(((sj1*x508*x510))+((pz*x522))+(((-1.0)*r02*x508*x511))+(((-1.0)*r02*x507*x511))+((sj1*x506*x510))+(((-0.017956)*x537))+(((-0.0361)*sj1*x510))+((cj1*x518*x526))+((x509*x531))+((x509*x532))+(((0.38)*px*r00))+(((-1.0)*x515*x520*x521))+((r00*x518*x530))+(((-0.0361)*r00*x509))+(((-1.0)*x509*x521*x526))+(((-1.0)*x512*x538))+(((-1.0)*r00*x509*x536))+(((-1.0)*x509*x518*x519))+((x506*x513))+(((0.38)*x526))+(((0.0361)*x513))+(((-1.0)*x507*x510*x514)));
evalcond[7]=((((-0.0361)*x512))+((x522*x524))+(((-1.0)*x523*x528))+(((-1.0)*x523*x529))+(((-0.017956)*x534))+(((0.38)*cj0*x519))+((cj1*x507*x510))+(((-1.0)*x508*x510*x511))+((x513*x538))+(((-1.0)*x506*x510*x511))+(((-1.0)*x507*x512))+(((-1.0)*x506*x511*x523))+(((-1.0)*x512*x536))+((r01*x515*x518))+((x513*x518*x527))+((x506*x512))+(((-1.0)*x510*x528))+(((-1.0)*x510*x529))+((cj1*x508*x523))+(((-1.0)*x507*x511*x523))+((cj0*cj1*x521*x526))+((r00*x517*x518))+((cj1*sj0*x516*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x550=IKPowWithIntegerCheck(cj4,-1);
if(!x550.valid){
continue;
}
IkReal x539=x550.value;
IkReal x540=((1000.0)*cj4);
IkReal x541=(pz*sj1);
IkReal x542=(cj1*r02);
IkReal x543=(cj1*cj3);
IkReal x544=(cj0*px);
IkReal x545=((273.0)*cj3);
IkReal x546=(py*sj0);
IkReal x547=(cj0*r00*sj1);
IkReal x548=((-0.00719424460431655)*x539);
IkReal x549=(r01*sj0*sj1);
CheckValue<IkReal> x551=IKPowWithIntegerCheck(sj3,-1);
if(!x551.valid){
continue;
}
if( IKabs((x548*(((((-273.0)*x549))+(((-273.0)*x547))+(((-1.0)*x540*x541))+(((-1.0)*cj1*x540*x544))+(((-1.0)*cj1*x540*x546))+(((273.0)*x542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x548*(x551.value)*(((((-1.0)*x545*x547))+(((-1.0)*x545*x549))+(((-1.0)*cj3*x540*x541))+((x542*x545))+(((-1.0)*x540*x543*x546))+(((-1.0)*x540*x543*x544))+(((139.0)*x542))+(((-139.0)*x549))+(((-139.0)*x547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x548*(((((-273.0)*x549))+(((-273.0)*x547))+(((-1.0)*x540*x541))+(((-1.0)*cj1*x540*x544))+(((-1.0)*cj1*x540*x546))+(((273.0)*x542))))))+IKsqr((x548*(x551.value)*(((((-1.0)*x545*x547))+(((-1.0)*x545*x549))+(((-1.0)*cj3*x540*x541))+((x542*x545))+(((-1.0)*x540*x543*x546))+(((-1.0)*x540*x543*x544))+(((139.0)*x542))+(((-139.0)*x549))+(((-139.0)*x547))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x548*(((((-273.0)*x549))+(((-273.0)*x547))+(((-1.0)*x540*x541))+(((-1.0)*cj1*x540*x544))+(((-1.0)*cj1*x540*x546))+(((273.0)*x542))))), (x548*(x551.value)*(((((-1.0)*x545*x547))+(((-1.0)*x545*x549))+(((-1.0)*cj3*x540*x541))+((x542*x545))+(((-1.0)*x540*x543*x546))+(((-1.0)*x540*x543*x544))+(((139.0)*x542))+(((-139.0)*x549))+(((-139.0)*x547))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x552=IKcos(j2);
IkReal x553=IKsin(j2);
IkReal x554=pz*pz;
IkReal x555=py*py;
IkReal x556=px*px;
IkReal x557=((0.055208)*cj4);
IkReal x558=(r01*sj0);
IkReal x559=((1.0)*cj1);
IkReal x560=((1.0)*sj1);
IkReal x561=(py*sj1);
IkReal x562=(cj0*r00);
IkReal x563=((2.0)*pz);
IkReal x564=(cj0*sj1);
IkReal x565=(px*r02);
IkReal x566=((0.273)*cj3);
IkReal x567=(cj1*r02);
IkReal x568=(pz*r01);
IkReal x569=(py*sj0);
IkReal x570=(px*r00);
IkReal x571=((2.0)*cj1);
IkReal x572=(cj0*py);
IkReal x573=((0.075894)*cj4);
IkReal x574=((0.0361)*cj1);
IkReal x575=((0.38)*r02);
IkReal x576=((0.0361)*sj1);
IkReal x577=((0.38)*pz);
IkReal x578=(cj0*r01);
IkReal x579=(px*r01);
IkReal x580=(py*r00);
IkReal x581=(py*r01);
IkReal x582=(sj3*x552);
IkReal x583=((0.139)*x553);
IkReal x584=(sj4*x553);
IkReal x585=(sj1*x554);
IkReal x586=(pz*r00*sj0);
IkReal x587=(sj3*x553);
IkReal x588=(r02*x556);
IkReal x589=((0.139)*x552);
IkReal x590=(r02*x555);
IkReal x591=(cj3*cj4*x552);
IkReal x592=(cj3*cj4*x553);
evalcond[0]=(((sj1*x558))+(((-1.0)*r02*x559))+((sj1*x562))+x592+(((-1.0)*cj4*x582)));
evalcond[1]=(((cj4*x587))+(((-1.0)*x559*x562))+x591+(((-1.0)*x558*x559))+(((-1.0)*r02*x560)));
evalcond[2]=((-0.19)+(((-0.273)*x587))+(((-1.0)*x552*x566))+((sj0*x561))+(((-1.0)*pz*x559))+(((-1.0)*x589))+((px*x564)));
evalcond[3]=((((-0.273)*x582))+(((-1.0)*pz*x560))+((x553*x566))+(((-1.0)*x559*x569))+x583+(((-1.0)*cj0*px*x559)));
evalcond[4]=((((-1.0)*r02*x560*x572))+(((-1.0)*x559*x580))+((x564*x568))+(((-1.0)*x560*x586))+((sj0*sj1*x565))+((x566*x584))+((sj4*x583))+((cj1*x579))+(((-0.273)*sj4*x582)));
evalcond[5]=((((-1.0)*cj0*x559*x568))+((sj1*x579))+((x567*x572))+(((-1.0)*x560*x580))+(((0.273)*sj3*x584))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x559*x565))+((sj4*x589))+((sj4*x552*x566))+(((-0.19)*x578))+((cj1*x586)));
evalcond[6]=(((x562*x585))+(((-1.0)*x559*x588))+(((-2.0)*sj0*x561*x570))+((x558*x585))+(((0.0361)*x567))+((pz*x575))+(((-1.0)*x556*x560*x562))+(((-1.0)*r02*sj0*x561*x563))+(((-1.0)*x555*x558*x560))+((sj1*x555*x562))+(((-1.0)*x558*x576))+(((0.38)*x570))+((cj1*x563*x570))+(((-1.0)*x559*x590))+((sj1*x556*x558))+((cj1*x563*x581))+(((0.38)*x581))+(((-2.0)*px*x561*x578))+(((0.09385)*x592))+((x553*x573))+((x554*x567))+(((-1.0)*x557*x582))+(((-1.0)*x562*x576))+(((-1.0)*x563*x564*x565)));
evalcond[7]=((((-1.0)*x560*x590))+(((0.38)*cj0*x565))+((cj1*x556*x562))+(((-1.0)*x556*x558*x559))+((r02*x585))+((x563*x567*x569))+(((-1.0)*x560*x588))+(((-1.0)*x554*x559*x562))+(((-1.0)*x558*x577))+(((-1.0)*x558*x574))+((cj0*cj1*x563*x565))+((x557*x587))+((cj1*x555*x558))+(((-1.0)*x555*x559*x562))+((sj1*x563*x570))+((x571*x572*x579))+((x569*x575))+((x569*x570*x571))+((x552*x573))+(((0.09385)*x591))+(((-1.0)*r02*x576))+((r01*x561*x563))+(((-1.0)*x554*x558*x559))+(((-1.0)*x562*x577))+(((-1.0)*x562*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x593=((139.0)*sj1);
IkReal x594=(cj0*r00);
IkReal x595=(cj1*sj3);
IkReal x596=(cj3*cj4);
IkReal x597=((273.0)*r02);
IkReal x598=(cj1*cj3);
IkReal x599=(cj4*sj3);
IkReal x600=(r01*sj0);
IkReal x601=((273.0)*sj1);
IkReal x602=((1000.0)*cj4*pz);
IkReal x603=((1000.0)*py*sj0*sj1);
IkReal x604=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x605=IKPowWithIntegerCheck(IKsign(((((-139.0)*x596))+(((-273.0)*cj4)))),-1);
if(!x605.valid){
continue;
}
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(((((-1.0)*x597*x598))+((x595*x602))+((x593*x600))+((cj3*x600*x601))+(((-1.0)*x599*x604))+(((-1.0)*x599*x603))+((cj3*x594*x601))+(((190.0)*x599))+(((-139.0)*cj1*r02))+((x593*x594)))),(((x595*x597))+(((-1.0)*x596*x604))+(((-1.0)*x596*x603))+(((-1.0)*sj3*x594*x601))+(((190.0)*x596))+(((1000.0)*cj1*pz*x596))+(((-1.0)*sj3*x600*x601))),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x605.value)))+(x606.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x607=IKcos(j2);
IkReal x608=IKsin(j2);
IkReal x609=pz*pz;
IkReal x610=py*py;
IkReal x611=px*px;
IkReal x612=((0.055208)*cj4);
IkReal x613=(r01*sj0);
IkReal x614=((1.0)*cj1);
IkReal x615=((1.0)*sj1);
IkReal x616=(py*sj1);
IkReal x617=(cj0*r00);
IkReal x618=((2.0)*pz);
IkReal x619=(cj0*sj1);
IkReal x620=(px*r02);
IkReal x621=((0.273)*cj3);
IkReal x622=(cj1*r02);
IkReal x623=(pz*r01);
IkReal x624=(py*sj0);
IkReal x625=(px*r00);
IkReal x626=((2.0)*cj1);
IkReal x627=(cj0*py);
IkReal x628=((0.075894)*cj4);
IkReal x629=((0.0361)*cj1);
IkReal x630=((0.38)*r02);
IkReal x631=((0.0361)*sj1);
IkReal x632=((0.38)*pz);
IkReal x633=(cj0*r01);
IkReal x634=(px*r01);
IkReal x635=(py*r00);
IkReal x636=(py*r01);
IkReal x637=(sj3*x607);
IkReal x638=((0.139)*x608);
IkReal x639=(sj4*x608);
IkReal x640=(sj1*x609);
IkReal x641=(pz*r00*sj0);
IkReal x642=(sj3*x608);
IkReal x643=(r02*x611);
IkReal x644=((0.139)*x607);
IkReal x645=(r02*x610);
IkReal x646=(cj3*cj4*x607);
IkReal x647=(cj3*cj4*x608);
evalcond[0]=((((-1.0)*cj4*x637))+((sj1*x613))+((sj1*x617))+x647+(((-1.0)*r02*x614)));
evalcond[1]=((((-1.0)*x614*x617))+((cj4*x642))+x646+(((-1.0)*x613*x614))+(((-1.0)*r02*x615)));
evalcond[2]=((-0.19)+((sj0*x616))+((px*x619))+(((-1.0)*x607*x621))+(((-1.0)*x644))+(((-1.0)*pz*x614))+(((-0.273)*x642)));
evalcond[3]=((((-0.273)*x637))+(((-1.0)*cj0*px*x614))+((x608*x621))+(((-1.0)*pz*x615))+(((-1.0)*x614*x624))+x638);
evalcond[4]=(((sj4*x638))+(((-1.0)*r02*x615*x627))+((x619*x623))+(((-1.0)*x615*x641))+((sj0*sj1*x620))+(((-0.273)*sj4*x637))+(((-1.0)*x614*x635))+((x621*x639))+((cj1*x634)));
evalcond[5]=((((-1.0)*sj0*x614*x620))+(((-1.0)*cj0*x614*x623))+((sj4*x644))+(((0.273)*sj3*x639))+((cj1*x641))+(((-0.19)*x633))+((sj1*x634))+(((0.19)*r00*sj0))+(((-1.0)*x615*x635))+((sj4*x607*x621))+((x622*x627)));
evalcond[6]=((((-2.0)*sj0*x616*x625))+(((-1.0)*x610*x613*x615))+(((0.09385)*x647))+(((-1.0)*x614*x645))+(((-1.0)*x614*x643))+((pz*x630))+((cj1*x618*x625))+((cj1*x618*x636))+(((0.0361)*x622))+(((-2.0)*px*x616*x633))+((x617*x640))+(((0.38)*x625))+(((0.38)*x636))+((sj1*x611*x613))+((x609*x622))+(((-1.0)*x617*x631))+((sj1*x610*x617))+((x613*x640))+((x608*x628))+(((-1.0)*x612*x637))+(((-1.0)*x618*x619*x620))+(((-1.0)*r02*sj0*x616*x618))+(((-1.0)*x611*x615*x617))+(((-1.0)*x613*x631)));
evalcond[7]=(((x626*x627*x634))+(((-1.0)*x609*x613*x614))+(((-1.0)*x609*x614*x617))+(((0.09385)*x646))+((cj0*cj1*x618*x620))+(((-1.0)*x611*x613*x614))+((cj1*x611*x617))+((cj1*x610*x613))+((sj1*x618*x625))+(((-1.0)*r02*x631))+(((-1.0)*x615*x643))+(((-1.0)*x615*x645))+((r02*x640))+(((-1.0)*x617*x629))+(((-1.0)*x617*x632))+((x618*x622*x624))+((x624*x625*x626))+((x624*x630))+(((-1.0)*x610*x614*x617))+((r01*x616*x618))+(((-1.0)*x613*x629))+((x607*x628))+(((0.38)*cj0*x620))+((x612*x642))+(((-1.0)*x613*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x648=((1.0)*sj1);
IkReal x649=(cj1*sj3);
IkReal x650=(cj0*r00);
IkReal x651=(cj3*r02);
IkReal x652=(r01*sj0);
IkReal x653=(sj1*sj3);
IkReal x654=(cj3*x652);
CheckValue<IkReal> x655=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x648*x650))+((r02*x653))+((x649*x650))+((x649*x652))+((cj1*x651))+(((-1.0)*x648*x654)))),(((sj1*x651))+((x652*x653))+((cj1*x654))+(((-1.0)*r02*x649))+((cj1*cj3*x650))+((x650*x653))),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x655.value)))+(x656.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x657=IKcos(j2);
IkReal x658=IKsin(j2);
IkReal x659=pz*pz;
IkReal x660=py*py;
IkReal x661=px*px;
IkReal x662=((0.055208)*cj4);
IkReal x663=(r01*sj0);
IkReal x664=((1.0)*cj1);
IkReal x665=((1.0)*sj1);
IkReal x666=(py*sj1);
IkReal x667=(cj0*r00);
IkReal x668=((2.0)*pz);
IkReal x669=(cj0*sj1);
IkReal x670=(px*r02);
IkReal x671=((0.273)*cj3);
IkReal x672=(cj1*r02);
IkReal x673=(pz*r01);
IkReal x674=(py*sj0);
IkReal x675=(px*r00);
IkReal x676=((2.0)*cj1);
IkReal x677=(cj0*py);
IkReal x678=((0.075894)*cj4);
IkReal x679=((0.0361)*cj1);
IkReal x680=((0.38)*r02);
IkReal x681=((0.0361)*sj1);
IkReal x682=((0.38)*pz);
IkReal x683=(cj0*r01);
IkReal x684=(px*r01);
IkReal x685=(py*r00);
IkReal x686=(py*r01);
IkReal x687=(sj3*x657);
IkReal x688=((0.139)*x658);
IkReal x689=(sj4*x658);
IkReal x690=(sj1*x659);
IkReal x691=(pz*r00*sj0);
IkReal x692=(sj3*x658);
IkReal x693=(r02*x661);
IkReal x694=((0.139)*x657);
IkReal x695=(r02*x660);
IkReal x696=(cj3*cj4*x657);
IkReal x697=(cj3*cj4*x658);
evalcond[0]=(((sj1*x667))+((sj1*x663))+x697+(((-1.0)*cj4*x687))+(((-1.0)*r02*x664)));
evalcond[1]=(((cj4*x692))+(((-1.0)*x663*x664))+x696+(((-1.0)*x664*x667))+(((-1.0)*r02*x665)));
evalcond[2]=((-0.19)+(((-1.0)*x657*x671))+((sj0*x666))+((px*x669))+(((-1.0)*x694))+(((-1.0)*pz*x664))+(((-0.273)*x692)));
evalcond[3]=((((-0.273)*x687))+((x658*x671))+(((-1.0)*x664*x674))+(((-1.0)*cj0*px*x664))+x688+(((-1.0)*pz*x665)));
evalcond[4]=(((cj1*x684))+(((-1.0)*r02*x665*x677))+(((-1.0)*x664*x685))+(((-0.273)*sj4*x687))+((x671*x689))+((x669*x673))+(((-1.0)*x665*x691))+((sj0*sj1*x670))+((sj4*x688)));
evalcond[5]=(((x672*x677))+(((0.273)*sj3*x689))+((cj1*x691))+(((-1.0)*x665*x685))+((sj4*x694))+(((-1.0)*cj0*x664*x673))+(((-0.19)*x683))+(((-1.0)*sj0*x664*x670))+(((0.19)*r00*sj0))+((sj1*x684))+((sj4*x657*x671)));
evalcond[6]=((((-1.0)*x668*x669*x670))+((cj1*x668*x675))+(((-1.0)*r02*sj0*x666*x668))+(((-1.0)*x667*x681))+(((0.38)*x686))+(((-2.0)*sj0*x666*x675))+(((0.0361)*x672))+((x659*x672))+(((-1.0)*x662*x687))+(((-1.0)*x663*x681))+((x658*x678))+(((0.38)*x675))+(((-1.0)*x660*x663*x665))+(((-1.0)*x661*x665*x667))+((x663*x690))+((cj1*x668*x686))+((sj1*x661*x663))+(((-1.0)*x664*x693))+(((-1.0)*x664*x695))+((sj1*x660*x667))+((x667*x690))+(((-2.0)*px*x666*x683))+(((0.09385)*x697))+((pz*x680)));
evalcond[7]=(((cj0*cj1*x668*x670))+(((-1.0)*x661*x663*x664))+((x674*x675*x676))+(((-1.0)*x667*x682))+((sj1*x668*x675))+(((-1.0)*x663*x679))+(((-1.0)*x660*x664*x667))+((x674*x680))+(((-1.0)*x663*x682))+((r02*x690))+(((-1.0)*r02*x681))+(((0.38)*cj0*x670))+(((-1.0)*x667*x679))+((cj1*x661*x667))+(((-1.0)*x659*x663*x664))+(((-1.0)*x665*x695))+(((-1.0)*x665*x693))+((cj1*x660*x663))+((r01*x666*x668))+((x662*x692))+((x676*x677*x684))+((x668*x672*x674))+((x657*x678))+(((0.09385)*x696))+(((-1.0)*x659*x664*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x698=((190.0)*sj1);
IkReal x699=((5.00698342424961)*sj1);
CheckValue<IkReal> x700=IKPowWithIntegerCheck(cj4,-1);
if(!x700.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x700.value)*(((((-1.0)*r01*sj0*x698))+(((-1.0)*cj0*r00*x698))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.76092971776425)+(((-1.0)*py*sj0*x699))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x700.value)*(((((-1.0)*r01*sj0*x698))+(((-1.0)*cj0*r00*x698))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))))+IKsqr(((-0.76092971776425)+(((-1.0)*py*sj0*x699))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x700.value)*(((((-1.0)*r01*sj0*x698))+(((-1.0)*cj0*r00*x698))+(((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))), ((-0.76092971776425)+(((-1.0)*py*sj0*x699))+(((5.00698342424961)*cj1*pz))+(((13.1762721690779)*(pz*pz)))+(((13.1762721690779)*(px*px)))+(((13.1762721690779)*(py*py)))+(((-1.0)*cj0*px*x699))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x701=IKcos(j3);
IkReal x702=px*px;
IkReal x703=pz*pz;
IkReal x704=py*py;
IkReal x705=(r01*sj0);
IkReal x706=((2.0)*py);
IkReal x707=(r00*sj0);
IkReal x708=((0.19)*cj1);
IkReal x709=(py*r02);
IkReal x710=((0.38)*cj1);
IkReal x711=((1.0)*pz);
IkReal x712=(cj0*r01);
IkReal x713=((0.19)*sj1);
IkReal x714=((0.139)*cj4);
IkReal x715=(cj0*r00);
IkReal x716=(cj0*r02);
IkReal x717=((1.0)*x703);
IkReal x718=((0.38)*py*sj1);
IkReal x719=((1.0)*x704);
IkReal x720=((0.075894)*x701);
IkReal x721=((0.38)*px*sj1);
IkReal x722=(px*r02*sj0);
evalcond[0]=((((-1.0)*r02*x711))+(((-1.0)*r02*x708))+(((-1.0)*px*r00))+((x714*(IKsin(j3))))+(((-1.0)*py*r01))+((x713*x715))+((x705*x713)));
evalcond[1]=((0.05775)+(((-1.0)*pz*x710))+(((-1.0)*x702))+((cj0*x721))+(((-1.0)*x719))+(((-1.0)*x717))+((sj0*x718))+x720);
evalcond[2]=((((-1.0)*r02*x713))+(((-1.0)*x711*x715))+((px*x716))+(((-1.0)*x705*x711))+((sj0*x709))+(((-1.0)*x705*x708))+(((-1.0)*x708*x715))+(((-0.273)*cj4))+(((-1.0)*x701*x714)));
evalcond[3]=((((-1.0)*x707*x719))+(((-1.0)*x707*x717))+(((-0.0361)*x707))+(((-1.0)*px*x706*x715))+((x702*x707))+((x702*x712))+((r00*x718))+((x710*x722))+(((0.09385)*sj4))+((x703*x712))+(((2.0)*pz*x722))+((pz*x710*x712))+((px*x705*x706))+(((-1.0)*x712*x719))+(((-1.0)*cj0*x709*x710))+((sj4*x720))+(((-1.0)*pz*x707*x710))+(((-1.0)*r01*x721))+(((-1.0)*pz*x706*x716))+(((0.0361)*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x723=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x723)));
j2eval[1]=IKsign(((((-139.0)*x723))+(((-273.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x724=px*px;
IkReal x725=((0.075894)*cj3);
IkReal x726=pz*pz;
IkReal x727=py*py;
IkReal x728=(r01*sj0);
IkReal x729=((0.19)*cj1);
IkReal x730=((1.0)*cj1);
IkReal x731=(py*r02);
IkReal x732=((1.0)*sj1);
IkReal x733=((0.38)*cj0);
IkReal x734=(px*r02);
IkReal x735=(py*r01);
IkReal x736=((1.0)*sj0);
IkReal x737=(cj1*r02);
IkReal x738=((0.38)*sj1);
IkReal x739=(r00*sj0);
IkReal x740=(cj0*r01);
IkReal x741=((1.0)*pz);
IkReal x742=((0.0361)*cj1);
IkReal x743=(cj0*r00);
IkReal x744=((0.38)*sj0);
IkReal x745=(r02*sj1);
IkReal x746=(pz*r00);
IkReal x747=(px*r00);
IkReal x748=((0.19)*sj1);
IkReal x749=((2.0)*cj1);
IkReal x750=(pz*sj0);
IkReal x751=(cj0*sj1);
IkReal x752=((0.0361)*sj1);
IkReal x753=((0.38)*pz);
IkReal x754=(cj0*pz);
IkReal x755=(r00*x727);
IkReal x756=((2.0)*pz*sj1);
IkReal x757=(cj0*x726);
IkReal x758=((2.0)*px*py);
IkReal x759=(cj1*x753);
IkReal x760=(r02*x724);
IkReal x761=((1.0)*x727);
IkReal x762=(r02*x727);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x736))+((cj0*py)));
evalcond[2]=((1.0)+x740+(((-1.0)*r00*x736)));
evalcond[3]=((((-1.0)*r02*x730))+((sj1*x743))+((sj1*x728)));
evalcond[4]=((((-1.0)*r02*x732))+(((-1.0)*x730*x743))+(((-1.0)*x728*x730)));
evalcond[5]=((((-1.0)*r02*x729))+(((-1.0)*x735))+(((-1.0)*r02*x741))+((x743*x748))+(((-1.0)*x747))+((x728*x748)));
evalcond[6]=((0.05775)+((px*sj1*x733))+(((-1.0)*x761))+(((-1.0)*x726))+(((-1.0)*x724))+((py*sj0*x738))+x725+(((-1.0)*x759)));
evalcond[7]=((((-1.0)*x728*x741))+(((-0.19)*x745))+(((-1.0)*x729*x743))+((cj0*x734))+(((-1.0)*x741*x743))+((sj0*x731))+(((-1.0)*x728*x729)));
evalcond[8]=((0.09385)+((x726*x740))+(((-0.0361)*x739))+(((-2.0)*x731*x754))+(((-1.0)*x740*x761))+(((0.0361)*x740))+(((-1.0)*px*r01*x738))+((x724*x740))+(((-1.0)*x739*x759))+((cj1*pz*r01*x733))+((py*r00*x738))+((cj1*x734*x744))+(((-1.0)*x743*x758))+((x724*x739))+x725+(((-1.0)*r00*x726*x736))+(((2.0)*x734*x750))+((x728*x758))+(((-1.0)*x736*x755))+(((-1.0)*cj1*x731*x733)));
evalcond[9]=(((px*x746*x749))+(((-1.0)*sj1*x739*x758))+((r02*x753))+(((-1.0)*x724*x732*x743))+((x726*x737))+(((-1.0)*x728*x752))+((sj1*x724*x728))+(((-2.0)*pz*x734*x751))+(((0.38)*x747))+((sj1*x727*x743))+((sj1*x726*x743))+(((-1.0)*x727*x728*x732))+(((-1.0)*x730*x762))+(((-1.0)*x730*x760))+(((-1.0)*x743*x752))+((pz*x735*x749))+(((0.38)*x735))+(((-2.0)*px*x735*x751))+(((-2.0)*sj1*x731*x750))+((sj1*x726*x728))+(((0.0361)*x737)));
evalcond[10]=((((-1.0)*x724*x728*x730))+((x726*x745))+((x735*x756))+(((-1.0)*x728*x742))+(((-1.0)*x742*x743))+((cj1*x727*x728))+(((-1.0)*x726*x730*x743))+((x731*x744))+(((-1.0)*x728*x753))+(((2.0)*px*sj1*x746))+(((-0.0361)*x745))+(((-1.0)*x732*x760))+(((-1.0)*x732*x762))+((x733*x734))+((cj1*x724*x743))+((px*py*x739*x749))+(((-1.0)*x726*x728*x730))+(((-1.0)*x733*x746))+((x731*x749*x750))+((x734*x749*x754))+(((-1.0)*x727*x730*x743))+((cj0*px*x735*x749)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x763=((139000.0)*cj1);
IkReal x764=(py*sj0);
IkReal x765=(cj0*px);
IkReal x766=((273000.0)*cj3);
IkReal x767=((139000.0)*sj1);
IkReal x768=((273000.0)*cj1*sj3);
IkReal x769=((273000.0)*sj1*sj3);
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(((((-1.0)*x763*x764))+(((-1.0)*x763*x765))+(((-1.0)*x765*x769))+(((-1.0)*pz*sj1*x766))+(((-1.0)*x764*x769))+(((51870.0)*sj3))+(((-1.0)*cj1*x765*x766))+((pz*x768))+(((-1.0)*cj1*x764*x766))+(((-1.0)*pz*x767)))),((26410.0)+(((-1.0)*x765*x767))+(((-1.0)*x764*x767))+(((51870.0)*cj3))+((pz*x763))+((pz*x769))+(((-1.0)*sj1*x764*x766))+((x765*x768))+((cj1*pz*x766))+(((-1.0)*sj1*x765*x766))+((x764*x768))),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
CheckValue<IkReal> x771=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x771.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x770.value)+(((1.5707963267949)*(x771.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x772=IKcos(j2);
IkReal x773=IKsin(j2);
IkReal x774=(px*sj1);
IkReal x775=((0.273)*cj3);
IkReal x776=(py*sj1);
IkReal x777=((1.0)*r00);
IkReal x778=(cj1*sj0);
IkReal x779=((1.0)*px);
IkReal x780=((1.0)*pz);
IkReal x781=(cj0*r01);
IkReal x782=(pz*sj1);
IkReal x783=((0.273)*sj3);
IkReal x784=(cj0*cj1);
IkReal x785=((0.139)*x773);
IkReal x786=((0.139)*x772);
IkReal x787=(x773*x775);
IkReal x788=(x772*x783);
IkReal x789=(x773*x783);
IkReal x790=(x772*x775);
IkReal x791=(x787+x785);
IkReal x792=(x790+x786+x789);
evalcond[0]=((-0.19)+(((-1.0)*x792))+((sj0*x776))+(((-1.0)*cj1*x780))+((cj0*x774)));
evalcond[1]=((((-1.0)*py*x778))+(((-1.0)*x788))+x791+(((-1.0)*sj1*x780))+(((-1.0)*x779*x784)));
evalcond[2]=(((x781*x782))+(((-1.0)*cj0*r02*x776))+(((-1.0)*x788))+(((-1.0)*cj1*py*x777))+((r02*sj0*x774))+x791+(((-1.0)*sj0*x777*x782))+((cj1*px*r01)));
evalcond[3]=(((py*r02*x784))+(((-0.19)*x781))+((pz*r00*x778))+(((-1.0)*cj1*x780*x781))+((r01*x774))+(((0.19)*r00*sj0))+(((-1.0)*x776*x777))+x792+(((-1.0)*r02*x778*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x793=px*px;
IkReal x794=pz*pz;
IkReal x795=py*py;
IkReal x796=((0.075894)*cj3);
IkReal x797=(r01*sj0);
IkReal x798=((0.19)*cj1);
IkReal x799=((1.0)*cj1);
IkReal x800=(py*r02);
IkReal x801=((1.0)*sj1);
IkReal x802=((0.38)*cj0);
IkReal x803=(px*r02);
IkReal x804=(py*r01);
IkReal x805=((1.0)*sj0);
IkReal x806=(cj1*r02);
IkReal x807=((0.38)*sj1);
IkReal x808=(r00*sj0);
IkReal x809=(cj0*r01);
IkReal x810=((1.0)*pz);
IkReal x811=((0.0361)*cj1);
IkReal x812=(cj0*r00);
IkReal x813=((0.38)*sj0);
IkReal x814=(r02*sj1);
IkReal x815=(pz*r00);
IkReal x816=(px*r00);
IkReal x817=((0.19)*sj1);
IkReal x818=((2.0)*cj1);
IkReal x819=(pz*sj0);
IkReal x820=(cj0*sj1);
IkReal x821=((0.0361)*sj1);
IkReal x822=((0.38)*pz);
IkReal x823=(cj0*pz);
IkReal x824=(r00*x795);
IkReal x825=((2.0)*pz*sj1);
IkReal x826=(cj0*x794);
IkReal x827=((2.0)*px*py);
IkReal x828=(cj1*x822);
IkReal x829=(r02*x793);
IkReal x830=((1.0)*x795);
IkReal x831=(r02*x795);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x805))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x805))+x809);
evalcond[3]=(((sj1*x812))+((sj1*x797))+(((-1.0)*r02*x799)));
evalcond[4]=((((-1.0)*r02*x801))+(((-1.0)*x797*x799))+(((-1.0)*x799*x812)));
evalcond[5]=((((-1.0)*x804))+((x797*x817))+((x812*x817))+(((-1.0)*x816))+(((-1.0)*r02*x810))+(((-1.0)*r02*x798)));
evalcond[6]=((0.05775)+((py*sj0*x807))+(((-1.0)*x828))+(((-1.0)*x830))+((px*sj1*x802))+x796+(((-1.0)*x794))+(((-1.0)*x793)));
evalcond[7]=((((-1.0)*x797*x798))+(((-1.0)*x810*x812))+(((-1.0)*x798*x812))+((sj0*x800))+((cj0*x803))+(((-0.19)*x814))+(((-1.0)*x797*x810)));
evalcond[8]=((-0.09385)+((x793*x808))+((x793*x809))+(((-0.0361)*x808))+(((-1.0)*x812*x827))+(((-1.0)*x808*x828))+(((-1.0)*r00*x794*x805))+(((-1.0)*x796))+((x794*x809))+(((2.0)*x803*x819))+(((-2.0)*x800*x823))+(((-1.0)*x809*x830))+(((-1.0)*cj1*x800*x802))+((py*r00*x807))+((cj1*pz*r01*x802))+((cj1*x803*x813))+(((-1.0)*px*r01*x807))+(((-1.0)*x805*x824))+(((0.0361)*x809))+((x797*x827)));
evalcond[9]=((((-1.0)*x797*x821))+(((-1.0)*x812*x821))+(((-1.0)*x793*x801*x812))+(((-1.0)*sj1*x808*x827))+((sj1*x795*x812))+(((0.38)*x804))+((sj1*x794*x812))+(((-2.0)*px*x804*x820))+((px*x815*x818))+(((-2.0)*sj1*x800*x819))+(((-1.0)*x799*x829))+((sj1*x793*x797))+((x794*x806))+((pz*x804*x818))+(((-2.0)*pz*x803*x820))+((sj1*x794*x797))+(((0.38)*x816))+((r02*x822))+(((-1.0)*x799*x831))+(((0.0361)*x806))+(((-1.0)*x795*x797*x801)));
evalcond[10]=((((-1.0)*x797*x822))+((cj1*x793*x812))+((x794*x814))+((x800*x818*x819))+(((-1.0)*x801*x829))+(((2.0)*px*sj1*x815))+((cj1*x795*x797))+(((-1.0)*x802*x815))+(((-1.0)*x811*x812))+(((-1.0)*x794*x797*x799))+(((-1.0)*x794*x799*x812))+(((-1.0)*x795*x799*x812))+(((-0.0361)*x814))+((cj0*px*x804*x818))+(((-1.0)*x801*x831))+((x804*x825))+(((-1.0)*x793*x797*x799))+((x800*x813))+((x802*x803))+((px*py*x808*x818))+(((-1.0)*x797*x811))+((x803*x818*x823)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x832=((139000.0)*cj1);
IkReal x833=(py*sj0);
IkReal x834=(cj0*px);
IkReal x835=((273000.0)*cj3);
IkReal x836=((139000.0)*sj1);
IkReal x837=((273000.0)*cj1*sj3);
IkReal x838=((273000.0)*sj1*sj3);
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(((((-1.0)*x832*x833))+(((-1.0)*x832*x834))+(((-1.0)*pz*x836))+(((-1.0)*cj1*x834*x835))+(((-1.0)*cj1*x833*x835))+(((-1.0)*x833*x838))+((pz*x837))+(((51870.0)*sj3))+(((-1.0)*x834*x838))+(((-1.0)*pz*sj1*x835)))),((26410.0)+(((-1.0)*sj1*x833*x835))+(((-1.0)*x833*x836))+((x833*x837))+((pz*x838))+((pz*x832))+(((-1.0)*x834*x836))+(((51870.0)*cj3))+((x834*x837))+((cj1*pz*x835))+(((-1.0)*sj1*x834*x835))),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x840.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x839.value)+(((1.5707963267949)*(x840.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x841=IKcos(j2);
IkReal x842=IKsin(j2);
IkReal x843=(px*sj1);
IkReal x844=((0.273)*cj3);
IkReal x845=(py*sj1);
IkReal x846=((1.0)*r00);
IkReal x847=(cj1*sj0);
IkReal x848=((1.0)*px);
IkReal x849=((1.0)*pz);
IkReal x850=(cj0*r01);
IkReal x851=(pz*sj1);
IkReal x852=((0.273)*sj3);
IkReal x853=(cj0*cj1);
IkReal x854=((0.139)*x842);
IkReal x855=((0.139)*x841);
IkReal x856=(x841*x852);
IkReal x857=(x842*x844);
IkReal x858=(x842*x852);
IkReal x859=(x841*x844);
IkReal x860=(x857+x854);
IkReal x861=(x855+x858+x859);
evalcond[0]=((-0.19)+(((-1.0)*x861))+((cj0*x843))+((sj0*x845))+(((-1.0)*cj1*x849)));
evalcond[1]=((((-1.0)*x856))+(((-1.0)*x848*x853))+(((-1.0)*py*x847))+x860+(((-1.0)*sj1*x849)));
evalcond[2]=(((x850*x851))+(((-1.0)*x860))+(((-1.0)*sj0*x846*x851))+((r02*sj0*x843))+(((-1.0)*cj0*r02*x845))+(((-1.0)*cj1*py*x846))+x856+((cj1*px*r01)));
evalcond[3]=((((-1.0)*x861))+(((-0.19)*x850))+((r01*x843))+(((-1.0)*cj1*x849*x850))+((py*r02*x853))+(((-1.0)*r02*x847*x848))+(((0.19)*r00*sj0))+(((-1.0)*x845*x846))+((pz*r00*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x862=px*px;
IkReal x863=pz*pz;
IkReal x864=py*py;
IkReal x865=(r01*sj0);
IkReal x866=((2.0)*py);
IkReal x867=(r00*sj0);
IkReal x868=((0.19)*cj1);
IkReal x869=(py*r02);
IkReal x870=((0.38)*cj1);
IkReal x871=((1.0)*pz);
IkReal x872=(cj0*r01);
IkReal x873=(px*sj0);
IkReal x874=((0.19)*sj1);
IkReal x875=(cj0*r00);
IkReal x876=(cj0*r02);
IkReal x877=((1.0)*x863);
IkReal x878=((0.38)*py*sj1);
IkReal x879=((1.0)*x864);
IkReal x880=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x873))+((cj0*py)));
evalcond[2]=(sj4+(((-1.0)*x867))+x872);
evalcond[3]=(((x874*x875))+(((-1.0)*px*r00))+(((-1.0)*r02*x871))+(((-1.0)*r02*x868))+(((-1.0)*py*r01))+((x865*x874)));
evalcond[4]=((0.133644)+((cj0*x880))+(((-1.0)*x862))+((sj0*x878))+(((-1.0)*pz*x870))+(((-1.0)*x879))+(((-1.0)*x877)));
evalcond[5]=((((-1.0)*x865*x868))+(((-1.0)*x871*x875))+(((-1.0)*x868*x875))+((sj0*x869))+(((-1.0)*r02*x874))+(((-0.412)*cj4))+((px*x876))+(((-1.0)*x865*x871)));
evalcond[6]=((((-1.0)*x872*x879))+(((-1.0)*px*x866*x875))+(((-1.0)*pz*x866*x876))+(((0.0361)*x872))+(((-1.0)*cj0*x869*x870))+((x863*x872))+((r00*x878))+(((-1.0)*pz*x867*x870))+(((0.169744)*sj4))+(((-0.0361)*x867))+((r02*x870*x873))+((px*x865*x866))+((x862*x867))+((x862*x872))+(((-1.0)*x867*x877))+(((-1.0)*x867*x879))+((pz*x870*x872))+(((-1.0)*r01*x880))+(((2.0)*pz*r02*x873)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x881=((2.42718446601942)*pz);
IkReal x882=((2.42718446601942)*cj0*px);
IkReal x883=((2.42718446601942)*py*sj0);
if( IKabs((((sj1*x881))+((cj1*x883))+((cj1*x882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+((sj1*x882))+((sj1*x883))+(((-1.0)*cj1*x881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x881))+((cj1*x883))+((cj1*x882))))+IKsqr(((-0.461165048543689)+((sj1*x882))+((sj1*x883))+(((-1.0)*cj1*x881))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x881))+((cj1*x883))+((cj1*x882))), ((-0.461165048543689)+((sj1*x882))+((sj1*x883))+(((-1.0)*cj1*x881))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x884=IKcos(j2);
IkReal x885=IKsin(j2);
IkReal x886=pz*pz;
IkReal x887=py*py;
IkReal x888=px*px;
IkReal x889=(cj0*sj1);
IkReal x890=(sj0*sj1);
IkReal x891=((0.169744)*cj4);
IkReal x892=((2.0)*pz);
IkReal x893=(py*r02);
IkReal x894=(r02*sj1);
IkReal x895=(r00*sj1);
IkReal x896=((1.0)*py);
IkReal x897=(cj0*cj1);
IkReal x898=(r01*sj1);
IkReal x899=(px*r02);
IkReal x900=((1.0)*pz);
IkReal x901=(pz*r00);
IkReal x902=(cj1*sj0);
IkReal x903=(cj1*r02);
IkReal x904=((0.38)*pz);
IkReal x905=((0.0361)*r01);
IkReal x906=((1.0)*r00);
IkReal x907=((0.38)*cj0);
IkReal x908=((0.0361)*r00);
IkReal x909=(cj1*r01);
IkReal x910=((1.0)*r01);
IkReal x911=(px*r00);
IkReal x912=(r00*x886);
IkReal x913=((0.412)*x885);
IkReal x914=((1.0)*x887);
IkReal x915=((2.0)*px*py);
IkReal x916=(r01*x888);
IkReal x917=((1.0)*x888);
IkReal x918=((0.412)*x884);
evalcond[0]=(((r00*x889))+((r01*x890))+((cj4*x885))+(((-1.0)*x903)));
evalcond[1]=((-0.19)+((py*x890))+((px*x889))+(((-1.0)*x918))+(((-1.0)*cj1*x900)));
evalcond[2]=((((-1.0)*x897*x906))+(((-1.0)*x902*x910))+(((-1.0)*x894))+((cj4*x884)));
evalcond[3]=((((-1.0)*x896*x902))+(((-1.0)*sj1*x900))+(((-1.0)*px*x897))+x913);
evalcond[4]=(((pz*r01*x889))+(((-1.0)*x889*x893))+((px*x909))+(((-1.0)*r00*x890*x900))+((x890*x899))+((sj4*x913))+(((-1.0)*cj1*r00*x896)));
evalcond[5]=(((x901*x902))+((px*x898))+(((-1.0)*x895*x896))+(((-0.19)*cj0*r01))+((x893*x897))+(((-1.0)*r01*x897*x900))+(((0.19)*r00*sj0))+(((-1.0)*x899*x902))+((sj4*x918)));
evalcond[6]=((((-1.0)*x890*x905))+(((0.38)*x911))+(((-1.0)*x887*x890*x910))+((cj1*x892*x911))+((x886*x903))+((r00*x887*x889))+(((-1.0)*x889*x908))+(((-1.0)*x889*x892*x899))+((r02*x904))+(((-1.0)*x888*x889*x906))+(((-2.0)*py*x890*x911))+((x890*x916))+(((-1.0)*x890*x892*x893))+((py*x892*x909))+(((-1.0)*r01*x889*x915))+((x889*x912))+((r01*x886*x890))+((x885*x891))+(((0.0361)*x903))+(((0.38)*py*r01))+(((-1.0)*x903*x917))+(((-1.0)*x903*x914)));
evalcond[7]=(((x886*x894))+((x884*x891))+(((-1.0)*x887*x897*x906))+(((2.0)*py*x902*x911))+(((-1.0)*x897*x908))+(((-1.0)*x902*x905))+(((-1.0)*r01*sj0*x904))+(((-1.0)*x894*x917))+(((-1.0)*x894*x914))+(((-1.0)*x886*x897*x906))+(((-1.0)*x888*x902*x910))+(((0.38)*sj0*x893))+((x899*x907))+((r01*x887*x902))+(((-0.0361)*x894))+(((-1.0)*x886*x902*x910))+((x892*x897*x899))+((px*x892*x895))+((x892*x893*x902))+(((-1.0)*x901*x907))+((r01*x897*x915))+((py*x892*x898))+((r00*x888*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x919=px*px;
IkReal x920=pz*pz;
IkReal x921=py*py;
IkReal x922=(r01*sj0);
IkReal x923=((2.0)*py);
IkReal x924=(r00*sj0);
IkReal x925=((0.19)*cj1);
IkReal x926=(py*r02);
IkReal x927=((0.38)*cj1);
IkReal x928=((1.0)*pz);
IkReal x929=(cj0*r01);
IkReal x930=(px*sj0);
IkReal x931=((0.19)*sj1);
IkReal x932=(cj0*r00);
IkReal x933=(cj0*r02);
IkReal x934=((1.0)*x920);
IkReal x935=((0.38)*py*sj1);
IkReal x936=((1.0)*x921);
IkReal x937=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x930))+((cj0*py)));
evalcond[2]=(sj4+(((-1.0)*x924))+x929);
evalcond[3]=((((-1.0)*px*r00))+(((-1.0)*r02*x928))+(((-1.0)*r02*x925))+((x931*x932))+((x922*x931))+(((-1.0)*py*r01)));
evalcond[4]=((-0.018144)+((sj0*x935))+((cj0*x937))+(((-1.0)*x919))+(((-1.0)*pz*x927))+(((-1.0)*x936))+(((-1.0)*x934)));
evalcond[5]=((((-1.0)*x925*x932))+(((-0.134)*cj4))+(((-1.0)*x928*x932))+((sj0*x926))+(((-1.0)*r02*x931))+((px*x933))+(((-1.0)*x922*x925))+(((-1.0)*x922*x928)));
evalcond[6]=(((x919*x924))+((x919*x929))+(((-1.0)*px*x923*x932))+(((2.0)*pz*r02*x930))+((x920*x929))+(((0.017956)*sj4))+((px*x922*x923))+(((-1.0)*x924*x934))+(((-1.0)*x924*x936))+(((-1.0)*cj0*x926*x927))+((pz*x927*x929))+(((-1.0)*x929*x936))+(((0.0361)*x929))+(((-1.0)*pz*x924*x927))+(((-0.0361)*x924))+(((-1.0)*r01*x937))+(((-1.0)*pz*x923*x933))+((r00*x935))+((r02*x927*x930)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x938=((7.46268656716418)*cj1);
IkReal x939=(py*sj0);
IkReal x940=(cj0*px);
IkReal x941=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*pz*x941))+(((-1.0)*x938*x940))+(((-1.0)*x938*x939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+(((-1.0)*x939*x941))+((pz*x938))+(((-1.0)*x940*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x941))+(((-1.0)*x938*x940))+(((-1.0)*x938*x939))))+IKsqr(((1.41791044776119)+(((-1.0)*x939*x941))+((pz*x938))+(((-1.0)*x940*x941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x941))+(((-1.0)*x938*x940))+(((-1.0)*x938*x939))), ((1.41791044776119)+(((-1.0)*x939*x941))+((pz*x938))+(((-1.0)*x940*x941))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x942=IKsin(j2);
IkReal x943=IKcos(j2);
IkReal x944=pz*pz;
IkReal x945=py*py;
IkReal x946=px*px;
IkReal x947=(cj0*sj1);
IkReal x948=(r01*sj0);
IkReal x949=((1.0)*cj1);
IkReal x950=(r02*sj1);
IkReal x951=(cj1*r02);
IkReal x952=((1.0)*sj1);
IkReal x953=(py*sj1);
IkReal x954=(py*r00);
IkReal x955=(px*sj1);
IkReal x956=((2.0)*pz);
IkReal x957=(px*r02);
IkReal x958=(r00*sj0);
IkReal x959=((2.0)*px);
IkReal x960=((0.38)*r02);
IkReal x961=(cj0*r00);
IkReal x962=(py*sj0);
IkReal x963=(pz*r01);
IkReal x964=(py*r01);
IkReal x965=(cj0*px);
IkReal x966=((0.0361)*cj1);
IkReal x967=((0.38)*pz);
IkReal x968=(cj1*px);
IkReal x969=(r00*x944);
IkReal x970=(r00*x945);
IkReal x971=((0.134)*x943);
IkReal x972=(cj4*x943);
IkReal x973=((0.134)*x942);
IkReal x974=((1.0)*x946);
IkReal x975=(cj4*x942);
IkReal x976=(x956*x962);
evalcond[0]=((((-1.0)*r02*x949))+(((-1.0)*x975))+((sj1*x948))+((r00*x947)));
evalcond[1]=((-0.19)+(((-1.0)*pz*x949))+((sj0*x953))+((px*x947))+x971);
evalcond[2]=((((-1.0)*pz*x952))+(((-1.0)*x949*x962))+(((-1.0)*x949*x965))+(((-1.0)*x973)));
evalcond[3]=((((-1.0)*x972))+(((-1.0)*x948*x949))+(((-1.0)*x950))+(((-1.0)*x949*x961)));
evalcond[4]=((((-1.0)*py*r02*x947))+((r01*x968))+((x947*x963))+(((-1.0)*x949*x954))+(((-1.0)*pz*x952*x958))+(((-1.0)*sj4*x973))+((px*sj0*x950)));
evalcond[5]=((((-1.0)*cj0*x949*x963))+((r01*x955))+(((0.19)*x958))+(((-0.19)*cj0*r01))+(((-1.0)*sj0*x949*x957))+((cj0*py*x951))+(((-1.0)*x952*x954))+(((-1.0)*sj4*x971))+((cj1*pz*x958)));
evalcond[6]=((((-0.0361)*sj1*x948))+(((-0.017956)*x975))+(((-1.0)*r00*x947*x974))+(((-1.0)*x947*x956*x957))+(((-1.0)*r02*x945*x949))+(((-0.0361)*r00*x947))+(((-1.0)*x947*x959*x964))+(((0.0361)*x951))+((cj1*x956*x964))+((x944*x951))+(((-1.0)*r02*x946*x949))+((sj1*x944*x948))+((x947*x970))+(((0.38)*px*r00))+((pz*x960))+(((0.38)*x964))+((sj1*x946*x948))+((x947*x969))+((r00*x956*x968))+(((-1.0)*x945*x948*x952))+(((-1.0)*x950*x976))+(((-1.0)*x953*x958*x959)));
evalcond[7]=((((-0.017956)*x972))+(((-1.0)*x961*x967))+(((-1.0)*x961*x966))+((x951*x956*x965))+((cj1*x946*x961))+((cj1*x945*x948))+((x944*x950))+((r01*x953*x956))+(((-0.0361)*x950))+(((-1.0)*x945*x950))+((x960*x962))+(((-1.0)*x946*x948*x949))+((cj0*cj1*x959*x964))+((r00*x955*x956))+(((-1.0)*x944*x948*x949))+(((0.38)*cj0*x957))+(((-1.0)*x944*x949*x961))+(((-1.0)*x950*x974))+((cj1*sj0*x954*x959))+(((-1.0)*x945*x949*x961))+((x951*x976))+(((-1.0)*x948*x966))+(((-1.0)*x948*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x988=IKPowWithIntegerCheck(cj4,-1);
if(!x988.valid){
continue;
}
IkReal x977=x988.value;
IkReal x978=((1000.0)*cj4);
IkReal x979=(pz*sj1);
IkReal x980=(cj1*r02);
IkReal x981=(cj1*cj3);
IkReal x982=(cj0*px);
IkReal x983=((273.0)*cj3);
IkReal x984=(py*sj0);
IkReal x985=(cj0*r00*sj1);
IkReal x986=((-0.00719424460431655)*x977);
IkReal x987=(r01*sj0*sj1);
CheckValue<IkReal> x989=IKPowWithIntegerCheck(sj3,-1);
if(!x989.valid){
continue;
}
if( IKabs((x986*(((((273.0)*x980))+(((-1.0)*x978*x979))+(((-1.0)*cj1*x978*x984))+(((-1.0)*cj1*x978*x982))+(((-273.0)*x987))+(((-273.0)*x985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x986*(x989.value)*(((((-1.0)*cj3*x978*x979))+(((-139.0)*x985))+(((-139.0)*x987))+(((139.0)*x980))+((x980*x983))+(((-1.0)*x978*x981*x982))+(((-1.0)*x978*x981*x984))+(((-1.0)*x983*x985))+(((-1.0)*x983*x987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x986*(((((273.0)*x980))+(((-1.0)*x978*x979))+(((-1.0)*cj1*x978*x984))+(((-1.0)*cj1*x978*x982))+(((-273.0)*x987))+(((-273.0)*x985))))))+IKsqr((x986*(x989.value)*(((((-1.0)*cj3*x978*x979))+(((-139.0)*x985))+(((-139.0)*x987))+(((139.0)*x980))+((x980*x983))+(((-1.0)*x978*x981*x982))+(((-1.0)*x978*x981*x984))+(((-1.0)*x983*x985))+(((-1.0)*x983*x987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x986*(((((273.0)*x980))+(((-1.0)*x978*x979))+(((-1.0)*cj1*x978*x984))+(((-1.0)*cj1*x978*x982))+(((-273.0)*x987))+(((-273.0)*x985))))), (x986*(x989.value)*(((((-1.0)*cj3*x978*x979))+(((-139.0)*x985))+(((-139.0)*x987))+(((139.0)*x980))+((x980*x983))+(((-1.0)*x978*x981*x982))+(((-1.0)*x978*x981*x984))+(((-1.0)*x983*x985))+(((-1.0)*x983*x987))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x990=IKcos(j2);
IkReal x991=IKsin(j2);
IkReal x992=pz*pz;
IkReal x993=py*py;
IkReal x994=px*px;
IkReal x995=((0.055208)*cj4);
IkReal x996=(r01*sj0);
IkReal x997=((1.0)*cj1);
IkReal x998=((1.0)*sj1);
IkReal x999=(py*sj1);
IkReal x1000=(cj0*r00);
IkReal x1001=((2.0)*pz);
IkReal x1002=(cj0*sj1);
IkReal x1003=(px*r02);
IkReal x1004=((0.273)*cj3);
IkReal x1005=(cj1*r02);
IkReal x1006=(pz*r01);
IkReal x1007=(py*sj0);
IkReal x1008=(px*r00);
IkReal x1009=((2.0)*cj1);
IkReal x1010=(cj0*py);
IkReal x1011=((0.075894)*cj4);
IkReal x1012=((0.0361)*cj1);
IkReal x1013=((0.38)*r02);
IkReal x1014=((0.0361)*sj1);
IkReal x1015=((0.38)*pz);
IkReal x1016=(cj0*r01);
IkReal x1017=(px*r01);
IkReal x1018=(py*r00);
IkReal x1019=(py*r01);
IkReal x1020=(sj3*x990);
IkReal x1021=((0.139)*x991);
IkReal x1022=(sj4*x991);
IkReal x1023=(sj1*x992);
IkReal x1024=(pz*r00*sj0);
IkReal x1025=(sj3*x991);
IkReal x1026=(r02*x994);
IkReal x1027=((0.139)*x990);
IkReal x1028=(r02*x993);
IkReal x1029=(cj3*cj4*x990);
IkReal x1030=(cj3*cj4*x991);
evalcond[0]=(x1030+((sj1*x1000))+(((-1.0)*r02*x997))+(((-1.0)*cj4*x1020))+((sj1*x996)));
evalcond[1]=(x1029+(((-1.0)*x996*x997))+((cj4*x1025))+(((-1.0)*r02*x998))+(((-1.0)*x1000*x997)));
evalcond[2]=((-0.19)+((px*x1002))+(((-1.0)*pz*x997))+(((-1.0)*x1027))+(((-0.273)*x1025))+(((-1.0)*x1004*x990))+((sj0*x999)));
evalcond[3]=(x1021+(((-1.0)*pz*x998))+(((-1.0)*x1007*x997))+(((-0.273)*x1020))+((x1004*x991))+(((-1.0)*cj0*px*x997)));
evalcond[4]=(((sj0*sj1*x1003))+(((-1.0)*r02*x1010*x998))+((sj4*x1021))+(((-1.0)*x1018*x997))+(((-0.273)*sj4*x1020))+(((-1.0)*x1024*x998))+((cj1*x1017))+((x1004*x1022))+((x1002*x1006)));
evalcond[5]=((((-1.0)*cj0*x1006*x997))+((sj4*x1004*x990))+((sj1*x1017))+((sj4*x1027))+((x1005*x1010))+(((-1.0)*x1018*x998))+(((0.19)*r00*sj0))+(((-0.19)*x1016))+(((0.273)*sj3*x1022))+(((-1.0)*sj0*x1003*x997))+((cj1*x1024)));
evalcond[6]=(((cj1*x1001*x1008))+(((-1.0)*x1000*x994*x998))+(((-2.0)*px*x1016*x999))+((x1000*x1023))+((x1011*x991))+((x1023*x996))+(((-2.0)*sj0*x1008*x999))+(((-1.0)*x1020*x995))+(((-1.0)*x1026*x997))+(((-1.0)*x1001*x1002*x1003))+(((0.38)*x1008))+(((0.38)*x1019))+((sj1*x1000*x993))+((sj1*x994*x996))+(((-1.0)*x993*x996*x998))+((pz*x1013))+((cj1*x1001*x1019))+((x1005*x992))+(((0.0361)*x1005))+(((-1.0)*x1014*x996))+(((-1.0)*x1028*x997))+(((-1.0)*x1000*x1014))+(((0.09385)*x1030))+(((-1.0)*r02*sj0*x1001*x999)));
evalcond[7]=((((-1.0)*x1000*x993*x997))+(((0.09385)*x1029))+(((-1.0)*x1012*x996))+((sj1*x1001*x1008))+((cj1*x993*x996))+((x1011*x990))+(((-1.0)*r02*x1014))+(((-1.0)*x992*x996*x997))+(((-1.0)*x1026*x998))+((x1009*x1010*x1017))+((x1007*x1008*x1009))+(((-1.0)*x1000*x992*x997))+(((0.38)*cj0*x1003))+((r01*x1001*x999))+((r02*x1023))+(((-1.0)*x994*x996*x997))+((cj0*cj1*x1001*x1003))+((x1025*x995))+((x1007*x1013))+((x1001*x1005*x1007))+(((-1.0)*x1015*x996))+((cj1*x1000*x994))+(((-1.0)*x1028*x998))+(((-1.0)*x1000*x1015))+(((-1.0)*x1000*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1031=((139.0)*sj1);
IkReal x1032=(cj0*r00);
IkReal x1033=(cj1*sj3);
IkReal x1034=(cj3*cj4);
IkReal x1035=((273.0)*r02);
IkReal x1036=(cj1*cj3);
IkReal x1037=(cj4*sj3);
IkReal x1038=(r01*sj0);
IkReal x1039=((273.0)*sj1);
IkReal x1040=((1000.0)*cj4*pz);
IkReal x1041=((1000.0)*py*sj0*sj1);
IkReal x1042=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((((-139.0)*x1034))+(((-273.0)*cj4)))),-1);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044 = IKatan2WithCheck(IkReal((((x1031*x1032))+((x1031*x1038))+((cj3*x1038*x1039))+(((190.0)*x1037))+(((-1.0)*x1035*x1036))+((cj3*x1032*x1039))+(((-1.0)*x1037*x1042))+(((-1.0)*x1037*x1041))+(((-139.0)*cj1*r02))+((x1033*x1040)))),((((190.0)*x1034))+(((-1.0)*sj3*x1038*x1039))+((x1033*x1035))+(((-1.0)*x1034*x1041))+(((-1.0)*x1034*x1042))+(((1000.0)*cj1*pz*x1034))+(((-1.0)*sj3*x1032*x1039))),IKFAST_ATAN2_MAGTHRESH);
if(!x1044.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1043.value)))+(x1044.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1045=IKcos(j2);
IkReal x1046=IKsin(j2);
IkReal x1047=pz*pz;
IkReal x1048=py*py;
IkReal x1049=px*px;
IkReal x1050=((0.055208)*cj4);
IkReal x1051=(r01*sj0);
IkReal x1052=((1.0)*cj1);
IkReal x1053=((1.0)*sj1);
IkReal x1054=(py*sj1);
IkReal x1055=(cj0*r00);
IkReal x1056=((2.0)*pz);
IkReal x1057=(cj0*sj1);
IkReal x1058=(px*r02);
IkReal x1059=((0.273)*cj3);
IkReal x1060=(cj1*r02);
IkReal x1061=(pz*r01);
IkReal x1062=(py*sj0);
IkReal x1063=(px*r00);
IkReal x1064=((2.0)*cj1);
IkReal x1065=(cj0*py);
IkReal x1066=((0.075894)*cj4);
IkReal x1067=((0.0361)*cj1);
IkReal x1068=((0.38)*r02);
IkReal x1069=((0.0361)*sj1);
IkReal x1070=((0.38)*pz);
IkReal x1071=(cj0*r01);
IkReal x1072=(px*r01);
IkReal x1073=(py*r00);
IkReal x1074=(py*r01);
IkReal x1075=(sj3*x1045);
IkReal x1076=((0.139)*x1046);
IkReal x1077=(sj4*x1046);
IkReal x1078=(sj1*x1047);
IkReal x1079=(pz*r00*sj0);
IkReal x1080=(sj3*x1046);
IkReal x1081=(r02*x1049);
IkReal x1082=((0.139)*x1045);
IkReal x1083=(r02*x1048);
IkReal x1084=(cj3*cj4*x1045);
IkReal x1085=(cj3*cj4*x1046);
evalcond[0]=((((-1.0)*r02*x1052))+x1085+(((-1.0)*cj4*x1075))+((sj1*x1055))+((sj1*x1051)));
evalcond[1]=((((-1.0)*x1052*x1055))+(((-1.0)*r02*x1053))+x1084+((cj4*x1080))+(((-1.0)*x1051*x1052)));
evalcond[2]=((-0.19)+(((-1.0)*x1045*x1059))+((px*x1057))+(((-0.273)*x1080))+((sj0*x1054))+(((-1.0)*pz*x1052))+(((-1.0)*x1082)));
evalcond[3]=(x1076+(((-0.273)*x1075))+(((-1.0)*pz*x1053))+(((-1.0)*cj0*px*x1052))+(((-1.0)*x1052*x1062))+((x1046*x1059)));
evalcond[4]=((((-1.0)*r02*x1053*x1065))+((x1057*x1061))+((sj0*sj1*x1058))+((cj1*x1072))+((sj4*x1076))+(((-0.273)*sj4*x1075))+(((-1.0)*x1052*x1073))+((x1059*x1077))+(((-1.0)*x1053*x1079)));
evalcond[5]=((((0.273)*sj3*x1077))+(((-1.0)*cj0*x1052*x1061))+((x1060*x1065))+(((-0.19)*x1071))+((cj1*x1079))+(((-1.0)*sj0*x1052*x1058))+((sj1*x1072))+(((0.19)*r00*sj0))+((sj4*x1082))+(((-1.0)*x1053*x1073))+((sj4*x1045*x1059)));
evalcond[6]=(((x1055*x1078))+(((-1.0)*x1050*x1075))+(((-1.0)*x1048*x1051*x1053))+(((-1.0)*r02*sj0*x1054*x1056))+(((0.09385)*x1085))+(((-1.0)*x1056*x1057*x1058))+((pz*x1068))+((x1051*x1078))+(((-1.0)*x1049*x1053*x1055))+(((-1.0)*x1052*x1081))+(((-1.0)*x1052*x1083))+(((0.38)*x1063))+(((-1.0)*x1055*x1069))+(((0.0361)*x1060))+(((0.38)*x1074))+((x1046*x1066))+((sj1*x1049*x1051))+((cj1*x1056*x1063))+((cj1*x1056*x1074))+((x1047*x1060))+(((-1.0)*x1051*x1069))+((sj1*x1048*x1055))+(((-2.0)*px*x1054*x1071))+(((-2.0)*sj0*x1054*x1063)));
evalcond[7]=((((0.38)*cj0*x1058))+((x1056*x1060*x1062))+((r01*x1054*x1056))+((cj0*cj1*x1056*x1058))+(((-1.0)*r02*x1069))+(((-1.0)*x1049*x1051*x1052))+(((0.09385)*x1084))+(((-1.0)*x1048*x1052*x1055))+((x1064*x1065*x1072))+((sj1*x1056*x1063))+((x1062*x1068))+((x1050*x1080))+(((-1.0)*x1047*x1052*x1055))+((x1062*x1063*x1064))+((cj1*x1048*x1051))+(((-1.0)*x1055*x1067))+((x1045*x1066))+(((-1.0)*x1055*x1070))+(((-1.0)*x1047*x1051*x1052))+(((-1.0)*x1051*x1070))+(((-1.0)*x1051*x1067))+(((-1.0)*x1053*x1083))+(((-1.0)*x1053*x1081))+((r02*x1078))+((cj1*x1049*x1055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1086=((1.0)*sj1);
IkReal x1087=(cj1*sj3);
IkReal x1088=(cj0*r00);
IkReal x1089=(cj3*r02);
IkReal x1090=(r01*sj0);
IkReal x1091=(sj1*sj3);
IkReal x1092=(cj3*x1090);
CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal(((((-1.0)*x1086*x1092))+((x1087*x1090))+(((-1.0)*cj3*x1086*x1088))+((cj1*x1089))+((r02*x1091))+((x1087*x1088)))),(((cj1*x1092))+(((-1.0)*r02*x1087))+((cj1*cj3*x1088))+((x1088*x1091))+((sj1*x1089))+((x1090*x1091))),IKFAST_ATAN2_MAGTHRESH);
if(!x1093.valid){
continue;
}
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1094.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1093.value)+(((1.5707963267949)*(x1094.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j2);
IkReal x1096=IKsin(j2);
IkReal x1097=pz*pz;
IkReal x1098=py*py;
IkReal x1099=px*px;
IkReal x1100=((0.055208)*cj4);
IkReal x1101=(r01*sj0);
IkReal x1102=((1.0)*cj1);
IkReal x1103=((1.0)*sj1);
IkReal x1104=(py*sj1);
IkReal x1105=(cj0*r00);
IkReal x1106=((2.0)*pz);
IkReal x1107=(cj0*sj1);
IkReal x1108=(px*r02);
IkReal x1109=((0.273)*cj3);
IkReal x1110=(cj1*r02);
IkReal x1111=(pz*r01);
IkReal x1112=(py*sj0);
IkReal x1113=(px*r00);
IkReal x1114=((2.0)*cj1);
IkReal x1115=(cj0*py);
IkReal x1116=((0.075894)*cj4);
IkReal x1117=((0.0361)*cj1);
IkReal x1118=((0.38)*r02);
IkReal x1119=((0.0361)*sj1);
IkReal x1120=((0.38)*pz);
IkReal x1121=(cj0*r01);
IkReal x1122=(px*r01);
IkReal x1123=(py*r00);
IkReal x1124=(py*r01);
IkReal x1125=(sj3*x1095);
IkReal x1126=((0.139)*x1096);
IkReal x1127=(sj4*x1096);
IkReal x1128=(sj1*x1097);
IkReal x1129=(pz*r00*sj0);
IkReal x1130=(sj3*x1096);
IkReal x1131=(r02*x1099);
IkReal x1132=((0.139)*x1095);
IkReal x1133=(r02*x1098);
IkReal x1134=(cj3*cj4*x1095);
IkReal x1135=(cj3*cj4*x1096);
evalcond[0]=(x1135+(((-1.0)*r02*x1102))+((sj1*x1101))+((sj1*x1105))+(((-1.0)*cj4*x1125)));
evalcond[1]=(x1134+((cj4*x1130))+(((-1.0)*r02*x1103))+(((-1.0)*x1102*x1105))+(((-1.0)*x1101*x1102)));
evalcond[2]=((-0.19)+(((-1.0)*x1132))+(((-1.0)*pz*x1102))+((sj0*x1104))+(((-0.273)*x1130))+((px*x1107))+(((-1.0)*x1095*x1109)));
evalcond[3]=(x1126+(((-1.0)*cj0*px*x1102))+(((-1.0)*pz*x1103))+((x1096*x1109))+(((-0.273)*x1125))+(((-1.0)*x1102*x1112)));
evalcond[4]=((((-1.0)*r02*x1103*x1115))+(((-0.273)*sj4*x1125))+((sj4*x1126))+((sj0*sj1*x1108))+((x1109*x1127))+(((-1.0)*x1102*x1123))+(((-1.0)*x1103*x1129))+((cj1*x1122))+((x1107*x1111)));
evalcond[5]=(((sj4*x1095*x1109))+(((-0.19)*x1121))+((sj1*x1122))+(((-1.0)*sj0*x1102*x1108))+((x1110*x1115))+((sj4*x1132))+(((-1.0)*x1103*x1123))+(((0.273)*sj3*x1127))+((cj1*x1129))+(((0.19)*r00*sj0))+(((-1.0)*cj0*x1102*x1111)));
evalcond[6]=((((0.09385)*x1135))+(((0.38)*x1113))+((x1101*x1128))+(((-2.0)*px*x1104*x1121))+(((-1.0)*x1098*x1101*x1103))+((sj1*x1099*x1101))+((x1097*x1110))+(((-1.0)*x1100*x1125))+(((-1.0)*x1099*x1103*x1105))+(((0.38)*x1124))+((sj1*x1098*x1105))+((cj1*x1106*x1113))+(((-1.0)*x1102*x1131))+(((-1.0)*x1102*x1133))+((cj1*x1106*x1124))+((x1096*x1116))+(((-2.0)*sj0*x1104*x1113))+((pz*x1118))+(((-1.0)*r02*sj0*x1104*x1106))+(((0.0361)*x1110))+((x1105*x1128))+(((-1.0)*x1105*x1119))+(((-1.0)*x1101*x1119))+(((-1.0)*x1106*x1107*x1108)));
evalcond[7]=((((-1.0)*x1101*x1120))+(((0.09385)*x1134))+((cj0*cj1*x1106*x1108))+(((-1.0)*x1097*x1101*x1102))+((cj1*x1099*x1105))+((x1112*x1118))+((sj1*x1106*x1113))+(((-1.0)*x1099*x1101*x1102))+((x1106*x1110*x1112))+(((-1.0)*x1098*x1102*x1105))+(((-1.0)*x1105*x1120))+((x1112*x1113*x1114))+(((-1.0)*x1097*x1102*x1105))+((x1100*x1130))+(((-1.0)*x1103*x1131))+(((-1.0)*x1103*x1133))+(((0.38)*cj0*x1108))+(((-1.0)*r02*x1119))+((cj1*x1098*x1101))+((x1114*x1115*x1122))+((r01*x1104*x1106))+((r02*x1128))+(((-1.0)*x1105*x1117))+((x1095*x1116))+(((-1.0)*x1101*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1136=((1000.0)*r02);
IkReal x1137=((1000.0)*r00);
IkReal x1138=((1000.0)*r01);
IkReal x1139=((190.0)*r02);
IkReal x1140=((190.0)*r01*sj0);
IkReal x1141=((190.0)*cj0*r00);
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal((((py*x1138))+((pz*x1136))+((px*x1137))+(((-1.0)*sj1*x1141))+(((-1.0)*sj1*x1140))+((cj1*x1139)))),((((-1.0)*cj0*pz*x1137))+(((-1.0)*sj1*x1139))+(((-1.0)*cj1*x1140))+(((-1.0)*cj1*x1141))+(((-1.0)*pz*sj0*x1138))+((py*sj0*x1136))+(((-273.0)*cj4))+((cj0*px*x1136))),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1143.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1142.value)+(((1.5707963267949)*(x1143.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1144=IKcos(j3);
IkReal x1145=px*px;
IkReal x1146=pz*pz;
IkReal x1147=py*py;
IkReal x1148=(r01*sj0);
IkReal x1149=((2.0)*py);
IkReal x1150=(r00*sj0);
IkReal x1151=((0.19)*cj1);
IkReal x1152=(py*r02);
IkReal x1153=((0.38)*cj1);
IkReal x1154=((1.0)*pz);
IkReal x1155=(cj0*r01);
IkReal x1156=((0.19)*sj1);
IkReal x1157=((0.139)*cj4);
IkReal x1158=(cj0*r00);
IkReal x1159=(cj0*r02);
IkReal x1160=((1.0)*x1146);
IkReal x1161=((0.38)*py*sj1);
IkReal x1162=((1.0)*x1147);
IkReal x1163=((0.075894)*x1144);
IkReal x1164=((0.38)*px*sj1);
IkReal x1165=(px*r02*sj0);
evalcond[0]=((((-1.0)*px*r00))+(((-1.0)*r02*x1154))+(((-1.0)*r02*x1151))+((x1148*x1156))+(((-1.0)*py*r01))+((x1156*x1158))+((x1157*(IKsin(j3)))));
evalcond[1]=((0.05775)+x1163+((sj0*x1161))+((cj0*x1164))+(((-1.0)*x1145))+(((-1.0)*pz*x1153))+(((-1.0)*x1160))+(((-1.0)*x1162)));
evalcond[2]=((((-1.0)*x1144*x1157))+(((-1.0)*x1154*x1158))+(((-1.0)*r02*x1156))+((sj0*x1152))+(((-1.0)*x1148*x1151))+(((-1.0)*x1148*x1154))+(((-0.273)*cj4))+((px*x1159))+(((-1.0)*x1151*x1158)));
evalcond[3]=(((x1146*x1155))+((x1153*x1165))+(((2.0)*pz*x1165))+((r00*x1161))+(((-1.0)*x1150*x1160))+(((-1.0)*x1150*x1162))+(((-0.0361)*x1150))+(((0.09385)*sj4))+(((-1.0)*cj0*x1152*x1153))+((sj4*x1163))+(((-1.0)*pz*x1149*x1159))+(((-1.0)*pz*x1150*x1153))+((pz*x1153*x1155))+(((-1.0)*r01*x1164))+((px*x1148*x1149))+(((-1.0)*x1155*x1162))+((x1145*x1150))+((x1145*x1155))+(((0.0361)*x1155))+(((-1.0)*px*x1149*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1166=(cj3*cj4);
j2eval[0]=((((-1.96402877697842)*cj4))+(((-1.0)*x1166)));
j2eval[1]=IKsign(((((-139.0)*x1166))+(((-273.0)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x1167=px*px;
IkReal x1168=((0.075894)*cj3);
IkReal x1169=pz*pz;
IkReal x1170=py*py;
IkReal x1171=(r01*sj0);
IkReal x1172=((0.19)*cj1);
IkReal x1173=((1.0)*cj1);
IkReal x1174=(py*r02);
IkReal x1175=((1.0)*sj1);
IkReal x1176=((0.38)*cj0);
IkReal x1177=(px*r02);
IkReal x1178=(py*r01);
IkReal x1179=((1.0)*sj0);
IkReal x1180=(cj1*r02);
IkReal x1181=((0.38)*sj1);
IkReal x1182=(r00*sj0);
IkReal x1183=(cj0*r01);
IkReal x1184=((1.0)*pz);
IkReal x1185=((0.0361)*cj1);
IkReal x1186=(cj0*r00);
IkReal x1187=((0.38)*sj0);
IkReal x1188=(r02*sj1);
IkReal x1189=(pz*r00);
IkReal x1190=(px*r00);
IkReal x1191=((0.19)*sj1);
IkReal x1192=((2.0)*cj1);
IkReal x1193=(pz*sj0);
IkReal x1194=(cj0*sj1);
IkReal x1195=((0.0361)*sj1);
IkReal x1196=((0.38)*pz);
IkReal x1197=(cj0*pz);
IkReal x1198=(r00*x1170);
IkReal x1199=((2.0)*pz*sj1);
IkReal x1200=(cj0*x1169);
IkReal x1201=((2.0)*px*py);
IkReal x1202=(cj1*x1196);
IkReal x1203=(r02*x1167);
IkReal x1204=((1.0)*x1170);
IkReal x1205=(r02*x1170);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1179))+((cj0*py)));
evalcond[2]=((1.0)+x1183+(((-1.0)*r00*x1179)));
evalcond[3]=((((-1.0)*r02*x1173))+((sj1*x1171))+((sj1*x1186)));
evalcond[4]=((((-1.0)*r02*x1175))+(((-1.0)*x1171*x1173))+(((-1.0)*x1173*x1186)));
evalcond[5]=((((-1.0)*r02*x1172))+((x1186*x1191))+((x1171*x1191))+(((-1.0)*x1190))+(((-1.0)*r02*x1184))+(((-1.0)*x1178)));
evalcond[6]=((0.05775)+x1168+((px*sj1*x1176))+(((-1.0)*x1204))+(((-1.0)*x1202))+((py*sj0*x1181))+(((-1.0)*x1169))+(((-1.0)*x1167)));
evalcond[7]=((((-1.0)*x1171*x1184))+(((-0.19)*x1188))+((sj0*x1174))+((cj0*x1177))+(((-1.0)*x1171*x1172))+(((-1.0)*x1172*x1186))+(((-1.0)*x1184*x1186)));
evalcond[8]=((0.09385)+x1168+(((0.0361)*x1183))+((x1169*x1183))+((py*r00*x1181))+((x1171*x1201))+(((2.0)*x1177*x1193))+(((-1.0)*cj1*x1174*x1176))+(((-1.0)*x1179*x1198))+(((-0.0361)*x1182))+(((-2.0)*x1174*x1197))+(((-1.0)*x1186*x1201))+((x1167*x1183))+((x1167*x1182))+(((-1.0)*px*r01*x1181))+(((-1.0)*x1182*x1202))+(((-1.0)*x1183*x1204))+((cj1*x1177*x1187))+(((-1.0)*r00*x1169*x1179))+((cj1*pz*r01*x1176)));
evalcond[9]=((((0.38)*x1178))+(((0.0361)*x1180))+(((-1.0)*x1170*x1171*x1175))+((x1169*x1180))+(((0.38)*x1190))+(((-2.0)*pz*x1177*x1194))+((px*x1189*x1192))+(((-1.0)*x1186*x1195))+(((-1.0)*x1173*x1203))+(((-1.0)*x1173*x1205))+(((-1.0)*x1167*x1175*x1186))+((sj1*x1167*x1171))+((sj1*x1169*x1171))+((r02*x1196))+(((-2.0)*sj1*x1174*x1193))+((sj1*x1169*x1186))+(((-2.0)*px*x1178*x1194))+((pz*x1178*x1192))+((sj1*x1170*x1186))+(((-1.0)*sj1*x1182*x1201))+(((-1.0)*x1171*x1195)));
evalcond[10]=((((-1.0)*x1171*x1185))+(((2.0)*px*sj1*x1189))+(((-1.0)*x1176*x1189))+((x1178*x1199))+((x1169*x1188))+((x1174*x1192*x1193))+((x1174*x1187))+((cj1*x1170*x1171))+((x1177*x1192*x1197))+(((-1.0)*x1169*x1171*x1173))+((px*py*x1182*x1192))+((x1176*x1177))+(((-1.0)*x1170*x1173*x1186))+(((-0.0361)*x1188))+(((-1.0)*x1169*x1173*x1186))+(((-1.0)*x1185*x1186))+(((-1.0)*x1175*x1203))+(((-1.0)*x1175*x1205))+((cj0*px*x1178*x1192))+(((-1.0)*x1167*x1171*x1173))+((cj1*x1167*x1186))+(((-1.0)*x1171*x1196)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1206=((139000.0)*cj1);
IkReal x1207=(py*sj0);
IkReal x1208=(cj0*px);
IkReal x1209=((273000.0)*cj3);
IkReal x1210=((139000.0)*sj1);
IkReal x1211=((273000.0)*cj1*sj3);
IkReal x1212=((273000.0)*sj1*sj3);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((((-1.0)*x1207*x1212))+(((-1.0)*x1208*x1212))+(((-1.0)*cj1*x1208*x1209))+(((51870.0)*sj3))+(((-1.0)*cj1*x1207*x1209))+(((-1.0)*pz*sj1*x1209))+((pz*x1211))+(((-1.0)*x1206*x1207))+(((-1.0)*x1206*x1208))+(((-1.0)*pz*x1210)))),((26410.0)+(((-1.0)*x1207*x1210))+(((-1.0)*x1208*x1210))+((cj1*pz*x1209))+(((-1.0)*sj1*x1207*x1209))+(((-1.0)*sj1*x1208*x1209))+((x1207*x1211))+(((51870.0)*cj3))+((pz*x1206))+((x1208*x1211))+((pz*x1212))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x1214.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1215=IKcos(j2);
IkReal x1216=IKsin(j2);
IkReal x1217=(px*sj1);
IkReal x1218=((0.273)*cj3);
IkReal x1219=(py*sj1);
IkReal x1220=((1.0)*r00);
IkReal x1221=(cj1*sj0);
IkReal x1222=((1.0)*px);
IkReal x1223=((1.0)*pz);
IkReal x1224=(cj0*r01);
IkReal x1225=(pz*sj1);
IkReal x1226=((0.273)*sj3);
IkReal x1227=(cj0*cj1);
IkReal x1228=((0.139)*x1216);
IkReal x1229=((0.139)*x1215);
IkReal x1230=(x1216*x1218);
IkReal x1231=(x1215*x1226);
IkReal x1232=(x1216*x1226);
IkReal x1233=(x1215*x1218);
IkReal x1234=(x1230+x1228);
IkReal x1235=(x1232+x1233+x1229);
evalcond[0]=((-0.19)+(((-1.0)*x1235))+((cj0*x1217))+((sj0*x1219))+(((-1.0)*cj1*x1223)));
evalcond[1]=(x1234+(((-1.0)*x1231))+(((-1.0)*x1222*x1227))+(((-1.0)*py*x1221))+(((-1.0)*sj1*x1223)));
evalcond[2]=((((-1.0)*cj1*py*x1220))+x1234+((r02*sj0*x1217))+(((-1.0)*x1231))+((x1224*x1225))+(((-1.0)*sj0*x1220*x1225))+(((-1.0)*cj0*r02*x1219))+((cj1*px*r01)));
evalcond[3]=(x1235+(((-1.0)*r02*x1221*x1222))+((py*r02*x1227))+(((-1.0)*cj1*x1223*x1224))+((r01*x1217))+(((0.19)*r00*sj0))+((pz*r00*x1221))+(((-1.0)*x1219*x1220))+(((-0.19)*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1236=px*px;
IkReal x1237=pz*pz;
IkReal x1238=py*py;
IkReal x1239=((0.075894)*cj3);
IkReal x1240=(r01*sj0);
IkReal x1241=((0.19)*cj1);
IkReal x1242=((1.0)*cj1);
IkReal x1243=(py*r02);
IkReal x1244=((1.0)*sj1);
IkReal x1245=((0.38)*cj0);
IkReal x1246=(px*r02);
IkReal x1247=(py*r01);
IkReal x1248=((1.0)*sj0);
IkReal x1249=(cj1*r02);
IkReal x1250=((0.38)*sj1);
IkReal x1251=(r00*sj0);
IkReal x1252=(cj0*r01);
IkReal x1253=((1.0)*pz);
IkReal x1254=((0.0361)*cj1);
IkReal x1255=(cj0*r00);
IkReal x1256=((0.38)*sj0);
IkReal x1257=(r02*sj1);
IkReal x1258=(pz*r00);
IkReal x1259=(px*r00);
IkReal x1260=((0.19)*sj1);
IkReal x1261=((2.0)*cj1);
IkReal x1262=(pz*sj0);
IkReal x1263=(cj0*sj1);
IkReal x1264=((0.0361)*sj1);
IkReal x1265=((0.38)*pz);
IkReal x1266=(cj0*pz);
IkReal x1267=(r00*x1238);
IkReal x1268=((2.0)*pz*sj1);
IkReal x1269=(cj0*x1237);
IkReal x1270=((2.0)*px*py);
IkReal x1271=(cj1*x1265);
IkReal x1272=(r02*x1236);
IkReal x1273=((1.0)*x1238);
IkReal x1274=(r02*x1238);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x1248))+((cj0*py)));
evalcond[2]=((-1.0)+x1252+(((-1.0)*r00*x1248)));
evalcond[3]=((((-1.0)*r02*x1242))+((sj1*x1255))+((sj1*x1240)));
evalcond[4]=((((-1.0)*r02*x1244))+(((-1.0)*x1242*x1255))+(((-1.0)*x1240*x1242)));
evalcond[5]=((((-1.0)*r02*x1241))+(((-1.0)*x1247))+((x1255*x1260))+(((-1.0)*r02*x1253))+((x1240*x1260))+(((-1.0)*x1259)));
evalcond[6]=((0.05775)+(((-1.0)*x1236))+(((-1.0)*x1237))+x1239+(((-1.0)*x1271))+(((-1.0)*x1273))+((px*sj1*x1245))+((py*sj0*x1250)));
evalcond[7]=((((-1.0)*x1253*x1255))+(((-1.0)*x1241*x1255))+(((-1.0)*x1240*x1241))+((sj0*x1243))+(((-0.19)*x1257))+((cj0*x1246))+(((-1.0)*x1240*x1253)));
evalcond[8]=((-0.09385)+(((-0.0361)*x1251))+(((2.0)*x1246*x1262))+(((-1.0)*x1252*x1273))+(((-1.0)*x1239))+(((-1.0)*x1255*x1270))+((cj1*x1246*x1256))+(((-2.0)*x1243*x1266))+(((-1.0)*x1248*x1267))+((x1237*x1252))+(((-1.0)*cj1*x1243*x1245))+((x1236*x1251))+((x1236*x1252))+(((-1.0)*x1251*x1271))+((cj1*pz*r01*x1245))+(((0.0361)*x1252))+((x1240*x1270))+(((-1.0)*px*r01*x1250))+(((-1.0)*r00*x1237*x1248))+((py*r00*x1250)));
evalcond[9]=(((sj1*x1236*x1240))+(((-1.0)*x1238*x1240*x1244))+(((0.38)*x1247))+(((-2.0)*sj1*x1243*x1262))+((r02*x1265))+(((-1.0)*sj1*x1251*x1270))+((sj1*x1237*x1255))+(((0.0361)*x1249))+(((-1.0)*x1255*x1264))+(((-1.0)*x1236*x1244*x1255))+(((-2.0)*px*x1247*x1263))+((sj1*x1238*x1255))+(((-2.0)*pz*x1246*x1263))+(((0.38)*x1259))+((sj1*x1237*x1240))+(((-1.0)*x1242*x1274))+(((-1.0)*x1242*x1272))+((px*x1258*x1261))+(((-1.0)*x1240*x1264))+((x1237*x1249))+((pz*x1247*x1261)));
evalcond[10]=((((-0.0361)*x1257))+((x1247*x1268))+(((-1.0)*x1236*x1240*x1242))+((x1246*x1261*x1266))+((x1243*x1256))+(((2.0)*px*sj1*x1258))+((cj1*x1238*x1240))+(((-1.0)*x1244*x1272))+(((-1.0)*x1244*x1274))+((x1237*x1257))+(((-1.0)*x1237*x1242*x1255))+(((-1.0)*x1245*x1258))+(((-1.0)*x1237*x1240*x1242))+(((-1.0)*x1254*x1255))+((x1243*x1261*x1262))+((x1245*x1246))+((cj0*px*x1247*x1261))+((cj1*x1236*x1255))+(((-1.0)*x1238*x1242*x1255))+(((-1.0)*x1240*x1254))+((px*py*x1251*x1261))+(((-1.0)*x1240*x1265)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.23659314306796)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-93850.0)+(((-75894.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1275=((139000.0)*cj1);
IkReal x1276=(py*sj0);
IkReal x1277=(cj0*px);
IkReal x1278=((273000.0)*cj3);
IkReal x1279=((139000.0)*sj1);
IkReal x1280=((273000.0)*cj1*sj3);
IkReal x1281=((273000.0)*sj1*sj3);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(IKsign(((-93850.0)+(((-75894.0)*cj3)))),-1);
if(!x1282.valid){
continue;
}
CheckValue<IkReal> x1283 = IKatan2WithCheck(IkReal(((((-1.0)*x1276*x1281))+(((-1.0)*x1275*x1277))+(((-1.0)*x1275*x1276))+(((-1.0)*x1277*x1281))+(((51870.0)*sj3))+(((-1.0)*cj1*x1276*x1278))+(((-1.0)*pz*sj1*x1278))+(((-1.0)*cj1*x1277*x1278))+((pz*x1280))+(((-1.0)*pz*x1279)))),((26410.0)+((pz*x1275))+(((-1.0)*sj1*x1277*x1278))+((cj1*pz*x1278))+(((-1.0)*sj1*x1276*x1278))+(((-1.0)*x1276*x1279))+(((-1.0)*x1277*x1279))+((x1277*x1280))+(((51870.0)*cj3))+((x1276*x1280))+((pz*x1281))),IKFAST_ATAN2_MAGTHRESH);
if(!x1283.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1282.value)))+(x1283.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1284=IKcos(j2);
IkReal x1285=IKsin(j2);
IkReal x1286=(px*sj1);
IkReal x1287=((0.273)*cj3);
IkReal x1288=(py*sj1);
IkReal x1289=((1.0)*r00);
IkReal x1290=(cj1*sj0);
IkReal x1291=((1.0)*px);
IkReal x1292=((1.0)*pz);
IkReal x1293=(cj0*r01);
IkReal x1294=(pz*sj1);
IkReal x1295=((0.273)*sj3);
IkReal x1296=(cj0*cj1);
IkReal x1297=((0.139)*x1285);
IkReal x1298=((0.139)*x1284);
IkReal x1299=(x1284*x1295);
IkReal x1300=(x1285*x1287);
IkReal x1301=(x1285*x1295);
IkReal x1302=(x1284*x1287);
IkReal x1303=(x1300+x1297);
IkReal x1304=(x1301+x1302+x1298);
evalcond[0]=((-0.19)+((cj0*x1286))+(((-1.0)*x1304))+((sj0*x1288))+(((-1.0)*cj1*x1292)));
evalcond[1]=(x1303+(((-1.0)*x1299))+(((-1.0)*sj1*x1292))+(((-1.0)*py*x1290))+(((-1.0)*x1291*x1296)));
evalcond[2]=(x1299+((r02*sj0*x1286))+(((-1.0)*x1303))+((x1293*x1294))+(((-1.0)*cj0*r02*x1288))+(((-1.0)*sj0*x1289*x1294))+((cj1*px*r01))+(((-1.0)*cj1*py*x1289)));
evalcond[3]=(((py*r02*x1296))+(((-1.0)*x1304))+((r01*x1286))+(((-0.19)*x1293))+((pz*r00*x1290))+(((-1.0)*x1288*x1289))+(((0.19)*r00*sj0))+(((-1.0)*cj1*x1292*x1293))+(((-1.0)*r02*x1290*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1305=px*px;
IkReal x1306=pz*pz;
IkReal x1307=py*py;
IkReal x1308=(r01*sj0);
IkReal x1309=((2.0)*py);
IkReal x1310=(r00*sj0);
IkReal x1311=((0.19)*cj1);
IkReal x1312=(py*r02);
IkReal x1313=((0.38)*cj1);
IkReal x1314=((1.0)*pz);
IkReal x1315=(cj0*r01);
IkReal x1316=(px*sj0);
IkReal x1317=((0.19)*sj1);
IkReal x1318=(cj0*r00);
IkReal x1319=(cj0*r02);
IkReal x1320=((1.0)*x1306);
IkReal x1321=((0.38)*py*sj1);
IkReal x1322=((1.0)*x1307);
IkReal x1323=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1316))+((cj0*py)));
evalcond[2]=(x1315+sj4+(((-1.0)*x1310)));
evalcond[3]=(((x1317*x1318))+(((-1.0)*px*r00))+((x1308*x1317))+(((-1.0)*r02*x1311))+(((-1.0)*r02*x1314))+(((-1.0)*py*r01)));
evalcond[4]=((0.133644)+(((-1.0)*x1305))+(((-1.0)*x1320))+(((-1.0)*x1322))+(((-1.0)*pz*x1313))+((sj0*x1321))+((cj0*x1323)));
evalcond[5]=((((-1.0)*x1311*x1318))+(((-1.0)*x1308*x1314))+(((-1.0)*x1308*x1311))+((px*x1319))+(((-1.0)*x1314*x1318))+(((-1.0)*r02*x1317))+(((-0.412)*cj4))+((sj0*x1312)));
evalcond[6]=(((r00*x1321))+(((-1.0)*x1315*x1322))+((px*x1308*x1309))+(((-1.0)*px*x1309*x1318))+(((0.169744)*sj4))+(((-1.0)*r01*x1323))+((x1305*x1310))+((x1305*x1315))+((pz*x1313*x1315))+((x1306*x1315))+(((0.0361)*x1315))+(((-1.0)*pz*x1309*x1319))+(((2.0)*pz*r02*x1316))+((r02*x1313*x1316))+(((-1.0)*pz*x1310*x1313))+(((-1.0)*x1310*x1320))+(((-1.0)*x1310*x1322))+(((-1.0)*cj0*x1312*x1313))+(((-0.0361)*x1310)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1324=((2.42718446601942)*pz);
IkReal x1325=((2.42718446601942)*cj0*px);
IkReal x1326=((2.42718446601942)*py*sj0);
if( IKabs((((cj1*x1326))+((cj1*x1325))+((sj1*x1324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.461165048543689)+(((-1.0)*cj1*x1324))+((sj1*x1325))+((sj1*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1326))+((cj1*x1325))+((sj1*x1324))))+IKsqr(((-0.461165048543689)+(((-1.0)*cj1*x1324))+((sj1*x1325))+((sj1*x1326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1326))+((cj1*x1325))+((sj1*x1324))), ((-0.461165048543689)+(((-1.0)*cj1*x1324))+((sj1*x1325))+((sj1*x1326))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1327=IKcos(j2);
IkReal x1328=IKsin(j2);
IkReal x1329=pz*pz;
IkReal x1330=py*py;
IkReal x1331=px*px;
IkReal x1332=(cj0*sj1);
IkReal x1333=(sj0*sj1);
IkReal x1334=((0.169744)*cj4);
IkReal x1335=((2.0)*pz);
IkReal x1336=(py*r02);
IkReal x1337=(r02*sj1);
IkReal x1338=(r00*sj1);
IkReal x1339=((1.0)*py);
IkReal x1340=(cj0*cj1);
IkReal x1341=(r01*sj1);
IkReal x1342=(px*r02);
IkReal x1343=((1.0)*pz);
IkReal x1344=(pz*r00);
IkReal x1345=(cj1*sj0);
IkReal x1346=(cj1*r02);
IkReal x1347=((0.38)*pz);
IkReal x1348=((0.0361)*r01);
IkReal x1349=((1.0)*r00);
IkReal x1350=((0.38)*cj0);
IkReal x1351=((0.0361)*r00);
IkReal x1352=(cj1*r01);
IkReal x1353=((1.0)*r01);
IkReal x1354=(px*r00);
IkReal x1355=(r00*x1329);
IkReal x1356=((0.412)*x1328);
IkReal x1357=((1.0)*x1330);
IkReal x1358=((2.0)*px*py);
IkReal x1359=(r01*x1331);
IkReal x1360=((1.0)*x1331);
IkReal x1361=((0.412)*x1327);
evalcond[0]=(((cj4*x1328))+((r00*x1332))+((r01*x1333))+(((-1.0)*x1346)));
evalcond[1]=((-0.19)+((px*x1332))+((py*x1333))+(((-1.0)*cj1*x1343))+(((-1.0)*x1361)));
evalcond[2]=((((-1.0)*x1340*x1349))+(((-1.0)*x1345*x1353))+((cj4*x1327))+(((-1.0)*x1337)));
evalcond[3]=(x1356+(((-1.0)*px*x1340))+(((-1.0)*sj1*x1343))+(((-1.0)*x1339*x1345)));
evalcond[4]=((((-1.0)*cj1*r00*x1339))+(((-1.0)*x1332*x1336))+((sj4*x1356))+((x1333*x1342))+((px*x1352))+((pz*r01*x1332))+(((-1.0)*r00*x1333*x1343)));
evalcond[5]=((((-1.0)*r01*x1340*x1343))+((x1344*x1345))+((sj4*x1361))+(((-1.0)*x1342*x1345))+((px*x1341))+(((-0.19)*cj0*r01))+((x1336*x1340))+(((0.19)*r00*sj0))+(((-1.0)*x1338*x1339)));
evalcond[6]=(((x1332*x1355))+(((0.38)*x1354))+((py*x1335*x1352))+(((-1.0)*x1331*x1332*x1349))+(((-1.0)*x1346*x1357))+(((-1.0)*x1332*x1335*x1342))+((x1333*x1359))+(((-2.0)*py*x1333*x1354))+(((-1.0)*x1346*x1360))+((r00*x1330*x1332))+((r02*x1347))+((x1329*x1346))+((x1328*x1334))+((r01*x1329*x1333))+((cj1*x1335*x1354))+(((-1.0)*x1333*x1348))+(((-1.0)*x1332*x1351))+(((-1.0)*x1333*x1335*x1336))+(((-1.0)*x1330*x1333*x1353))+(((-1.0)*r01*x1332*x1358))+(((0.38)*py*r01))+(((0.0361)*x1346)));
evalcond[7]=(((x1335*x1336*x1345))+((x1329*x1337))+((r00*x1331*x1340))+(((-1.0)*x1331*x1345*x1353))+((px*x1335*x1338))+((x1342*x1350))+(((-1.0)*x1330*x1340*x1349))+((py*x1335*x1341))+(((-1.0)*x1329*x1340*x1349))+((x1327*x1334))+((r01*x1340*x1358))+(((0.38)*sj0*x1336))+(((-1.0)*x1344*x1350))+(((2.0)*py*x1345*x1354))+(((-1.0)*x1337*x1357))+((r01*x1330*x1345))+(((-1.0)*x1337*x1360))+(((-1.0)*r01*sj0*x1347))+(((-0.0361)*x1337))+((x1335*x1340*x1342))+(((-1.0)*x1340*x1351))+(((-1.0)*x1345*x1348))+(((-1.0)*x1329*x1345*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1362=px*px;
IkReal x1363=pz*pz;
IkReal x1364=py*py;
IkReal x1365=(r01*sj0);
IkReal x1366=((2.0)*py);
IkReal x1367=(r00*sj0);
IkReal x1368=((0.19)*cj1);
IkReal x1369=(py*r02);
IkReal x1370=((0.38)*cj1);
IkReal x1371=((1.0)*pz);
IkReal x1372=(cj0*r01);
IkReal x1373=(px*sj0);
IkReal x1374=((0.19)*sj1);
IkReal x1375=(cj0*r00);
IkReal x1376=(cj0*r02);
IkReal x1377=((1.0)*x1363);
IkReal x1378=((0.38)*py*sj1);
IkReal x1379=((1.0)*x1364);
IkReal x1380=((0.38)*px*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x1373))+((cj0*py)));
evalcond[2]=(x1372+(((-1.0)*x1367))+sj4);
evalcond[3]=(((x1365*x1374))+(((-1.0)*r02*x1368))+(((-1.0)*px*r00))+((x1374*x1375))+(((-1.0)*r02*x1371))+(((-1.0)*py*r01)));
evalcond[4]=((-0.018144)+(((-1.0)*x1362))+(((-1.0)*x1379))+(((-1.0)*x1377))+((cj0*x1380))+(((-1.0)*pz*x1370))+((sj0*x1378)));
evalcond[5]=((((-1.0)*x1365*x1371))+(((-0.134)*cj4))+((px*x1376))+((sj0*x1369))+(((-1.0)*x1371*x1375))+(((-1.0)*r02*x1374))+(((-1.0)*x1365*x1368))+(((-1.0)*x1368*x1375)));
evalcond[6]=((((-1.0)*px*x1366*x1375))+(((0.017956)*sj4))+(((0.0361)*x1372))+(((-1.0)*x1372*x1379))+((r02*x1370*x1373))+((pz*x1370*x1372))+((px*x1365*x1366))+((x1362*x1372))+(((-1.0)*r01*x1380))+(((2.0)*pz*r02*x1373))+(((-0.0361)*x1367))+(((-1.0)*cj0*x1369*x1370))+(((-1.0)*x1367*x1379))+(((-1.0)*x1367*x1377))+(((-1.0)*pz*x1366*x1376))+((x1363*x1372))+((r00*x1378))+((x1362*x1367))+(((-1.0)*pz*x1367*x1370)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1381=((7.46268656716418)*cj1);
IkReal x1382=(py*sj0);
IkReal x1383=(cj0*px);
IkReal x1384=((7.46268656716418)*sj1);
if( IKabs(((((-1.0)*x1381*x1383))+(((-1.0)*x1381*x1382))+(((-1.0)*pz*x1384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.41791044776119)+(((-1.0)*x1383*x1384))+(((-1.0)*x1382*x1384))+((pz*x1381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1381*x1383))+(((-1.0)*x1381*x1382))+(((-1.0)*pz*x1384))))+IKsqr(((1.41791044776119)+(((-1.0)*x1383*x1384))+(((-1.0)*x1382*x1384))+((pz*x1381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1381*x1383))+(((-1.0)*x1381*x1382))+(((-1.0)*pz*x1384))), ((1.41791044776119)+(((-1.0)*x1383*x1384))+(((-1.0)*x1382*x1384))+((pz*x1381))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1385=IKsin(j2);
IkReal x1386=IKcos(j2);
IkReal x1387=pz*pz;
IkReal x1388=py*py;
IkReal x1389=px*px;
IkReal x1390=(cj0*sj1);
IkReal x1391=(r01*sj0);
IkReal x1392=((1.0)*cj1);
IkReal x1393=(r02*sj1);
IkReal x1394=(cj1*r02);
IkReal x1395=((1.0)*sj1);
IkReal x1396=(py*sj1);
IkReal x1397=(py*r00);
IkReal x1398=(px*sj1);
IkReal x1399=((2.0)*pz);
IkReal x1400=(px*r02);
IkReal x1401=(r00*sj0);
IkReal x1402=((2.0)*px);
IkReal x1403=((0.38)*r02);
IkReal x1404=(cj0*r00);
IkReal x1405=(py*sj0);
IkReal x1406=(pz*r01);
IkReal x1407=(py*r01);
IkReal x1408=(cj0*px);
IkReal x1409=((0.0361)*cj1);
IkReal x1410=((0.38)*pz);
IkReal x1411=(cj1*px);
IkReal x1412=(r00*x1387);
IkReal x1413=(r00*x1388);
IkReal x1414=((0.134)*x1386);
IkReal x1415=(cj4*x1386);
IkReal x1416=((0.134)*x1385);
IkReal x1417=((1.0)*x1389);
IkReal x1418=(cj4*x1385);
IkReal x1419=(x1399*x1405);
evalcond[0]=((((-1.0)*r02*x1392))+((sj1*x1391))+((r00*x1390))+(((-1.0)*x1418)));
evalcond[1]=((-0.19)+((px*x1390))+((sj0*x1396))+x1414+(((-1.0)*pz*x1392)));
evalcond[2]=((((-1.0)*x1416))+(((-1.0)*x1392*x1408))+(((-1.0)*x1392*x1405))+(((-1.0)*pz*x1395)));
evalcond[3]=((((-1.0)*x1391*x1392))+(((-1.0)*x1392*x1404))+(((-1.0)*x1393))+(((-1.0)*x1415)));
evalcond[4]=((((-1.0)*x1392*x1397))+((px*sj0*x1393))+((r01*x1411))+((x1390*x1406))+(((-1.0)*sj4*x1416))+(((-1.0)*pz*x1395*x1401))+(((-1.0)*py*r02*x1390)));
evalcond[5]=((((0.19)*x1401))+(((-1.0)*cj0*x1392*x1406))+(((-1.0)*x1395*x1397))+(((-0.19)*cj0*r01))+((cj1*pz*x1401))+((r01*x1398))+((cj0*py*x1394))+(((-1.0)*sj0*x1392*x1400))+(((-1.0)*sj4*x1414)));
evalcond[6]=((((0.38)*x1407))+((sj1*x1389*x1391))+(((-0.0361)*sj1*x1391))+(((-0.0361)*r00*x1390))+(((-1.0)*r00*x1390*x1417))+(((-1.0)*r02*x1389*x1392))+((r00*x1399*x1411))+((pz*x1403))+(((-0.017956)*x1418))+((sj1*x1387*x1391))+(((0.38)*px*r00))+(((-1.0)*r02*x1388*x1392))+(((-1.0)*x1396*x1401*x1402))+((x1387*x1394))+((x1390*x1412))+((x1390*x1413))+(((-1.0)*x1388*x1391*x1395))+(((-1.0)*x1393*x1419))+(((0.0361)*x1394))+(((-1.0)*x1390*x1399*x1400))+(((-1.0)*x1390*x1402*x1407))+((cj1*x1399*x1407)));
evalcond[7]=(((cj0*cj1*x1402*x1407))+(((-1.0)*x1388*x1393))+(((-1.0)*x1388*x1392*x1404))+(((-0.0361)*x1393))+((cj1*x1388*x1391))+(((-1.0)*x1389*x1391*x1392))+(((-0.017956)*x1415))+(((-1.0)*x1404*x1410))+((r00*x1398*x1399))+((x1387*x1393))+(((-1.0)*x1404*x1409))+((x1394*x1419))+((x1403*x1405))+(((-1.0)*x1391*x1409))+(((-1.0)*x1391*x1410))+(((-1.0)*x1387*x1392*x1404))+((cj1*x1389*x1404))+(((-1.0)*x1393*x1417))+(((-1.0)*x1387*x1391*x1392))+((r01*x1396*x1399))+(((0.38)*cj0*x1400))+((x1394*x1399*x1408))+((cj1*sj0*x1397*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(cj4,-1);
if(!x1431.valid){
continue;
}
IkReal x1420=x1431.value;
IkReal x1421=((1000.0)*cj4);
IkReal x1422=(pz*sj1);
IkReal x1423=(cj1*r02);
IkReal x1424=(cj1*cj3);
IkReal x1425=(cj0*px);
IkReal x1426=((273.0)*cj3);
IkReal x1427=(py*sj0);
IkReal x1428=(cj0*r00*sj1);
IkReal x1429=((-0.00719424460431655)*x1420);
IkReal x1430=(r01*sj0*sj1);
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(sj3,-1);
if(!x1432.valid){
continue;
}
if( IKabs((x1429*(((((-1.0)*x1421*x1422))+(((-1.0)*cj1*x1421*x1427))+(((-1.0)*cj1*x1421*x1425))+(((-273.0)*x1428))+(((-273.0)*x1430))+(((273.0)*x1423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1429*(x1432.value)*(((((-139.0)*x1428))+(((-1.0)*x1426*x1428))+((x1423*x1426))+(((-1.0)*cj3*x1421*x1422))+(((-139.0)*x1430))+(((139.0)*x1423))+(((-1.0)*x1426*x1430))+(((-1.0)*x1421*x1424*x1425))+(((-1.0)*x1421*x1424*x1427)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1429*(((((-1.0)*x1421*x1422))+(((-1.0)*cj1*x1421*x1427))+(((-1.0)*cj1*x1421*x1425))+(((-273.0)*x1428))+(((-273.0)*x1430))+(((273.0)*x1423))))))+IKsqr((x1429*(x1432.value)*(((((-139.0)*x1428))+(((-1.0)*x1426*x1428))+((x1423*x1426))+(((-1.0)*cj3*x1421*x1422))+(((-139.0)*x1430))+(((139.0)*x1423))+(((-1.0)*x1426*x1430))+(((-1.0)*x1421*x1424*x1425))+(((-1.0)*x1421*x1424*x1427))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1429*(((((-1.0)*x1421*x1422))+(((-1.0)*cj1*x1421*x1427))+(((-1.0)*cj1*x1421*x1425))+(((-273.0)*x1428))+(((-273.0)*x1430))+(((273.0)*x1423))))), (x1429*(x1432.value)*(((((-139.0)*x1428))+(((-1.0)*x1426*x1428))+((x1423*x1426))+(((-1.0)*cj3*x1421*x1422))+(((-139.0)*x1430))+(((139.0)*x1423))+(((-1.0)*x1426*x1430))+(((-1.0)*x1421*x1424*x1425))+(((-1.0)*x1421*x1424*x1427))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1433=IKcos(j2);
IkReal x1434=IKsin(j2);
IkReal x1435=pz*pz;
IkReal x1436=py*py;
IkReal x1437=px*px;
IkReal x1438=((0.055208)*cj4);
IkReal x1439=(r01*sj0);
IkReal x1440=((1.0)*cj1);
IkReal x1441=((1.0)*sj1);
IkReal x1442=(py*sj1);
IkReal x1443=(cj0*r00);
IkReal x1444=((2.0)*pz);
IkReal x1445=(cj0*sj1);
IkReal x1446=(px*r02);
IkReal x1447=((0.273)*cj3);
IkReal x1448=(cj1*r02);
IkReal x1449=(pz*r01);
IkReal x1450=(py*sj0);
IkReal x1451=(px*r00);
IkReal x1452=((2.0)*cj1);
IkReal x1453=(cj0*py);
IkReal x1454=((0.075894)*cj4);
IkReal x1455=((0.0361)*cj1);
IkReal x1456=((0.38)*r02);
IkReal x1457=((0.0361)*sj1);
IkReal x1458=((0.38)*pz);
IkReal x1459=(cj0*r01);
IkReal x1460=(px*r01);
IkReal x1461=(py*r00);
IkReal x1462=(py*r01);
IkReal x1463=(sj3*x1433);
IkReal x1464=((0.139)*x1434);
IkReal x1465=(sj4*x1434);
IkReal x1466=(sj1*x1435);
IkReal x1467=(pz*r00*sj0);
IkReal x1468=(sj3*x1434);
IkReal x1469=(r02*x1437);
IkReal x1470=((0.139)*x1433);
IkReal x1471=(r02*x1436);
IkReal x1472=(cj3*cj4*x1433);
IkReal x1473=(cj3*cj4*x1434);
evalcond[0]=(((sj1*x1443))+(((-1.0)*cj4*x1463))+((sj1*x1439))+x1473+(((-1.0)*r02*x1440)));
evalcond[1]=((((-1.0)*x1439*x1440))+((cj4*x1468))+x1472+(((-1.0)*r02*x1441))+(((-1.0)*x1440*x1443)));
evalcond[2]=((-0.19)+(((-1.0)*x1433*x1447))+((sj0*x1442))+(((-1.0)*pz*x1440))+(((-0.273)*x1468))+(((-1.0)*x1470))+((px*x1445)));
evalcond[3]=(((x1434*x1447))+(((-1.0)*x1440*x1450))+(((-1.0)*pz*x1441))+(((-0.273)*x1463))+x1464+(((-1.0)*cj0*px*x1440)));
evalcond[4]=(((x1445*x1449))+(((-1.0)*r02*x1441*x1453))+(((-0.273)*sj4*x1463))+((x1447*x1465))+(((-1.0)*x1440*x1461))+((cj1*x1460))+((sj0*sj1*x1446))+((sj4*x1464))+(((-1.0)*x1441*x1467)));
evalcond[5]=(((sj4*x1433*x1447))+((sj4*x1470))+((x1448*x1453))+(((-0.19)*x1459))+((cj1*x1467))+(((0.19)*r00*sj0))+(((-1.0)*x1441*x1461))+((sj1*x1460))+(((-1.0)*cj0*x1440*x1449))+(((-1.0)*sj0*x1440*x1446))+(((0.273)*sj3*x1465)));
evalcond[6]=((((-2.0)*px*x1442*x1459))+((sj1*x1437*x1439))+(((0.0361)*x1448))+((x1435*x1448))+(((0.38)*x1462))+(((-2.0)*sj0*x1442*x1451))+((x1434*x1454))+((sj1*x1436*x1443))+((pz*x1456))+((cj1*x1444*x1462))+((x1443*x1466))+(((-1.0)*x1440*x1469))+((x1439*x1466))+(((-1.0)*x1436*x1439*x1441))+(((-1.0)*x1444*x1445*x1446))+((cj1*x1444*x1451))+(((-1.0)*x1438*x1463))+(((-1.0)*x1437*x1441*x1443))+(((0.38)*x1451))+(((-1.0)*x1439*x1457))+(((0.09385)*x1473))+(((-1.0)*x1440*x1471))+(((-1.0)*r02*sj0*x1442*x1444))+(((-1.0)*x1443*x1457)));
evalcond[7]=((((-1.0)*x1437*x1439*x1440))+((cj0*cj1*x1444*x1446))+((x1433*x1454))+(((-1.0)*x1436*x1440*x1443))+(((-1.0)*x1435*x1440*x1443))+((cj1*x1437*x1443))+((x1450*x1456))+((sj1*x1444*x1451))+(((-1.0)*x1441*x1471))+(((-1.0)*x1435*x1439*x1440))+((r01*x1442*x1444))+(((0.38)*cj0*x1446))+(((-1.0)*r02*x1457))+((x1438*x1468))+((x1452*x1453*x1460))+(((-1.0)*x1441*x1469))+((r02*x1466))+(((-1.0)*x1439*x1455))+(((-1.0)*x1439*x1458))+(((0.09385)*x1472))+((x1450*x1451*x1452))+((x1444*x1448*x1450))+(((-1.0)*x1443*x1458))+(((-1.0)*x1443*x1455))+((cj1*x1436*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1474=((139.0)*sj1);
IkReal x1475=(cj0*r00);
IkReal x1476=(cj1*sj3);
IkReal x1477=(cj3*cj4);
IkReal x1478=((273.0)*r02);
IkReal x1479=(cj1*cj3);
IkReal x1480=(cj4*sj3);
IkReal x1481=(r01*sj0);
IkReal x1482=((273.0)*sj1);
IkReal x1483=((1000.0)*cj4*pz);
IkReal x1484=((1000.0)*py*sj0*sj1);
IkReal x1485=((1000.0)*cj0*px*sj1);
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(((((-1.0)*x1478*x1479))+((x1476*x1483))+((x1474*x1475))+(((-1.0)*x1480*x1484))+(((-1.0)*x1480*x1485))+((x1474*x1481))+((cj3*x1475*x1482))+(((190.0)*x1480))+(((-139.0)*cj1*r02))+((cj3*x1481*x1482)))),((((1000.0)*cj1*pz*x1477))+((x1476*x1478))+(((-1.0)*sj3*x1475*x1482))+(((-1.0)*x1477*x1484))+(((-1.0)*x1477*x1485))+(((190.0)*x1477))+(((-1.0)*sj3*x1481*x1482))),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(IKsign(((((-273.0)*cj4))+(((-139.0)*x1477)))),-1);
if(!x1487.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1486.value)+(((1.5707963267949)*(x1487.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1488=IKcos(j2);
IkReal x1489=IKsin(j2);
IkReal x1490=pz*pz;
IkReal x1491=py*py;
IkReal x1492=px*px;
IkReal x1493=((0.055208)*cj4);
IkReal x1494=(r01*sj0);
IkReal x1495=((1.0)*cj1);
IkReal x1496=((1.0)*sj1);
IkReal x1497=(py*sj1);
IkReal x1498=(cj0*r00);
IkReal x1499=((2.0)*pz);
IkReal x1500=(cj0*sj1);
IkReal x1501=(px*r02);
IkReal x1502=((0.273)*cj3);
IkReal x1503=(cj1*r02);
IkReal x1504=(pz*r01);
IkReal x1505=(py*sj0);
IkReal x1506=(px*r00);
IkReal x1507=((2.0)*cj1);
IkReal x1508=(cj0*py);
IkReal x1509=((0.075894)*cj4);
IkReal x1510=((0.0361)*cj1);
IkReal x1511=((0.38)*r02);
IkReal x1512=((0.0361)*sj1);
IkReal x1513=((0.38)*pz);
IkReal x1514=(cj0*r01);
IkReal x1515=(px*r01);
IkReal x1516=(py*r00);
IkReal x1517=(py*r01);
IkReal x1518=(sj3*x1488);
IkReal x1519=((0.139)*x1489);
IkReal x1520=(sj4*x1489);
IkReal x1521=(sj1*x1490);
IkReal x1522=(pz*r00*sj0);
IkReal x1523=(sj3*x1489);
IkReal x1524=(r02*x1492);
IkReal x1525=((0.139)*x1488);
IkReal x1526=(r02*x1491);
IkReal x1527=(cj3*cj4*x1488);
IkReal x1528=(cj3*cj4*x1489);
evalcond[0]=(((sj1*x1498))+((sj1*x1494))+x1528+(((-1.0)*r02*x1495))+(((-1.0)*cj4*x1518)));
evalcond[1]=((((-1.0)*x1494*x1495))+(((-1.0)*x1495*x1498))+x1527+(((-1.0)*r02*x1496))+((cj4*x1523)));
evalcond[2]=((-0.19)+(((-1.0)*x1488*x1502))+((sj0*x1497))+(((-0.273)*x1523))+(((-1.0)*x1525))+((px*x1500))+(((-1.0)*pz*x1495)));
evalcond[3]=((((-1.0)*cj0*px*x1495))+(((-0.273)*x1518))+((x1489*x1502))+x1519+(((-1.0)*pz*x1496))+(((-1.0)*x1495*x1505)));
evalcond[4]=(((sj0*sj1*x1501))+(((-0.273)*sj4*x1518))+((cj1*x1515))+((x1500*x1504))+((x1502*x1520))+((sj4*x1519))+(((-1.0)*r02*x1496*x1508))+(((-1.0)*x1496*x1522))+(((-1.0)*x1495*x1516)));
evalcond[5]=((((-1.0)*cj0*x1495*x1504))+(((-1.0)*sj0*x1495*x1501))+((cj1*x1522))+(((0.273)*sj3*x1520))+((sj1*x1515))+((sj4*x1488*x1502))+(((0.19)*r00*sj0))+((sj4*x1525))+((x1503*x1508))+(((-1.0)*x1496*x1516))+(((-0.19)*x1514)));
evalcond[6]=((((-1.0)*x1498*x1512))+(((-2.0)*px*x1497*x1514))+((x1490*x1503))+(((-1.0)*r02*sj0*x1497*x1499))+((x1498*x1521))+((x1494*x1521))+(((0.09385)*x1528))+(((-1.0)*x1494*x1512))+((cj1*x1499*x1506))+(((0.38)*x1506))+(((-1.0)*x1492*x1496*x1498))+((cj1*x1499*x1517))+((x1489*x1509))+(((0.38)*x1517))+(((-1.0)*x1495*x1524))+(((-1.0)*x1495*x1526))+(((0.0361)*x1503))+((pz*x1511))+(((-1.0)*x1499*x1500*x1501))+((sj1*x1492*x1494))+(((-1.0)*x1493*x1518))+(((-2.0)*sj0*x1497*x1506))+((sj1*x1491*x1498))+(((-1.0)*x1491*x1494*x1496)));
evalcond[7]=((((-1.0)*x1498*x1510))+(((-1.0)*x1498*x1513))+((x1488*x1509))+((r01*x1497*x1499))+(((0.09385)*x1527))+(((-1.0)*x1492*x1494*x1495))+(((-1.0)*x1494*x1513))+(((-1.0)*x1494*x1510))+(((0.38)*cj0*x1501))+((cj0*cj1*x1499*x1501))+(((-1.0)*x1490*x1494*x1495))+((x1505*x1506*x1507))+(((-1.0)*x1490*x1495*x1498))+((cj1*x1492*x1498))+(((-1.0)*r02*x1512))+((sj1*x1499*x1506))+(((-1.0)*x1496*x1524))+(((-1.0)*x1496*x1526))+((x1499*x1503*x1505))+((cj1*x1491*x1494))+((r02*x1521))+((x1505*x1511))+((x1493*x1523))+(((-1.0)*x1491*x1495*x1498))+((x1507*x1508*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1529=((1.0)*sj1);
IkReal x1530=(cj1*sj3);
IkReal x1531=(cj0*r00);
IkReal x1532=(cj3*r02);
IkReal x1533=(r01*sj0);
IkReal x1534=(sj1*sj3);
IkReal x1535=(cj3*x1533);
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1536.valid){
continue;
}
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal(((((-1.0)*x1529*x1535))+((cj1*x1532))+((x1530*x1533))+((x1530*x1531))+((r02*x1534))+(((-1.0)*cj3*x1529*x1531)))),(((cj1*x1535))+((x1531*x1534))+((sj1*x1532))+((cj1*cj3*x1531))+((x1533*x1534))+(((-1.0)*r02*x1530))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1536.value)))+(x1537.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1538=IKcos(j2);
IkReal x1539=IKsin(j2);
IkReal x1540=pz*pz;
IkReal x1541=py*py;
IkReal x1542=px*px;
IkReal x1543=((0.055208)*cj4);
IkReal x1544=(r01*sj0);
IkReal x1545=((1.0)*cj1);
IkReal x1546=((1.0)*sj1);
IkReal x1547=(py*sj1);
IkReal x1548=(cj0*r00);
IkReal x1549=((2.0)*pz);
IkReal x1550=(cj0*sj1);
IkReal x1551=(px*r02);
IkReal x1552=((0.273)*cj3);
IkReal x1553=(cj1*r02);
IkReal x1554=(pz*r01);
IkReal x1555=(py*sj0);
IkReal x1556=(px*r00);
IkReal x1557=((2.0)*cj1);
IkReal x1558=(cj0*py);
IkReal x1559=((0.075894)*cj4);
IkReal x1560=((0.0361)*cj1);
IkReal x1561=((0.38)*r02);
IkReal x1562=((0.0361)*sj1);
IkReal x1563=((0.38)*pz);
IkReal x1564=(cj0*r01);
IkReal x1565=(px*r01);
IkReal x1566=(py*r00);
IkReal x1567=(py*r01);
IkReal x1568=(sj3*x1538);
IkReal x1569=((0.139)*x1539);
IkReal x1570=(sj4*x1539);
IkReal x1571=(sj1*x1540);
IkReal x1572=(pz*r00*sj0);
IkReal x1573=(sj3*x1539);
IkReal x1574=(r02*x1542);
IkReal x1575=((0.139)*x1538);
IkReal x1576=(r02*x1541);
IkReal x1577=(cj3*cj4*x1538);
IkReal x1578=(cj3*cj4*x1539);
evalcond[0]=((((-1.0)*r02*x1545))+x1578+((sj1*x1548))+((sj1*x1544))+(((-1.0)*cj4*x1568)));
evalcond[1]=(((cj4*x1573))+(((-1.0)*r02*x1546))+x1577+(((-1.0)*x1545*x1548))+(((-1.0)*x1544*x1545)));
evalcond[2]=((-0.19)+(((-1.0)*pz*x1545))+((sj0*x1547))+(((-1.0)*x1538*x1552))+(((-0.273)*x1573))+((px*x1550))+(((-1.0)*x1575)));
evalcond[3]=(((x1539*x1552))+(((-1.0)*pz*x1546))+(((-1.0)*cj0*px*x1545))+x1569+(((-1.0)*x1545*x1555))+(((-0.273)*x1568)));
evalcond[4]=((((-1.0)*x1546*x1572))+((x1552*x1570))+(((-1.0)*r02*x1546*x1558))+((cj1*x1565))+((x1550*x1554))+((sj4*x1569))+((sj0*sj1*x1551))+(((-1.0)*x1545*x1566))+(((-0.273)*sj4*x1568)));
evalcond[5]=((((-1.0)*x1546*x1566))+((x1553*x1558))+((sj4*x1538*x1552))+(((-1.0)*cj0*x1545*x1554))+((cj1*x1572))+((sj4*x1575))+(((0.273)*sj3*x1570))+((sj1*x1565))+(((-0.19)*x1564))+(((0.19)*r00*sj0))+(((-1.0)*sj0*x1545*x1551)));
evalcond[6]=((((-1.0)*x1542*x1546*x1548))+(((-2.0)*px*x1547*x1564))+(((-1.0)*x1543*x1568))+(((-1.0)*x1548*x1562))+((sj1*x1541*x1548))+((x1544*x1571))+((x1539*x1559))+(((0.09385)*x1578))+(((-1.0)*x1541*x1544*x1546))+(((-2.0)*sj0*x1547*x1556))+(((0.0361)*x1553))+((x1540*x1553))+(((-1.0)*x1549*x1550*x1551))+(((0.38)*x1556))+((cj1*x1549*x1567))+(((-1.0)*r02*sj0*x1547*x1549))+((pz*x1561))+(((-1.0)*x1544*x1562))+(((0.38)*x1567))+((cj1*x1549*x1556))+(((-1.0)*x1545*x1576))+(((-1.0)*x1545*x1574))+((x1548*x1571))+((sj1*x1542*x1544)));
evalcond[7]=(((x1555*x1561))+(((-1.0)*x1546*x1576))+(((-1.0)*x1546*x1574))+(((-1.0)*x1540*x1544*x1545))+(((-1.0)*x1540*x1545*x1548))+(((-1.0)*r02*x1562))+(((-1.0)*x1542*x1544*x1545))+(((-1.0)*x1548*x1563))+(((-1.0)*x1548*x1560))+((cj1*x1541*x1544))+((sj1*x1549*x1556))+((x1549*x1553*x1555))+(((0.09385)*x1577))+((x1538*x1559))+((x1555*x1556*x1557))+((x1557*x1558*x1565))+((cj1*x1542*x1548))+((r01*x1547*x1549))+((x1543*x1573))+(((-1.0)*x1541*x1545*x1548))+((r02*x1571))+(((-1.0)*x1544*x1560))+(((-1.0)*x1544*x1563))+(((0.38)*cj0*x1551))+((cj0*cj1*x1549*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
